/*
 * $Id$
 *
 * Copyright (c) 2001, 2002 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.core.util.Debug;
import org.ofbiz.core.util.GeneralException;
import org.ofbiz.core.util.ObjectType;
import org.ofbiz.core.widgetimpl.*;
import org.ofbiz.core.widget.form.*;

import org.ofbiz.core.util.*;
import org.ofbiz.core.entity.*;
import org.ofbiz.core.security.*;
import org.ofbiz.core.service.*;
import org.ofbiz.core.entity.model.*;

import javax.servlet.*;
import javax.servlet.http.*;
/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Revision$
 * @since      2.1
 */

    
security			= request.getAttribute("security");
// Get permission from pagedef config file
String permission		= page.getProperty("permission");
String singleFormName		= page.getProperty("singleFormName");
String listFormName		= page.getProperty("listFormName");
if(security.hasEntityPermission(permission, "_VIEW", session)) {
    	context.put("hasPermission", Boolean.TRUE);
} else {
    	context.put("hasPermission", Boolean.FALSE);
}

Map inputFields		= UtilHttp.getParameterMap(request);
String entityName		= page.getProperty("entityName");
// Can override the listName of "entityList" in the pagedef config file.
String listName			= page.getProperty("listName");
if(listName == null) listName   = "entityList";
String formDefFile		= page.getProperty("formDefFile");


LocalDispatcher dispatcher	= (LocalDispatcher)request.getAttribute("dispatcher");
       	GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");


HashMap parameters			= new HashMap();
parameters.put("entityName", entityName);
parameters.put("inputFields", inputFields);
Map result			= null;
try {
           result = dispatcher.runSync("performFind", parameters	);

} catch (GenericServiceException e) {
            request.setAttribute(SiteDefs.ERROR_MESSAGE, "ERROR: Error in findLookup service. "  + e.getMessage() + ")");
            Debug.logError(e, "findprep.bsh");
            return "error";
        }


EntityListIterator listIt = (EntityListIterator)result.get("listIt");



// This was pretty much hacked from somewhere else in OFBiz
int viewIndex	= -1;
try {
    		viewIndex = Integer.valueOf((String) request.getParameter("VIEW_INDEX")).intValue();
}catch(Exception e){
    		 viewIndex	= 0;
}

int viewSize	= -1;
int listSize	= -1;
try {
	viewSize = Integer.valueOf((String) request.getParameter("VIEW_SIZE")).intValue();
}catch(Exception e){
	try {
		// If view size is not in page, get it from pagedef .xml file
		String viewSizePage	= page.getProperty("viewSize");
    			viewSize = Integer.valueOf(viewSizePage).intValue();
	}catch(Exception e2){
    			 viewSize	= 10; // Not good to have a magic number here
	}
}


    int lowIndex = viewIndex * viewSize;
    int highIndex = (viewIndex + 1) * viewSize;

List entityList	= new ArrayList();
    // attempt to get the full size
if(listIt != null) {
		try {

    				listIt.last();
    				listSize = listIt.currentIndex(); 


    				if (listSize < highIndex) {
        				highIndex = listSize;
    				}
			if(listSize > 0) {
    					listIt.first();
    					entityList = listIt.getPartialList(lowIndex + 1, viewSize );
			}
		}catch(GenericEntityException e) { 
                       		request.setAttribute(SiteDefs.ERROR_MESSAGE, e.getMessage());
			return "error";
		}
    		if (entityList != null) {
 		context.put(listName, entityList);
		// request.setAttribute(listName, entityList);
 		request.setAttribute("listName", listName);
    		}

}

inputFields.remove("VIEW_INDEX");
        String queryString = UtilHttp.urlEncodeArgs(inputFields);


context.put("listSize", new Integer(listSize));
context.put("highIndex", new Integer(highIndex));
context.put("lowIndex", new Integer(lowIndex));
context.put("viewSize", new Integer(viewSize));
context.put("viewIndex", new Integer(viewIndex));
context.put("queryString", queryString);


HtmlFormWrapper queryWrapper = new HtmlFormWrapper(formDefFile, 
				singleFormName, request, response);
context.put("queryWrapper", queryWrapper);

HtmlFormWrapper listWrapper = new HtmlFormWrapper(formDefFile, 
				listFormName, request, response);
listWrapper.putInContext(listName, entityList);
listWrapper.putInContext("listSize", listSize);
listWrapper.putInContext("highIndex", highIndex);
listWrapper.putInContext("lowIndex", lowIndex);
listWrapper.putInContext("viewSize", viewSize);
listWrapper.putInContext("viewIndex", viewIndex);
listWrapper.putInContext("queryString", queryString);
ModelForm modelForm	= listWrapper.getModelForm();
modelForm.setListName(listName);
context.put("listWrapper", listWrapper);

return "success";

