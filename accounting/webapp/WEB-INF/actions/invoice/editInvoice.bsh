/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Revision$
 *@since      2.1
 */
 
 import java.util.*;
 import org.ofbiz.core.entity.*;
 import org.ofbiz.core.util.*;
 import org.ofbiz.commonapp.accounting.invoice.*;
 
 delegator = request.getAttribute("delegator");
 invoiceId = request.getParameter("invoiceId");
 
 if (invoiceId != null) {
    invoice = delegator.findByPrimaryKey("Invoice", UtilMisc.toMap("invoiceId", invoiceId));
    context.put("invoice", invoice);
    
    invoiceItems = invoice.getRelated("InvoiceItem");
    context.put("invoiceItems", invoiceItems);
    
    invoiceTotal = InvoiceWorker.getInvoiceTotal(invoice);
    context.put("invoiceTotal", new Double(invoiceTotal));    
    
    billingAddress = InvoiceWorker.getBillToAddress(invoice);    
    context.put("billingAddress", billingAddress);
    
    billingParty = InvoiceWorker.getBillToParty(invoice);
    context.put("billingParty", billingParty);
        
    if (billingParty != null && billingParty.get("partyTypeId").equals("PERSON"))
        context.put("billingPerson", billingParty.getRelatedOne("Person"));
    else if (billingParty != null)
        context.put("billingGroup", billingParty.getRelatedOne("PartyGroup"));    
        
    invoiceStatus = invoice.getRelatedOne("StatusItem");            
    context.put("invoiceStatus", invoiceStatus);
    
    edit = request.getParameter("editInvoice");
    if (edit != null && edit.equalsIgnoreCase("true")) {            
        invoiceItemTypes = delegator.findAll("InvoiceItemType");
        context.put("invoiceItemTypes", invoiceItemTypes);  
        context.put("editInvoice", new Boolean(true));  
    }    
 }
   