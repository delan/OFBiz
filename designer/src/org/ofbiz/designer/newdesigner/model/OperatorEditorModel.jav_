package newdesigner.model;

import java.io.*;
import util.*;
import java.util.*;
import pattern.*;
import newdesigner.operatoreditor.*;
import generic.*;

public class OperatorEditorModel extends BaseModel implements IOperatorEditorModel {
    public String getOperatorEditorType() {
        return(String)getDataElement("type");
    }

    private OperatorEditorModel() {
    }

    public static IOperatorEditorModel createModelProxy() {
        OperatorEditorModel model = new OperatorEditorModel();
        return(IOperatorEditorModel)GuiModelProxy.newProxyInstance(model, "newdesigner.model.IOperatorEditorModelWrapper");
    }

    public void setEditorOperatorType(String operatorType) {
        setDataElement("type", operatorType);
    }

    public String getEditorOperatorType() {
        return(String)getDataElement("type");
    }

    public String getTaskName() {
        return(String)getDataElement("taskName");
    }

    public void setTaskName(String taskName) {
        setDataElement("taskName", taskName);
    }

    public IOperatorModel getStartingOperator() {
        return(IOperatorModel)getRelationshipAt("startingOperator", 0);
    }

    public void setStartingOperator(IOperatorModel newStartingOperator) {
        IOperatorModel oldStartingOperator = getStartingOperator();
        removeRelationship("startingOperator", oldStartingOperator);
        addRelationship("startingOperator", newStartingOperator);
    }

    public void addOperator(IOperatorModel operator) {
        addRelationship("Operator", operator);
    }

    public IOperatorModel createStartingOperator(String operatorType, String operatorID, boolean terminal) {
        if(operatorID == null)
            operatorID = "Operator" + Math.random();
        IOperatorModel operator = OperatorModel.createModelProxy(operatorID, terminal);
        operator.setOperatorType(operatorType);
        setStartingOperator(operator);
        addOperator(operator);
        return operator;
    }

    public int getOtherTaskCount() {
        Vector vec = (Vector)getDataElement("otherTasks");
        if(vec == null) return -1;
        else return vec.size();
    }

    public boolean containsOtherTask(String otherTask) {
        if(indexOfOtherTask(otherTask) == -1) return false;
        else return true;
    }

    private int indexOfOtherTask(String otherTask) {
        int count = getOtherTaskCount();
        for(int i=0; i<count; i++) {
            String task = getOtherTaskAt(i);
            if(task.equals(otherTask))
                return i;
        }
        return -1;
    }

    public String getOtherTaskAt(int i) {
        Vector vec = (Vector)getDataElement("otherTasks");
        if(vec == null)
            return null;
        else
            return(String)vec.elementAt(i);
    }

    public void addOtherTask(String otherTask) {
        if(containsOtherTask(otherTask)) {
            WARNING.println("WARNING : Task " + otherTask + " already exists");
            return;
        }
        Vector vec = (Vector)getDataElement("otherTasks");
        if(vec != null) vec = (Vector)vec.clone();
        else vec = new Vector();
        vec.addElement(otherTask);
        setDataElement("otherTasks", vec);
    }

    public void setOtherTasks(Vector arg0) {
        setDataElement("otherTasks", arg0);
    }

    public void insertOtherTaskAt(String otherTask, int arg1 ) {
        int existingIndex = indexOfOtherTask(otherTask);
        if(existingIndex == arg1) {
            WARNING.println("WARNING : Task " + otherTask + " already exists");
            return;
        } else if(existingIndex != -1) {
            WARNING.println("WARNING : attempting to add Task " + otherTask + " to " + arg1 + " which already exists at index " + existingIndex);
            return;
        }
        Vector vec = (Vector)((Vector)getDataElement("otherTasks")).clone();
        if(vec != null) {
            vec.insertElementAt(otherTask, arg1);
            setDataElement("otherTasks", vec);
        }
    }

    public void setOtherTaskAt(String arg0, int arg1 ) {
        Vector vec = (Vector)((Vector)getDataElement("otherTasks")).clone();
        if(vec != null) {
            vec.setElementAt(arg0, arg1);
            setDataElement("otherTasks", vec);
        }
    }

    public boolean removeOtherTask(String arg0 ) {
        Vector vec = (Vector)((Vector)getDataElement("otherTasks")).clone();
        boolean returnValue = false;
        if(vec != null) {
            returnValue = vec.removeElement(arg0);
            setDataElement("otherTasks", vec);
        }
        return returnValue;
    }

    public void removeOtherTaskAt(int arg0 ) {
        Vector vec = (Vector)((Vector)getDataElement("otherTasks")).clone();
        if(vec != null) {
            vec.removeElementAt(arg0);
            setDataElement("otherTasks", vec);
        }
    }

    public void removeAllOtherTasks() {
        Vector vec = (Vector)getDataElement("otherTasks");
        if(vec != null) {
            vec = (Vector)vec.clone();
            vec.removeAllElements();
            setDataElement("otherTasks", vec);
        }
    }

    public void neighborChanged(IRelationshipNode obj) {
        WARNING.println("NOT IMPLEMENTED");
    }

    // abstract method implementation from BaseModel
    // format [[name, complement-name, relationship-order]..];
    protected static final Object[][] relationships = { 
        {"startingOperator", "operatorEditor", SINGLE},
        {"Operator", "parentOperatorEditor", MULTIPLE},
    };
    protected static final Object[][] dataElements = { 
        {"taskName", "java.lang.String"},
        {"type", "java.lang.String"},
        {"otherTasks", "java.util.Vector"},
    };

    public Object[][] getRelationships() {
        return relationships;
    }

    public Object[][] getDataElements() {
        return dataElements;
    }

    public HashSet getModifyMethods() {
        HashSet set = new HashSet();
        set.add("setTaskName");
        set.add("setStartingOperator");
        set.add("addOtherTask");
        set.add("setOtherTasks");
        set.add("setOtherTaskAt");
        set.add("insertOtherTaskAt");
        set.add("removeOtherTask");
        set.add("removeOtherTaskAt");
        set.add("removeAllOtherTasks");
        return set;
    }

    public void neighborDying(IRelationshipNode source) {
        synchronizeGui();
    }
}
