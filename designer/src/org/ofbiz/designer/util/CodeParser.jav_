package util;

import barat.reflect.*;
import barat.*;
import barat.collections.*;
import java.io.*;

public class CodeParser {
    public static void main(String[] args){
        printMethodNames(args[0]);
    }

    public static void main2(String[] args) {
        File file = new File(args[0]);
        CompilationUnit c = Barat.parseCompilationUnit(file);
        ConcreteMethodList list = c.getClasses().toArray()[0].getConcreteMethods();
        ConcreteMethod[] blocks = list.toArray();
        int count = blocks.length;
        for(int i=0;i<count;i++) {
            ConcreteMethod method = blocks[i];
            if(method.getName().equals("setDomainURL")) {
                Block blk = method.getBody();
                AStatement[] statements = blk.getStatements().toArray();
                LOG.println("statements.length is " + statements.length);
                int stCount = statements.length;
                for(int j=0;j<stCount;j++) {
                    AStatement st = statements[j];
                    LOG.println("st is " + st);
                    if(st instanceof ExpressionStatement) {
                        ExpressionStatement ex = (ExpressionStatement)st;
                        AExpression expression = ex.getExpression();
                        if(expression instanceof InstanceMethodCall) {
                            InstanceMethodCall icall = (InstanceMethodCall)expression;
                            LOG.println("icall.getInstance() is " + icall.getInstance());
                            LOG.println("icall.getCalledMethod() is " + icall.getCalledMethod());
                            AExpression[] arguments = icall.getArguments().toArray();
                            LOG.println("arguments.length is " + arguments.length);
                            int argCount = arguments.length;
                            for(int k=0;k<argCount;k++) {
                                LOG.println("arguments[k] is " + arguments[k]);
                                LOG.println("arguments[k].getClass().getName() is " + arguments[k].getClass().getName());
                                if(arguments[k] instanceof VariableAccess) {
                                    VariableAccess v = (VariableAccess)arguments[k];
                                    AVariable av = v.getVariable();
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public static void printMethodNames(String fileName) {
        File file = new File(fileName);
        CompilationUnit c = Barat.parseCompilationUnit(file);
        ConcreteMethod[] blocks = c.getClasses().toArray()[0].getConcreteMethods().toArray();
        String printStr = "";
        for(int i=0;i<blocks.length;i++) 
            printStr += blocks[i].getName() + " ";
        System.err.println(printStr);
    }
}
