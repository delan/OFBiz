package pattern;

import java.lang.reflect.*;
import java.util.*;
import java.net.*;

public class ProxyWrapper implements InvocationHandler {
	static Hashtable proxies = new Hashtable();
	
	public static Object newProxyInstance(Object dtdobj) throws Exception{
		if (proxies.containsKey(dtdobj)) 
			return proxies.get(dtdobj);
		
		String dtdClass = dtdobj.getClass().getName();
		String wrapperClassName = "I" + dtdClass +"Wrapper";
		Object dtdSupportObj = Class.forName(dtdClass + "SupportClass").newInstance();
		((ISupportClass)dtdSupportObj).setDtdClass(dtdobj);
		if (dtdClass.indexOf(".") != -1){
			int dotPosition = dtdClass.lastIndexOf(".");
			wrapperClassName = dtdClass.substring(0, dotPosition+1) + "I" + 
							   dtdClass.substring(dotPosition+1, dtdClass.length()) +"Wrapper";
		}
		Register register = new Register();
		Object newproxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), 
												 new Class[] {Class.forName(wrapperClassName)}, 
												 new ProxyWrapper(dtdobj, dtdSupportObj,register));
		register.setProxy(newproxy, wrapperClassName);
		proxies.put(dtdobj, newproxy);
		return newproxy;
	}
	
	Object dtdSupportObj, dtdObj;
	Register registerObj;
	Method[] supportMethods, registerMethods;
	
	public ProxyWrapper(Object dtdobj, Object dtdSupportobj,Object registerobj) throws ClassNotFoundException, InstantiationException, IllegalAccessException{
		this.dtdSupportObj = dtdSupportobj;
		this.dtdObj = dtdobj;
		this.registerObj = (Register)registerobj;
		supportMethods = dtdSupportObj.getClass().getDeclaredMethods();
		registerMethods = registerObj.getClass().getDeclaredMethods();
	}
	
	public Object invoke(Object obj, Method method, Object[] params){
		try{
			Object deleg = dtdObj;
			for (int i=0; i<supportMethods.length; i++)
				if (methodsRequal(method, supportMethods[i])){
					deleg = dtdSupportObj;
					break;
				}
			for (int i=0; i<registerMethods.length; i++)
				if (methodsRequal(method, registerMethods[i])){
					deleg = registerObj;
					break;
				}
			Object returnObj = method.invoke(deleg, params);

			if(method.getName().startsWith("set") || method.getName().startsWith("remove")) 
				registerObj.fire(); // notify data changes

			if (returnObj == null ) return null;
			
			if (returnObj instanceof Integer || returnObj instanceof String)
				return returnObj;
			
			if (returnObj.getClass().isArray()){
				if (Array.getLength(returnObj)==0) 
					return returnObj;// empty array
				String elementType = Array.get(returnObj, 0).getClass().getName();
				if (elementType.equals("java.lang.String") || elementType.equals("java.lang.Integer"))
					return returnObj;
				Object returnArray = Array.newInstance(Class.forName(getInterface(elementType)), Array.getLength(returnObj));
				for (int i=0; i<Array.getLength(returnObj); i++){
					Object element = Array.get(returnObj, i);
					Array.set(returnArray, i, ProxyWrapper.newProxyInstance(element));
				}
				return returnArray; 
			}
			
			if (returnObj instanceof Enumeration){
				Enumeration enum = (Enumeration)returnObj;
				if (!enum.hasMoreElements()) 
					return returnObj;//empty enumeration
				
				String elementType = enum.nextElement().getClass().getName();
				if (elementType.equals("java.lang.String") || elementType.equals("java.lang.Integer"))
					return returnObj;
				
				Vector returnVec = new Vector();
				enum = (Enumeration)returnObj;
				while (enum.hasMoreElements()){
					Object element = enum.nextElement();
					returnVec.addElement(ProxyWrapper.newProxyInstance(element));
				}
				return returnVec.elements(); 
			}

			returnObj = ProxyWrapper.newProxyInstance(returnObj);
			return returnObj; 
			
		} catch (Exception e){
			e.printStackTrace();
			return null;
		}
	}
	
	private static String getInterface(String dtdClass){
		String dtdInterfaceClass = "I" + dtdClass;
		if (dtdClass.indexOf(".") != -1){
			int dotPosition = dtdClass.lastIndexOf(".");
			dtdInterfaceClass = dtdClass.substring(0, dotPosition+1) + "I" + dtdClass.substring(dotPosition+1, dtdClass.length());
		}
		return dtdInterfaceClass;
	}
	
	boolean methodsRequal(Method method1, Method method2){
		if (!method1.getName().equals(method2.getName())) return false;
		if (!method1.getReturnType().getName().equals(method2.getReturnType().getName())) return false;
		Class[] params1 = method1.getParameterTypes();
		Class[] params2 = method2.getParameterTypes();
		for (int i=0; i<params1.length; i++)
			if (!params1[i].getName().equals(params2[i].getName())) return false;
		return true;
	}
}
