import org.ofbiz.base.util.UtilHttp;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.Debug;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.base.util.StringUtil;
import org.ofbiz.content.search.SearchWorker;


import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.search.Searcher;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.TermQuery;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.index.Term;
import org.apache.lucene.search.Hits;
import org.apache.lucene.queryParser.QueryParser;
import org.ofbiz.content.widget.html.HtmlFormWrapper;

delegator = request.getAttribute("delegator");
paramMap = UtilHttp.getParameterMap(request);
queryLine = paramMap.get("queryLine");
Debug.logInfo("in search, queryLine:" + queryLine, "");

formDefFile		= page.getProperty("formDefFile");

queryFormName		= page.getProperty("queryFormName");
            Debug.logInfo("in search, queryFormName:" + queryFormName, "");
HtmlFormWrapper queryWrapper = new HtmlFormWrapper(formDefFile, queryFormName, request, response);
context.put("queryWrapper", queryWrapper);

listFormName		= page.getProperty("listFormName");
            Debug.logInfo("in search, listFormName:" + listFormName, "");
HtmlFormWrapper listWrapper = new HtmlFormWrapper(formDefFile, listFormName, request, response);
            Debug.logInfo("in search, listWrapper:" + listWrapper, "");
context.put("listWrapper", listWrapper);
siteId = paramMap.get("lcSiteId");
            Debug.logInfo("in search, siteId:" + siteId, "");

        if (UtilValidate.isNotEmpty(queryLine) || UtilValidate.isNotEmpty(siteId)) {
          try {
            indexPath = SearchWorker.getIndexPath(null);
            Searcher searcher = new IndexSearcher(indexPath);
            Analyzer analyzer = new StandardAnalyzer();

//            reader = IndexReader.open("/usr/local/agi/ofbiz/components/content/index");
//            Debug.logInfo("in search, reader:" + reader, "");
//            termEnum = reader.terms();
//            while (termEnum.next()) {
//                thisTerm = termEnum.term();
//                Debug.logInfo("in search, term:" + thisTerm.toString(), "");
//             
//            }

            combQuery = new BooleanQuery();
            Query query = null;
            if (UtilValidate.isNotEmpty(queryLine)) {
                query = QueryParser.parse(queryLine, "content", analyzer);
                combQuery.add(query, true, false);
            }
            if (UtilValidate.isNotEmpty(siteId)) {
                termQuery = new TermQuery(new Term("site", siteId));
                combQuery.add(termQuery, true, false);
                Debug.logInfo("in search, termQuery:" + termQuery.toString(), "");
            }

            Hits hits = searcher.search(combQuery);
            Debug.logInfo("in search, hits:" + hits.length(), "");
            List contentList = new ArrayList();
            HashSet hitSet = new HashSet();
            for (int start = 0; start < hits.length(); start++) {
                 doc = hits.doc(start);
                 contentId = doc.get("contentId");
                 content = delegator.findByPrimaryKeyCache("Content", UtilMisc.toMap("contentId", contentId));
                 if (!hitSet.contains(contentId)) {
                     contentList.add(content);
                     hitSet.add(contentId);
                 }
            }
            Debug.logInfo("in search, contentList:" + contentList, "");
            listWrapper.putInContext("queryResults", contentList); 
          } catch(java.io.FileNotFoundException e) {
            request.setAttribute("errorMsgReq", "No index file exists.");
          }

        } else {
            request.setAttribute("errorMsgReq", "No content ids were specified.");
        }

