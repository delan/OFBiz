/*
 * $Id: userpermprep.bsh,v 1.1 2004/06/06 07:29:02 byersa Exp $
 *
 * Copyright (c) 2001, 2002 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.content.widget.html.*;
import org.ofbiz.content.widget.form.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.content.ContentManagementWorker;

import freemarker.template.SimpleHash;
import freemarker.template.SimpleSequence;

import javax.servlet.*;
import javax.servlet.http.*;
/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Revision: 1.1 $
 * @since      2.1

 */


Debug.logInfo("in mostrecentprep(1):","");
delegator = request.getAttribute("delegator");
paramMap = UtilHttp.getParameterMap(request);
forumId = ContentManagementWorker.getFromSomewhere("permRoleSiteId", paramMap, request, context);
blogRoles = delegator.findByAndCache("RoleType", UtilMisc.toMap("parentTypeId", "BLOG"));

if (UtilValidate.isNotEmpty(forumId)) {
        siteRoleMap = new HashMap();
        for (int i=0; i < blogRoles.size; i++) {
            roleType = blogRoles.get(i);
            roleTypeId = roleType.getString("roleTypeId");
            contentRoleList = delegator.findByAnd("ContentRole", UtilMisc.toMap("contentId", forumId, "roleTypeId", roleTypeId));
            filteredRoleList = EntityUtil.filterByDate(contentRoleList);
            Debug.logInfo("in siteprep(1), filteredRoleList:" + filteredRoleList,"");
            cappedBlogRoleName = ModelUtil.dbNameToVarName(roleTypeId);
            Debug.logInfo("in siteprep(1), cappedBlogRoleName:" + cappedBlogRoleName,"");

            if (filteredRoleList.size() > 0) {
                contentRole = contentRoleList.get(0);
                partyId = contentRole.getString("partyId");
                fromDate = contentRole.get("fromDate");
                map = siteRoleMap.get(partyId);
                if (siteRoleMap.get(partyId) == null) {
                    map = new HashMap();
                    map.put("partyId", partyId);
                    siteRoleMap.put(partyId, map);
                }
                map.put( cappedBlogRoleName, "Y");
                map.put( cappedBlogRoleName + "FromDate", fromDate);
            }
        }
        siteList = new ArrayList(siteRoleMap.values());
        Debug.logInfo("in siteprep(1), siteList:" + siteList,"");
        context.put("siteList", siteList);
        context.put("rowCount", siteList.size());
        blogRoleIter = blogRoles.iterator();
        blogRoleList = new ArrayList();
        while (blogRoleIter.hasNext()) {
            roleType = blogRoleIter.next();
            blogRoleList.add(roleType.get("roleTypeId"));
        }
        context.put("blogRoleIdList", blogRoleList);
}
