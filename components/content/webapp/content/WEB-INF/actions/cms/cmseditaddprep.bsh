/*
 * $Id: cmseditaddprep.bsh,v 1.2 2004/07/10 16:24:10 byersa Exp $
 *
 * Copyright (c) 2001, 2002 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.Locale;
import java.net.URLEncoder;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.content.widget.html.*;
import org.ofbiz.content.widget.form.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.content.ContentManagementWorker;
import org.ofbiz.content.content.ContentWorker;
import org.ofbiz.content.data.DataResourceWorker;
import org.ofbiz.minilang.SimpleMapProcessor;
import org.ofbiz.content.webapp.ftl.FreeMarkerViewHandler;

import freemarker.template.SimpleHash;
import freemarker.template.SimpleSequence;

import javax.servlet.*;
import javax.servlet.http.*;
/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Revision: 1.2 $
 * @since      3.0

 */

delegator = (GenericDelegator) request.getAttribute("delegator");
userLogin = session.getAttribute("userLogin");
paramMap = UtilHttp.getParameterMap(request);
contentAssocDataResourceViewFrom = delegator.makeValue("ContentAssocDataResourceViewFrom", null);

singleWrapper = context.get("singleWrapper");
singleWrapper.putInContext("contentPurposeTypeId", page.getProperty("contentPurposeTypeId"));
singleWrapper.putInContext("targetOperation", page.getProperty("targetOperation"));
singleWrapper.putInContext("entityOperation", page.getProperty("entityOperation"));

previousParams = request.getAttribute("previousParams");
if (previousParams == null) {
    contentId = paramMap.get("contentId");
    subContentId = paramMap.get("subContentId");
    if (UtilValidate.isEmpty(contentId) && UtilValidate.isNotEmpty(subContentId)) {
        contentId = subContentId;
    }
    paramMap.put("contentId", contentId);
    
    contentAssocPK = delegator.makeValue("ContentAssoc", null);
    contentAssocPK.setAllFields(paramMap, false, null, new Boolean(true));
    contentAssoc = null;
    if (contentAssocPK.isPrimaryKey())
        contentAssoc = delegator.findByPrimaryKeyCache("ContentAssoc", contentAssocPK);
    if (contentAssoc != null)
        SimpleMapProcessor.runSimpleMapProcessor("org/ofbiz/content/ContentManagementMapProcessors.xml", "contentAssocOut", contentAssoc, contentAssocDataResourceViewFrom, new ArrayList(), Locale.getDefault());
    else
        SimpleMapProcessor.runSimpleMapProcessor("org/ofbiz/content/ContentManagementMapProcessors.xml", "contentAssocOut", contentAssocPK, contentAssocDataResourceViewFrom, new ArrayList(), Locale.getDefault());
        
    Debug.logInfo("in cmseditaddprep, contentAssocDataResourceViewFrom:" + contentAssocDataResourceViewFrom,"");
    contentIdTo = paramMap.get("contentIdTo");
    mapKey = paramMap.get("mapKey");
    contentAssocDataResourceViewFrom.put("caMapKey", mapKey);
    contentAssocTypeId = paramMap.get("contentAssocTypeId");
    
    dataResourceId = "";
    textData = "";
    if (UtilValidate.isNotEmpty(contentId)) {
        content = delegator.findByPrimaryKeyCache("Content", UtilMisc.toMap("contentId", contentId));
    
        if (content != null) {
            contentAssocDataResourceViewFrom.setAllFields(content, false, null, null);
            dataResourceId = content.getString("dataResourceId");
            if (UtilValidate.isNotEmpty(dataResourceId)) {
                dataResource = delegator.findByPrimaryKeyCache("DataResource", UtilMisc.toMap("dataResourceId", dataResourceId));
                SimpleMapProcessor.runSimpleMapProcessor("org/ofbiz/content/ContentManagementMapProcessors.xml", "dataResourceOut", dataResource, contentAssocDataResourceViewFrom, new ArrayList(), Locale.getDefault());
                templateRoot = new HashMap();
                FreeMarkerViewHandler.prepOfbizRoot(templateRoot, request, response);
                //txt = DataResourceWorker.renderDataResourceAsTextCache(delegator, dataResourceId, templateRoot, null, null, null);
                txt = DataResourceWorker.getDataResourceTextCache(dataResource, "text/html", Locale.getDefault(), templateRoot, delegator);

                if (UtilValidate.isNotEmpty(txt)) {
                    textData = UtilFormatOut.encodeXmlValue(txt);
                }
            }
        }
    } else {
        contentAssocDataResourceViewFrom.set("contentTypeId", "DOCUMENT");
    }
    Debug.logInfo("in cmseditaddprep, textData:" + textData,"");
    currentValue = new HashMap(contentAssocDataResourceViewFrom);
    currentValue.put("textData", textData);
    currentValue.put("nowTimestamp", UtilDateTime.nowTimestamp());
    //singleWrapper.putInContext("currentValue", contentAssocDataResourceViewFrom);
    singleWrapper.putInContext("currentValue", currentValue);
    request.setAttribute("previousParams", currentValue);
} else {
    singleWrapper.putInContext("currentValue", previousParams);
}

persistAction = paramMap.get("persistAction");
if (UtilValidate.isEmpty(persistAction))
    persistAction = "persistContent";
singleWrapper.putInContext("persistAction", persistAction);

