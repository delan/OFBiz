<?xml version="1.0" encoding="UTF-8" ?>
<!--
 *  Copyright (c) 2002-2004 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author <a href="mailto:jonesde@ofbiz.org">David E. Jones</a>
 * @version 1.0
 * Created on April 2, 2002
 -->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">
    <!-- InventoryItem methods -->
    <simple-method method-name="createInventoryItem" short-description="Create an InventoryItem">
        <check-permission permission="CATALOG" action="_CREATE">
            <alt-permission permission="FACILITY" action="_CREATE"/>
            <fail-message message="Security Error: to run createInventoryItem you must have the CATALOG_CREATE, CATALOG_ADMIN, FACILITY_CREATE, or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="InventoryItem"/>
        <!-- TODO: make sure availableToPromiseTotal and quantityOnHandTotal are not changed -->
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <sequenced-id-to-env sequence-name="InventoryItem" env-name="newEntity.inventoryItemId"/>
        <field-to-result field-name="newEntity.inventoryItemId" result-name="inventoryItemId"/>

        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="createInventoryItemCheckSetAtpQoh" short-description="createInventoryItemCheckSetAtpQoh" login-required="false">
        <if>
            <condition>
                <or>
                    <not><if-empty field-name="availableToPromiseTotal"/></not>
                    <not><if-empty field-name="quantityOnHandTotal"/></not>
                </or>
            </condition>
            <then>
                <log level="info" message="Got an InventoryItem with ATP/QOH Total with ID ${parameters.inventoryItemId}, creating InventoryItemDetail"/>
                <env-to-env env-name="parameters.inventoryItemId" to-env-name="createDetailMap.inventoryItemId"/>
                <env-to-env env-name="parameters.availableToPromiseTotal" to-env-name="createDetailMap.availableToPromiseDiff"/>
                <env-to-env env-name="parameters.quantityOnHandTotal" to-env-name="createDetailMap.quantityOnHandDiff"/>
                <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>
            </then>
        </if>
    </simple-method>
    
    <simple-method method-name="updateInventoryItem" short-description="Update an InventoryItem">
        <check-permission permission="CATALOG" action="_UPDATE">
            <alt-permission permission="FACILITY" action="_UPDATE"/>
            <fail-message message="Security Error: to run updateInventoryItem you must have the CATALOG_UPDATE, CATALOG_ADMIN, FACILITY_UPDATE, or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value entity-name="InventoryItem" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="createInventoryItemDetail" short-description="Create an InventoryItemDetail">
        <make-value value-name="newEntity" entity-name="InventoryItemDetail"/>

        <field-to-field field-name="inventoryItemId" map-name="parameters" to-map-name="newEntity"/>
        <make-next-seq-id seq-field-name="inventoryItemDetailSeqId" value-name="newEntity" increment-by="1" numeric-padding="4"/>
        <field-to-result field-name="newEntity.inventoryItemDetailSeqId" result-name="inventoryItemDetailSeqId"/>

        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateInventoryItemFromDetail" short-description="Update an InventoryItem From the Associated Detail Records" login-required="false">
        <entity-one entity-name="InventoryItem" value-name="inventoryItem"/>
        <entity-one entity-name="InventoryItemDetailSummary" value-name="inventoryItemDetailSummary"/>
        
        <env-to-env env-name="inventoryItemDetailSummary.availableToPromiseTotal" to-env-name="inventoryItem.availableToPromiseTotal"/>
        <env-to-env env-name="inventoryItemDetailSummary.quantityOnHandTotal" to-env-name="inventoryItem.quantityOnHandTotal"/>
        <store-value value-name="inventoryItem"/>
    </simple-method>
    <simple-method method-name="updateOldInventoryToDetailAll" short-description="Update Old Inventory To Detail All">
        <!-- find all InventoryItem records where oldQuantityOnHand or oldAvailableToPromise are not null -->
        <entity-condition entity-name="InventoryItem" list-name="inventoryItemList">
            <condition-list combine="or">
                <condition-expr field-name="oldQuantityOnHand" operator="not-equals" value=""/>
                <condition-expr field-name="oldAvailableToPromise" operator="not-equals" value=""/>
            </condition-list>
        </entity-condition>
        <iterate list-name="inventoryItemList" entry-name="inventoryItem">
            <env-to-env env-name="inventoryItem" to-env-name="callServiceMap.inventoryItem"/>
            <call-service service-name="updateOldInventoryToDetailSingle" in-map-name="callServiceMap"/>
            <clear-field field-name="callServiceMap.inventoryItem"/>
        </iterate>
    </simple-method>
    <simple-method method-name="updateOldInventoryToDetailSingle" short-description="Update Old Inventory To Detail Single">
        <!-- for each create an InventoryItemDetail representing the old QOH or ATP value, then null those fields -->
        <env-to-env env-name="parameters.inventoryItem.inventoryItemId" to-env-name="createDetailMap.inventoryItemId"/>
        <env-to-env env-name="parameters.inventoryItem.oldAvailableToPromise" to-env-name="createDetailMap.availableToPromiseDiff"/>
        <env-to-env env-name="parameters.inventoryItem.oldQuantityOnHand" to-env-name="createDetailMap.quantityOnHandDiff"/>
        <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>

        <clear-field field-name="parameters.inventoryItem.oldAvailableToPromise"/>
        <clear-field field-name="parameters.inventoryItem.oldQuantityOnHand"/>
        <store-value value-name="parameters.inventoryItem"/>
    </simple-method>

    <simple-method method-name="checkProductInventoryDiscontinuation" short-description="Check Product Inventory Discontinuation" login-required="false">
        <field-to-field field-name="productId" map-name="parameters" to-map-name="productIdMap"/>
        <find-by-primary-key entity-name="Product" map-name="productIdMap" value-name="product"/>
        <now-timestamp-to-env env-name="nowTimestamp"/>
        <!-- before checking inventory availability see if the product is already discontinued, and discontinued in the past (if in the future, still check availability and discontinue now if necessary) -->
        <if>
            <condition>
                <and>
                    <if-compare field-name="product.salesDiscWhenNotAvail" operator="equals" value="Y"/>
                    <or>
                        <if-empty field-name="product.salesDiscontinuationDate"/>
                        <if-compare-field field-name="product.salesDiscontinuationDate" operator="greater" to-field-name="nowTimestamp" type="Timestamp"/>
                    </or>
                </and>
            </condition>
            <then>
                <!-- now for the real fun, get the inventory available if is less-equal to zero discontinue product -->
                <call-service service-name="getProductInventoryAvailable" in-map-name="productIdMap">
                    <result-to-field result-name="availableToPromiseTotal"/>
                </call-service>
                <if-compare field-name="availableToPromiseTotal" operator="less-equals" value="0" type="Double">
                    <field-to-field field-name="productId" map-name="parameters" to-map-name="discontinueProductSalesMap"/>
                    <call-service service-name="discontinueProductSales" in-map-name="discontinueProductSalesMap"/>
                </if-compare>
            </then>
        </if>
    </simple-method>


    <simple-method method-name="createInventoryItemVariance" short-description="Create an InventoryItemVariance">
        <check-permission permission="CATALOG" action="_CREATE">
            <alt-permission permission="FACILITY" action="_CREATE"/>
            <fail-message message="Security Error: to run createInventoryItemVariance you must have the CATALOG_CREATE, CATALOG_ADMIN, FACILITY_CREATE, or FACILITY_ADMIN permission"/>
        </check-permission>

        <!-- add changes to availableToPromise and quantityOnHand -->
        <make-value value-name="inventoryItemLookup" entity-name="InventoryItem"/>
        <set-pk-fields map-name="parameters" value-name="inventoryItemLookup"/>
        <find-by-primary-key map-name="inventoryItemLookup" value-name="inventoryItem"/>

        <if-compare field-name="inventoryItemTypeId" map-name="inventoryItem" operator="not-equals" value="NON_SERIAL_INV_ITEM">
            <string-to-list string="Can only create an InventoryItemVariance for a Non-Serialized Inventory Item" list-name="error_list"/>
        </if-compare>
        <check-errors/>

        <!-- instead of updating InventoryItem, add an InventoryItemDetail -->
        <env-to-env env-name="parameters.inventoryItemId" to-env-name="createDetailMap.inventoryItemId"/>
        <env-to-env env-name="parameters.physicalInventoryId" to-env-name="createDetailMap.physicalInventoryId"/>
        <env-to-env env-name="parameters.availableToPromiseTotal" to-env-name="createDetailMap.availableToPromiseDiff"/>
        <env-to-env env-name="parameters.quantityOnHandTotal" to-env-name="createDetailMap.quantityOnHandDiff"/>
        <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>

        <make-value value-name="newEntity" entity-name="InventoryItemVariance"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>

        <!-- TODO: (possibly a big deal?) check to see if any reserved inventory needs to be changed because of a change in availableToPromise -->
        <!-- TODO: make sure availableToPromise is never greater than the quantityOnHand -->
    </simple-method>
    <simple-method method-name="createPhysicalInventory" short-description="Create a PhysicalInventory">
        <check-permission permission="CATALOG" action="_CREATE">
            <alt-permission permission="FACILITY" action="_CREATE"/>
            <fail-message message="Security Error: to run createPhysicalInventory you must have the CATALOG_CREATE, CATALOG_ADMIN, FACILITY_CREATE, or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="PhysicalInventory"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <if-empty field-name="newEntity.physicalInventoryDate">
            <now-timestamp-to-env env-name="newEntity.physicalInventoryDate"/>
        </if-empty>
        <if-empty field-name="newEntity.partyId">
            <field-to-field field-name="partyId" map-name="userLogin" to-map-name="newEntity"/>
        </if-empty>

        <sequenced-id-to-env sequence-name="PhysicalInventory" env-name="physicalInventoryId"/>
        <env-to-field env-name="physicalInventoryId" map-name="newEntity"/>
        <field-to-result field-name="physicalInventoryId" result-name="physicalInventoryId"/>

        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="createPhysicalInventoryAndVariance" short-description="Create a PhysicalInventory and an InventoryItemVariance">
        <set-service-fields service-name="createPhysicalInventory" map-name="parameters" to-map-name="createPhysicalInventoryMap"/>
        <call-service service-name="createPhysicalInventory" in-map-name="createPhysicalInventoryMap">
            <result-to-field result-name="physicalInventoryId" field-name="physicalInventoryId" map-name="parameters"/>
            <result-to-result result-name="physicalInventoryId" service-result-name="physicalInventoryId"/>
        </call-service>
        <set-service-fields service-name="createInventoryItemVariance" map-name="parameters" to-map-name="createInventoryItemVarianceMap"/>
        <call-service service-name="createInventoryItemVariance" in-map-name="createInventoryItemVarianceMap"/>
    </simple-method>

    <!-- ProductFacility methods -->
    <simple-method method-name="createProductFacility" short-description="Create a ProductFacility">
        <string-to-field string="createProductFacility" field-name="callingMethodName"/>
        <string-to-field string="CREATE" field-name="checkAction"/>
        <string-to-field string="FACILITY" field-name="alternatePermissionRoot"/>
        <call-simple-method method-name="checkProductRelatedPermission" xml-resource="org/ofbiz/product/product/ProductServices.xml"/>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ProductFacility"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateProductFacility" short-description="Update a ProductFacility">
        <string-to-field string="updateProductFacility" field-name="callingMethodName"/>
        <string-to-field string="UPDATE" field-name="checkAction"/>
        <string-to-field string="FACILITY" field-name="alternatePermissionRoot"/>
        <call-simple-method method-name="checkProductRelatedPermission" xml-resource="org/ofbiz/product/product/ProductServices.xml"/>
        <check-errors/>

        <make-value entity-name="ProductFacility" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteProductFacility" short-description="Delete a ProductFacility">
        <string-to-field string="deleteProductFacility" field-name="callingMethodName"/>
        <string-to-field string="DELETE" field-name="checkAction"/>
        <string-to-field string="FACILITY" field-name="alternatePermissionRoot"/>
        <call-simple-method method-name="checkProductRelatedPermission" xml-resource="org/ofbiz/product/product/ProductServices.xml"/>
        <check-errors/>

        <make-value entity-name="ProductFacility" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ProductFacilityLocation methods -->
    <simple-method method-name="createProductFacilityLocation" short-description="Create a ProductFacilityLocation">
        <string-to-field string="createProductFacilityLocation" field-name="callingMethodName"/>
        <string-to-field string="CREATE" field-name="checkAction"/>
        <string-to-field string="FACILITY" field-name="alternatePermissionRoot"/>
        <call-simple-method method-name="checkProductRelatedPermission" xml-resource="org/ofbiz/product/product/ProductServices.xml"/>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ProductFacilityLocation"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateProductFacilityLocation" short-description="Update a ProductFacilityLocation">
        <string-to-field string="updateProductFacilityLocation" field-name="callingMethodName"/>
        <string-to-field string="UPDATE" field-name="checkAction"/>
        <string-to-field string="FACILITY" field-name="alternatePermissionRoot"/>
        <call-simple-method method-name="checkProductRelatedPermission" xml-resource="org/ofbiz/product/product/ProductServices.xml"/>
        <check-errors/>

        <make-value entity-name="ProductFacilityLocation" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteProductFacilityLocation" short-description="Delete a ProductFacilityLocation">
        <string-to-field string="deleteProductFacilityLocation" field-name="callingMethodName"/>
        <string-to-field string="DELETE" field-name="checkAction"/>
        <string-to-field string="FACILITY" field-name="alternatePermissionRoot"/>
        <call-simple-method method-name="checkProductRelatedPermission" xml-resource="org/ofbiz/product/product/ProductServices.xml"/>
        <check-errors/>

        <make-value entity-name="ProductFacilityLocation" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ================================================================ -->
    <!-- Check/Reserve Inventory Services -->
    <!-- ================================================================ -->

    <simple-method method-name="getProductInventoryAvailable" short-description="Get Inventory Available for a Product" login-required="false" use-transaction="false">
        <!--
            this method can be called with some optional parameters:
                -facilityId
                -containerId
            If the service definitions are used then only one of these two will ever be specified, or neither of them.

            Whatever it is called with, it will basicly get a list of InventoryItems and total the available amount.
        -->

        <!-- this is not normally needed...
        <log level="info"><string value="Getting inventory available to promise count; parameters are: "/><field field-name="parameters"/></log>
        <log level="info" message="foo foo: "><string value="Getting inventory available to promise count; productId is: "/><field field-name="productId" map-name="parameters"/></log>
        -->

        <field-to-field field-name="productId" map-name="parameters" to-map-name="lookupFieldMap"/>
        <field-to-field field-name="facilityId" map-name="parameters" to-map-name="lookupFieldMap"/>
        <field-to-field field-name="containerId" map-name="parameters" to-map-name="lookupFieldMap"/>

        <!-- we might get away with a cache here since real serious errors will occur during the reservation service... but only if we need the speed -->
        <find-by-and entity-name="InventoryItem" map-name="lookupFieldMap" list-name="inventoryItems"/> <!-- use-cache="true" -->

        <calculate field-name="parameters.availableToPromiseTotal" type="Double"><number value="0"/></calculate>
        <calculate field-name="parameters.quantityOnHandTotal" type="Double"><number value="0"/></calculate>
        <iterate entry-name="inventoryItem" list-name="inventoryItems">
            <if-compare field-name="inventoryItem.inventoryItemTypeId" operator="equals" value="SERIALIZED_INV_ITEM">
                <calculate field-name="parameters.quantityOnHandTotal" type="Double">
                    <calcop field-name="parameters.quantityOnHandTotal" operator="add"><number value="1.0"/></calcop>
                </calculate>
                <if-compare value="INV_AVAILABLE" operator="equals" field-name="statusId" map-name="inventoryItem">
                    <calculate field-name="parameters.availableToPromiseTotal" type="Double">
                        <calcop field-name="parameters.availableToPromiseTotal" operator="add"><number value="1.0"/></calcop>
                    </calculate>
                </if-compare>
            </if-compare>
            <if-compare field-name="inventoryItem.inventoryItemTypeId" operator="equals" value="NON_SERIAL_INV_ITEM">
                <if-not-empty field-name="inventoryItem.quantityOnHandTotal">
                    <calculate field-name="parameters.quantityOnHandTotal" type="Double">
                        <calcop operator="get" field-name="parameters.quantityOnHandTotal"/>
                        <calcop operator="get" field-name="inventoryItem.quantityOnHandTotal"/>
                    </calculate>
                </if-not-empty>
                <if-not-empty field-name="inventoryItem.availableToPromiseTotal">
                    <calculate field-name="parameters.availableToPromiseTotal" type="Double">
                        <calcop operator="get" field-name="parameters.availableToPromiseTotal"/>
                        <calcop operator="get" field-name="inventoryItem.availableToPromiseTotal"/>
                    </calculate>
                </if-not-empty>
            </if-compare>
        </iterate>

        <field-to-result field-name="availableToPromiseTotal" map-name="parameters"/>
        <field-to-result field-name="quantityOnHandTotal" map-name="parameters"/>
    </simple-method>

    <simple-method method-name="getInventoryAlerts" short-description="getInventoryAlerts" login-required="false">
        <field-to-field field-name="catalogId" map-name="parameters" to-map-name="lookupFieldMap"/>
        <find-by-and entity-name="InventoryAlert" map-name="lookupFieldMap" list-name="inventoryAlerts" />
        <iterate entry-name="inventoryAlert" list-name="inventoryAlerts">
            <field-to-field map-name="inventoryAlert" field-name="productId" to-map-name="inventoryLookup" />
            <call-service service-name="getProductInventoryAvailable" in-map-name="inventoryLookup">
                <result-to-field result-name="availableToPromiseTotal" map-name="getInventoryResults" />
            </call-service>
            <if-compare-field field-name="availableToPromiseTotal" map-name="getInventoryResults" operator="less" to-map-name="inventoryAlert" to-field-name="inventoryLevel" type="Double" >
                <field-to-field map-name="inventoryAlert" field-name="productId" to-map-name="alertResult" />
                <field-to-field map-name="getInventoryResults" field-name="availableToPromiseTotal" to-map-name="alertResult" />
                <field-to-list field-name="alertResult" list-name="alertResults" />
            </if-compare-field>
        </iterate>
        <field-to-result result-name="alertResults" field-name="alertResults" />
        <field-to-request field-name="alertResults" request-name="alertResults" />
    </simple-method>

    <simple-method method-name="emailInventoryAlerts" short-description="Email Inventory Alerts" login-required="false">
        <field-to-field map-name="parameters" field-name="catalogId" to-map-name="urlParams" />
        <field-to-field field-name="urlParams" to-map-name="emailParams" to-field-name="bodyUrlParameters" />
        <string-to-field string="mail.smtp.host" field-name="sendType" map-name="emailParams" />

        <property-to-field resource="inventoryalerts" property="mailhost" field-name="sendVia" map-name="emailParams"/>
        <property-to-field resource="inventoryalerts" property="sendTo" field-name="sendTo" map-name="emailParams"/>
        <property-to-field resource="inventoryalerts" property="sendFrom" field-name="sendFrom" map-name="emailParams"/>
        <property-to-field resource="inventoryalerts" property="subject" field-name="subject" map-name="emailParams"/>
        <property-to-field resource="inventoryalerts" property="bodyUrl" field-name="bodyUrl" map-name="emailParams"/>
        <call-service service-name="getInventoryAlerts" in-map-name="parameters" >
            <result-to-field result-name="alertResults" map-name="getInventoryResults" />
        </call-service>
        <if-not-empty map-name="getInventoryResults" field-name="alertResults">
            <call-service service-name="sendMailFromUrl" in-map-name="emailParams"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="balanceInventoryItems" short-description="Balances available-to-promise on inventory items">
        <make-value entity-name="InventoryItem" value-name="lookupPKMap"/>
        <set-pk-fields value-name="lookupPKMap" map-name="parameters"/>
        <find-by-primary-key entity-name="InventoryItem" map-name="lookupPKMap" value-name="inventoryItem"/>
        <if-compare field-name="inventoryItemTypeId" map-name="inventoryItem" operator="equals" value="NON_SERIAL_INV_ITEM">
            <!-- now find all items related by product/facility -->
            <field-to-field field-name="facilityId" map-name="inventoryItem" to-map-name="lookupMap"/>
            <field-to-field field-name="productId" map-name="inventoryItem" to-map-name="lookupMap"/>
            <string-to-field field-name="inventoryItemTypeId" map-name="lookupMap" string="NON_SERIAL_INV_ITEM"/>
            <find-by-and entity-name="InventoryItem" map-name="lookupMap" list-name="inventoryItems"/>

            <!-- find all items which have a negative ATP; find their current reservations -->
            <iterate list-name="inventoryItems" entry-name="item">
                <if>
                    <condition>
                        <or>
                            <if-empty field-name="availableToPromiseTotal"/>
                            <if-compare field-name="availableToPromiseTotal" map-name="item" operator="less" value="0" type="Double"/>
                        </or>
                    </condition>
                    <then>
                        <get-related value-name="item" relation-name="OrderItemShipGrpInvRes" list-name="relatedRes"/>
                        <list-to-list list-name="relatedRes" to-list-name="reservations"/>
                    </then>
                </if>
            </iterate>

            <!-- sort the list by date -->
            <order-value-list list-name="reservations" order-by-list-name="reservedDatetime"/>

            <iterate list-name="reservations" entry-name="oisgir">
                <!-- cancel the reservation -->
                <field-to-field field-name="orderId" map-name="oisgir" to-map-name="cancelOisgirMap"/>
                <field-to-field field-name="orderItemSeqId" map-name="oisgir" to-map-name="cancelOisgirMap"/>
                <field-to-field field-name="inventoryItemId" map-name="oisgir" to-map-name="cancelOisgirMap"/>
                <field-to-field field-name="shipGroupSeqId" map-name="oisgir" to-map-name="cancelOisgirMap"/>
                <call-service service-name="cancelOrderItemShipGrpInvRes" in-map-name="cancelOisgirMap"/>
                <clear-field field-name="cancelOisgirMap"/>

                <!-- re-reserve the cancelled item -->
                <!-- require inventory is N because it had to be N to begin with to have a negative ATP -->
                <field-to-field field-name="productId" map-name="inventoryItem" to-map-name="resMap"/>
                <field-to-field field-name="orderId" map-name="oisgir" to-map-name="resMap"/>
                <field-to-field field-name="orderItemSeqId" map-name="oisgir" to-map-name="resMap"/>
                <field-to-field field-name="quantity" map-name="oisgir" to-map-name="resMap"/>
                <field-to-field field-name="reservedDatetime" map-name="oisgir" to-map-name="resMap"/>
                <field-to-field field-name="reserveOrderEnumId" map-name="oisgir" to-map-name="resMap"/>
                <string-to-field field-name="requireInventory" map-name="resMap" string="N"/>
                <field-to-field field-name="shipGroupSeqId" map-name="oisgir" to-map-name="resMap"/>
                <call-service service-name="reserveProductInventory" in-map-name="resMap"/>
                <clear-field field-name="resMap"/>
            </iterate>
        </if-compare>
    </simple-method>

    <!-- Inventory Transfer Services -->
    <simple-method method-name="createInventoryTransfer" short-description="Create an Inventory Transfer">
        <check-permission permission="FACILITY" action="_CREATE"><fail-message message="Security Error: to run createInventoryTransfer you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/></check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="InventoryTransfer"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <sequenced-id-to-env sequence-name="InventoryTransfer" env-name="newEntity.inventoryTransferId"/>
        <field-to-result field-name="newEntity.inventoryTransferId" result-name="inventoryTransferId"/>

        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateInventoryTransfer" short-description="Update an Inventory Transfer">
        <check-permission permission="FACILITY" action="_UPDATE"><fail-message message="Security Error: to run updateInventoryTransfer you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/></check-permission>
        <check-errors/>

        <field-to-field field-name="inventoryTransferId" map-name="parameters" to-map-name="lookupPKMap"/>
        <find-by-primary-key entity-name="InventoryTransfer" map-name="lookupPKMap" value-name="inventoryTransfer"/>
        <set-nonpk-fields map-name="parameters" value-name="inventoryTransfer"/>
        <store-value value-name="inventoryTransfer"/>
    </simple-method>
</simple-methods>

