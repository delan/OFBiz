<?xml version="1.0" encoding="UTF-8" ?>
<!--
 *  Copyright (c) 2003-2004 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author     David E. Jones (jonesde@ofbiz.org)
 * @author     Andy Zeneski (jaz@ofbiz.org)
 * @version    $Rev$
 * @since      2.2
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">
    <!-- Shipment services -->
    <simple-method method-name="createShipment" short-description="Create Shipment">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipment you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="Shipment"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <sequenced-id-to-env sequence-name="Shipment" env-name="sequencedId"/>
        <env-to-field env-name="sequencedId" field-name="shipmentId" map-name="newEntity"/>
        <field-to-result field-name="sequencedId" result-name="shipmentId"/>

        <!-- set the created and lastModified info -->
        <now-timestamp-to-env env-name="newEntity.createdDate"/>
        <field-to-field field-name="userLoginId" map-name="userLogin" to-field-name="createdByUserLogin" to-map-name="newEntity"/>
        <now-timestamp-to-env env-name="newEntity.lastModifiedDate"/>
        <field-to-field field-name="userLoginId" map-name="userLogin" to-field-name="lastModifiedByUserLogin" to-map-name="newEntity"/>

        <!-- if needed create some WorkEfforts and remember their IDs:
            estimatedShipDate: estimatedShipWorkEffId
            estimatedArrivalDate: estimatedArrivalWorkEffId
        -->
        <!-- always create the WorkEfforts, even if dates aren't specified yet; when they are they will be set in the update service... -->

        <!-- the Ship WorkEffort entity -->
        <string-to-field string="Shipment #${sequencedId} Ship" field-name="workEffortName" map-name="shipWorkEffortMap"/>
        <string-to-field string="EVENT" field-name="workEffortTypeId" map-name="shipWorkEffortMap"/>
        <string-to-field string="CAL_TENTATIVE" field-name="currentStatusId" map-name="shipWorkEffortMap"/>
        <field-to-field map-name="parameters" field-name="estimatedShipDate" to-field-name="estimatedStartDate" to-map-name="shipWorkEffortMap"/>
        <field-to-field map-name="parameters" field-name="estimatedShipDate" to-field-name="estimatedCompletionDate" to-map-name="shipWorkEffortMap"/>
        <field-to-field map-name="parameters" field-name="originFacilityId" to-field-name="facilityId" to-map-name="shipWorkEffortMap"/>
        <env-to-field env-name="userLogin.partyId" field-name="quickAssignPartyId" map-name="shipWorkEffortMap"/>
        <call-service service-name="createWorkEffort" in-map-name="shipWorkEffortMap">
            <result-to-field result-name="workEffortId" map-name="newEntity" field-name="estimatedShipWorkEffId"/>
        </call-service>
        <if-not-empty field-name="partyIdFrom" map-name="newEntity">
            <field-to-field field-name="estimatedShipWorkEffId" map-name="newEntity" to-field-name="workEffortId" to-map-name="assignPartyToWorkEffortShip"/>
            <field-to-field field-name="partyIdFrom" map-name="newEntity" to-field-name="partyId" to-map-name="assignPartyToWorkEffortShip"/>
            <string-to-field string="CAL_ATTENDEE" field-name="roleTypeId" map-name="assignPartyToWorkEffortShip"/>
            <string-to-field string="CAL_SENT" field-name="statusId" map-name="assignPartyToWorkEffortShip"/>
            <call-service service-name="assignPartyToWorkEffort" in-map-name="assignPartyToWorkEffortShip"/>
        </if-not-empty>

        <!-- the Arrival WorkEffort entity -->
        <string-to-field string="Shipment #${sequencedId} Arrival" field-name="workEffortName" map-name="arrivalWorkEffortMap"/>
        <string-to-field string="EVENT" field-name="workEffortTypeId" map-name="arrivalWorkEffortMap"/>
        <string-to-field string="CAL_TENTATIVE" field-name="currentStatusId" map-name="arrivalWorkEffortMap"/>
        <field-to-field map-name="parameters" field-name="estimatedArrivalDate" to-field-name="estimatedStartDate" to-map-name="arrivalWorkEffortMap"/>
        <field-to-field map-name="parameters" field-name="estimatedArrivalDate" to-field-name="estimatedCompletionDate" to-map-name="arrivalWorkEffortMap"/>
        <field-to-field map-name="parameters" field-name="destinationFacilityId" to-field-name="facilityId" to-map-name="arrivalWorkEffortMap"/>
        <env-to-field env-name="userLogin.partyId" field-name="quickAssignPartyId" map-name="arrivalWorkEffortMap"/>
        <call-service service-name="createWorkEffort" in-map-name="arrivalWorkEffortMap">
            <result-to-field result-name="workEffortId" map-name="newEntity" field-name="estimatedArrivalWorkEffId"/>
        </call-service>
        <if-not-empty field-name="partyIdTo" map-name="newEntity">
            <field-to-field field-name="estimatedArrivalWorkEffId" map-name="newEntity" to-field-name="workEffortId" to-map-name="assignPartyToWorkEffortArrival"/>
            <field-to-field field-name="partyIdTo" map-name="newEntity" to-field-name="partyId" to-map-name="assignPartyToWorkEffortArrival"/>
            <string-to-field string="CAL_ATTENDEE" field-name="roleTypeId" map-name="assignPartyToWorkEffortArrival"/>
            <string-to-field string="CAL_SENT" field-name="statusId" map-name="assignPartyToWorkEffortArrival"/>
            <call-service service-name="assignPartyToWorkEffort" in-map-name="assignPartyToWorkEffortArrival"/>
        </if-not-empty>

        <create-value value-name="newEntity"/>

        <!-- get the ShipmentStatus history started -->
        <if-not-empty field-name="statusId" map-name="newEntity">
            <make-value entity-name="ShipmentStatus" value-name="newStatusValue"/>
            <field-to-field field-name="statusId" map-name="newEntity" to-map-name="newStatusValue"/>
            <field-to-field field-name="shipmentId" map-name="newEntity" to-map-name="newStatusValue"/>
            <now-timestamp-to-env env-name="newStatusValue.statusDate"/>
            <create-value value-name="newStatusValue"/>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="updateShipment" short-description="Update Shipment">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipment you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Update Shipment" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusDelivered"/>

        <make-value value-name="lookupPKMap" entity-name="Shipment"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="Shipment" map-name="lookupPKMap" value-name="lookedUpValue"/>

        <if-not-empty field-name="parameters.statusId">
            <if-compare-field field-name="parameters.statusId" operator="not-equals" to-field-name="lookedUpValue.statusId">
                <!-- make sure a StatusValidChange record exists, if not return error -->
                <env-to-field env-name="lookedUpValue.statusId" field-name="statusId" map-name="checkStatusValidChangeMap"/>
                <env-to-field env-name="parameters.statusId" field-name="statusIdTo" map-name="checkStatusValidChangeMap"/>
                <find-by-primary-key entity-name="StatusValidChange" map-name="checkStatusValidChangeMap" value-name="checkStatusValidChange"/>
                <if-empty field-name="checkStatusValidChange">
                    <string-to-list string="ERROR: Changing the status from ${lookedUpValue.statusId} to ${parameters.statusId} is not allowed." list-name="error_list"/>
                </if-empty>

                <make-value entity-name="ShipmentStatus" value-name="newStatusValue"/>
                <field-to-field field-name="statusId" map-name="parameters" to-map-name="newStatusValue"/>
                <field-to-field field-name="shipmentId" map-name="parameters" to-map-name="newStatusValue"/>
                <now-timestamp-to-env env-name="newStatusValue.statusDate"/>
                <create-value value-name="newStatusValue"/>
            </if-compare-field>
        </if-not-empty>

        <!-- now finally check for errors -->
        <check-errors/>

        <!-- Check the pickup and delivery dates for changes and update the corresponding WorkEfforts -->
        <if>
            <condition>
                <or>
                    <and>
                        <not><if-empty field-name="parameters.estimatedShipDate"/></not>
                        <if-compare-field field-name="parameters.estimatedShipDate" operator="not-equals" to-field-name="lookedUpValue.estimatedShipDate"/>
                    </and>
                    <and>
                        <not><if-empty field-name="originFacilityId" map-name="parameters"/></not>
                        <if-compare-field field-name="parameters.originFacilityId" operator="not-equals" to-field-name="lookedUpValue.originFacilityId"/>
                    </and>
                </or>
            </condition>
            <then>
                <entity-one entity-name="WorkEffort" value-name="estShipWe" auto-field-map="false">
                    <field-map field-name="workEffortId" env-name="lookedUpValue.estimatedShipWorkEffId"/>
                </entity-one>
                <env-to-env env-name="parameters.estimatedShipDate" to-env-name="estShipWe.estimatedStartDate"/>
                <env-to-env env-name="parameters.estimatedShipDate" to-env-name="estShipWe.estimatedCompletionDate"/>
                <env-to-env env-name="parameters.originFacilityId" to-env-name="estShipWe.facilityId"/>
                <set-service-fields service-name="updateWorkEffort" map-name="estShipWe" to-map-name="estShipWeUpdMap"/>
                <call-service service-name="updateWorkEffort" in-map-name="estShipWeUpdMap"/>
            </then>
        </if>
        <if>
            <condition>
                <or>
                    <and>
                        <not><if-empty field-name="estimatedArrivalDate" map-name="parameters"/></not>
                        <if-compare-field field-name="parameters.estimatedArrivalDate" operator="not-equals" to-field-name="lookedUpValue.estimatedArrivalDate"/>
                    </and>
                    <and>
                        <not><if-empty field-name="destinationFacilityId" map-name="parameters"/></not>
                        <if-compare-field field-name="parameters.destinationFacilityId" operator="not-equals" to-field-name="lookedUpValue.destinationFacilityId"/>
                    </and>
                </or>
            </condition>
            <then>
                <field-to-field field-name="estimatedArrivalWorkEffId" map-name="lookedUpValue" to-field-name="workEffortId" to-map-name="estimatedArrivalWorkEffortMap"/>
                <find-by-primary-key entity-name="WorkEffort" map-name="estimatedArrivalWorkEffortMap" value-name="estimatedArrivalWorkEffort"/>
                <field-to-field map-name="parameters" field-name="estimatedArrivalDate" to-field-name="estimatedStartDate" to-map-name="estimatedArrivalWorkEffort"/>
                <field-to-field map-name="parameters" field-name="estimatedArrivalDate" to-field-name="estimatedCompletionDate" to-map-name="estimatedArrivalWorkEffort"/>
                <field-to-field map-name="parameters" field-name="destinationFacilityId" to-field-name="facilityId" to-map-name="estimatedArrivalWorkEffort"/>
                <set-service-fields service-name="updateWorkEffort" map-name="estimatedArrivalWorkEffort" to-map-name="estimatedArrivalWorkEffortUpdMap"/>
                <call-service service-name="updateWorkEffort" in-map-name="estimatedArrivalWorkEffortUpdMap"/>
            </then>
        </if>

        <!-- if the partyIdTo or partyIdFrom has changed, add WEPAs -->
        <if>
            <condition>
                <and>
                    <not><if-empty field-name="parameters.partyIdFrom"/></not>
                    <if-compare-field field-name="parameters.partyIdFrom" operator="not-equals" to-field-name="lookedUpValue.partyIdFrom"/>
                </and>
            </condition>
            <then>
                <field-to-field field-name="estimatedShipWorkEffId" map-name="lookedUpValue" to-field-name="workEffortId" to-map-name="assignPartyToWorkEffortShip"/>
                <field-to-field field-name="partyIdFrom" map-name="parameters" to-field-name="partyId" to-map-name="assignPartyToWorkEffortShip"/>
                <find-by-and entity-name="WorkEffortPartyAssignment" list-name="existingShipWepas" map-name="assignPartyToWorkEffortShip"/>
                <filter-list-by-date list-name="existingShipWepas"/>
                <if-empty field-name="existingShipWepas">
                    <string-to-field string="CAL_ATTENDEE" field-name="roleTypeId" map-name="assignPartyToWorkEffortShip"/>
                    <string-to-field string="CAL_SENT" field-name="statusId" map-name="assignPartyToWorkEffortShip"/>
                    <call-service service-name="assignPartyToWorkEffort" in-map-name="assignPartyToWorkEffortShip"/>
                </if-empty>
            </then>
        </if>
        <if>
            <condition>
                <and>
                    <not><if-empty field-name="parameters.partyIdTo"/></not>
                    <if-compare-field field-name="parameters.partyIdTo" operator="not-equals" to-field-name="lookedUpValue.partyIdTo"/>
                </and>
            </condition>
            <then>
                <field-to-field field-name="estimatedArrivalWorkEffId" map-name="lookedUpValue" to-field-name="workEffortId" to-map-name="assignPartyToWorkEffortArrival"/>
                <field-to-field field-name="partyIdTo" map-name="parameters" to-field-name="partyId" to-map-name="assignPartyToWorkEffortArrival"/>
                <find-by-and entity-name="WorkEffortPartyAssignment" list-name="existingArrivalWepas" map-name="assignPartyToWorkEffortArrival"/>
                <filter-list-by-date list-name="existingArrivalWepas"/>
                <if-empty field-name="existingArrivalWepas">
                    <string-to-field string="CAL_ATTENDEE" field-name="roleTypeId" map-name="assignPartyToWorkEffortArrival"/>
                    <string-to-field string="CAL_SENT" field-name="statusId" map-name="assignPartyToWorkEffortArrival"/>
                    <call-service service-name="assignPartyToWorkEffort" in-map-name="assignPartyToWorkEffortArrival"/>
                </if-empty>
            </then>
        </if>

        <!-- finally before setting nonpk fields, set the oldStatusId, oldPrimaryOrderId, oldOriginFacilityId, oldDestinationFacilityId -->
        <field-to-result field-name="statusId" map-name="lookedUpValue" result-name="oldStatusId"/>
        <field-to-result field-name="primaryOrderId" map-name="lookedUpValue" result-name="oldPrimaryOrderId"/>
        <field-to-result field-name="originFacilityId" map-name="lookedUpValue" result-name="oldOriginFacilityId"/>
        <field-to-result field-name="destinationFacilityId" map-name="lookedUpValue" result-name="oldDestinationFacilityId"/>

        <!-- now that all changes have been checked, set the nonpks -->
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <now-timestamp-to-env env-name="lookedUpValue.lastModifiedDate"/>
        <field-to-field field-name="userLoginId" map-name="userLogin" to-field-name="lastModifiedByUserLogin" to-map-name="lookedUpValue"/>

        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteShipment" short-description="Delete Shipment">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipment you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete Shipment" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="Shipment"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="Shipment" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="setShipmentSettingsFromPrimaryOrder" short-description="Set Shipment Settings From Primary Order">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run setShipmentSettingsFromPrimaryOrder you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run setShipmentSettingsFromPrimaryOrder you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Set Shipment Settings From Primary Order" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <!-- on Shipment set partyIdFrom, partyIdTo (vendorPartyId), originContactMechId, destinationContactMechId, estimatedShipCost -->
        <field-to-field field-name="shipmentId" map-name="parameters" to-map-name="lookupShipmentPKMap"/>
        <find-by-primary-key entity-name="Shipment" map-name="lookupShipmentPKMap" value-name="shipment"/>

        <if-empty field-name="shipment.primaryOrderId">
            <!-- No primaryOrderId specified, don't do anything -->
            <log level="info" message="Not running setShipmentSettingsFromPrimaryOrder, primaryOrderId is empty for shipmentId [${shipment.shipmentId}]"/>
            <return response-code="success"/>
        </if-empty>

        <!-- TODO: we may not want to check this if, for example, Purchase Orders don't have any OrderItemShipGroups -->
        <if-empty field-name="shipment.primaryShipGroupSeqId">
            <!-- No primaryShipGroupSeqId specified, don't do anything -->
            <log level="info" message="Not running setShipmentSettingsFromPrimaryOrder, primaryShipGroupSeqId is empty for shipmentId [${parameters.shipmentId}]"/>
            <return response-code="success"/>
        </if-empty>

        <entity-one entity-name="OrderHeader" value-name="orderHeader">
            <field-map field-name="orderId" env-name="shipment.primaryOrderId"/>
        </entity-one>
        <if-not-empty field-name="shipment.primaryShipGroupSeqId">
            <entity-one entity-name="OrderItemShipGroup" value-name="orderItemShipGroup">
                <field-map field-name="orderId" env-name="shipment.primaryOrderId"/>
                <field-map field-name="shipGroupSeqId" env-name="shipment.primaryShipGroupSeqId"/>
            </entity-one>
        </if-not-empty>

        <if-compare field-name="orderHeader.orderTypeId" operator="equals" value="SALES_ORDER">
            <string-to-field string="SALES_SHIPMENT" field-name="shipmentTypeId" map-name="shipment"/>
        </if-compare>
        <if-compare field-name="orderHeader.orderTypeId" operator="equals" value="PURCHASE_ORDER">
            <string-to-field string="PURCHASE_SHIPMENT" field-name="shipmentTypeId" map-name="shipment"/>
        </if-compare>

        <!-- set the facility if we are from a store with a single facility -->
        <if-empty field-name="originFacilityId" map-name="shipment">
            <if-compare field-name="shipmentTypeId" map-name="shipment" operator="equals" value="SALES_SHIPMENT">
                <if-not-empty field-name="productStoreId" map-name="orderHeader">
                    <field-to-field field-name="productStoreId" map-name="orderHeader" to-map-name="storeLookup"/>
                    <find-by-primary-key entity-name="ProductStore" map-name="storeLookup" value-name="productStore"/>
                    <if-compare field-name="oneInventoryFacility" map-name="productStore" operator="equals" value="Y">
                           <field-to-field field-name="inventoryFacilityId" map-name="productStore" to-field-name="originFacilityId" to-map-name="shipment"/>
                    </if-compare>
                </if-not-empty>
            </if-compare>
        </if-empty>

        <!-- partyIdFrom, partyIdTo (vendorPartyId) - NOTE: these work the same for Purchase and Sales Orders... -->
        <field-to-field field-name="primaryOrderId" map-name="shipment" to-field-name="orderId" to-map-name="lookupOrderHeaderPKMap"/>
        <find-by-and entity-name="OrderRole" map-name="lookupOrderHeaderPKMap" list-name="orderRoles"/>

        <!-- From: SHIP_FROM_VENDOR -->
        <if-empty field-name="partyIdFrom" map-name="shipment">
            <string-to-field string="SHIP_FROM_VENDOR" field-name="roleTypeId" map-name="limitRoleMap"/>
            <filter-list-by-and list-name="orderRoles" map-name="limitRoleMap" to-list-name="limitOrderRoles"/>
            <first-from-list entry-name="limitOrderRole" list-name="limitOrderRoles"/>
            <if-not-empty field-name="limitOrderRole">
                <field-to-field field-name="partyId" map-name="limitOrderRole" to-field-name="partyIdFrom" to-map-name="shipment"/>
            </if-not-empty>
            <clear-field field-name="limitRoleMap"/><clear-field field-name="limitOrderRoles"/><clear-field field-name="limitOrderRole"/>
        </if-empty>
        <!-- From: VENDOR -->
        <if-empty field-name="partyIdFrom" map-name="shipment">
            <string-to-field string="VENDOR" field-name="roleTypeId" map-name="limitRoleMap"/>
            <filter-list-by-and list-name="orderRoles" map-name="limitRoleMap" to-list-name="limitOrderRoles"/>
            <first-from-list entry-name="limitOrderRole" list-name="limitOrderRoles"/>
            <if-not-empty field-name="limitOrderRole">
                <field-to-field field-name="partyId" map-name="limitOrderRole" to-field-name="partyIdFrom" to-map-name="shipment"/>
            </if-not-empty>
            <clear-field field-name="limitRoleMap"/><clear-field field-name="limitOrderRoles"/><clear-field field-name="limitOrderRole"/>
        </if-empty>

        <!-- To: SHIP_TO_CUSTOMER -->
        <if-empty field-name="partyIdTo" map-name="shipment">
            <string-to-field string="SHIP_TO_CUSTOMER" field-name="roleTypeId" map-name="limitRoleMap"/>
            <filter-list-by-and list-name="orderRoles" map-name="limitRoleMap" to-list-name="limitOrderRoles"/>
            <first-from-list entry-name="limitOrderRole" list-name="limitOrderRoles"/>
            <if-not-empty field-name="limitOrderRole">
                <field-to-field field-name="partyId" map-name="limitOrderRole" to-field-name="partyIdTo" to-map-name="shipment"/>
            </if-not-empty>
            <clear-field field-name="limitRoleMap"/><clear-field field-name="limitOrderRoles"/><clear-field field-name="limitOrderRole"/>
        </if-empty>
        <!-- To: CUSTOMER -->
        <if-empty field-name="partyIdTo" map-name="shipment">
            <string-to-field string="CUSTOMER" field-name="roleTypeId" map-name="limitRoleMap"/>
            <filter-list-by-and list-name="orderRoles" map-name="limitRoleMap" to-list-name="limitOrderRoles"/>
            <first-from-list entry-name="limitOrderRole" list-name="limitOrderRoles"/>
            <if-not-empty field-name="limitOrderRole">
                <field-to-field field-name="partyId" map-name="limitOrderRole" to-field-name="partyIdTo" to-map-name="shipment"/>
            </if-not-empty>
            <clear-field field-name="limitRoleMap"/><clear-field field-name="limitOrderRoles"/><clear-field field-name="limitOrderRole"/>
        </if-empty>

        <find-by-and entity-name="OrderContactMech" map-name="lookupOrderHeaderPKMap" list-name="orderContactMechs"/>
        <!-- destinationContactMechId -->
        <if-empty field-name="shipment.destinationContactMechId">
            <!-- first try from orderContactMechs -->
            <string-to-field string="SHIPPING_LOCATION" field-name="contactMechPurposeTypeId" map-name="destinationContactMap"/>
            <filter-list-by-and list-name="orderContactMechs" map-name="destinationContactMap" to-list-name="destinationOrderContactMechs"/>
            <first-from-list entry-name="destinationOrderContactMech" list-name="destinationOrderContactMechs"/>
            <if-not-empty field-name="destinationOrderContactMech">
                <env-to-env env-name="destinationOrderContactMech.contactMechId" to-env-name="shipment.destinationContactMechId"/>
            </if-not-empty>
        </if-empty>
        <!-- originContactMechId -->
        <if-empty field-name="shipment.originContactMechId">
            <string-to-field string="SHIP_ORIG_LOCATION" field-name="contactMechPurposeTypeId" map-name="originContactMap"/>
            <filter-list-by-and list-name="orderContactMechs" map-name="originContactMap" to-list-name="originOrderContactMechs"/>
            <first-from-list entry-name="originOrderContactMech" list-name="originOrderContactMechs"/>
            <if-not-empty field-name="originOrderContactMech">
                <env-to-env env-name="originOrderContactMech.contactMechId" to-env-name="shipment.originContactMechId"/>
            </if-not-empty>
        </if-empty>

        <!-- destinationTelecomNumberId -->
        <if-empty field-name="shipment.destinationTelecomNumberId">
            <string-to-field string="PHONE_SHIPPING" field-name="contactMechPurposeTypeId" map-name="destTelecomOrderContactMechMap"/>
            <filter-list-by-and list-name="orderContactMechs" map-name="destTelecomOrderContactMechMap" to-list-name="destTelecomOrderContactMechs"/>
            <first-from-list entry-name="destTelecomOrderContactMech" list-name="destTelecomOrderContactMechs"/>
            <if-not-empty field-name="destTelecomOrderContactMech">
                <field-to-field field-name="contactMechId" map-name="destTelecomOrderContactMech" to-field-name="destinationTelecomNumberId" to-map-name="shipment"/>
            </if-not-empty>
        </if-empty>
        <!-- originTelecomNumberId -->
        <if-empty field-name="shipment.originTelecomNumberId">
            <string-to-field string="PHONE_SHIP_ORIG" field-name="contactMechPurposeTypeId" map-name="originTelecomOrderContactMechMap"/>
            <filter-list-by-and list-name="orderContactMechs" map-name="originTelecomOrderContactMechMap" to-list-name="originTelecomOrderContactMechs"/>
            <first-from-list entry-name="originTelecomOrderContactMech" list-name="originTelecomOrderContactMechs"/>
            <if-not-empty field-name="originTelecomOrderContactMech">
                <field-to-field field-name="contactMechId" map-name="originTelecomOrderContactMech" to-field-name="originTelecomNumberId" to-map-name="shipment"/>
            </if-not-empty>
        </if-empty>

        <!-- NOTE: use new place to find source/destination location/addresses for new OrderItemShipGroup.contactMechId (destination address for sales orders, source address for purchase orders) -->
        <!-- do this second so it will override the orderContactMech -->
        <!-- TODO: maybe we should add a new entity for OrderItemShipGroup ContactMechs? -->
        <if-not-empty field-name="orderItemShipGroup">
            <if-compare field-name="orderHeader.orderTypeId" operator="equals" value="SALES_ORDER">
                <if-empty field-name="shipment.destinationContactMechId">
                    <env-to-env env-name="orderItemShipGroup.contactMechId" to-env-name="shipment.destinationContactMechId"/>
                </if-empty>
                <if-empty field-name="shipment.destinationTelecomNumberId">
                    <env-to-env env-name="orderItemShipGroup.telecomContactMechId" to-env-name="shipment.destinationTelecomNumberId"/>
                </if-empty>
            </if-compare>
            <if-compare field-name="orderHeader.orderTypeId" operator="equals" value="PURCHASE_ORDER">
                <if-empty field-name="shipment.originContactMechId">
                    <env-to-env env-name="orderItemShipGroup.contactMechId" to-env-name="shipment.originContactMechId"/>
                </if-empty>
                <if-empty field-name="shipment.originTelecomNumberId">
                    <env-to-env env-name="orderItemShipGroup.telecomContactMechId" to-env-name="shipment.originTelecomNumberId"/>
                </if-empty>
            </if-compare>
        </if-not-empty>

        <if-empty field-name="estimatedShipCost" map-name="shipment">
            <call-bsh><![CDATA[
                    import org.ofbiz.order.order.OrderReadHelper;

                    orderReadHelper = new OrderReadHelper(orderHeader);
                    orderItems = orderReadHelper.getValidOrderItems();
                    orderAdjustments = orderReadHelper.getAdjustments();
                    orderHeaderAdjustments = orderReadHelper.getOrderHeaderAdjustments();
                    orderSubTotal = orderReadHelper.getOrderItemsSubTotal();

                    shippingAmount = OrderReadHelper.getAllOrderItemsAdjustmentsTotal(orderItems, orderAdjustments, false, false, true);
                    shippingAmount += OrderReadHelper.calcOrderAdjustments(orderHeaderAdjustments, orderSubTotal, false, false, true);
                    //org.ofbiz.base.util.Debug.log("shippingAmmount=" + shippingAmount);
                    shipment.put("estimatedShipCost", shippingAmount);
            ]]></call-bsh>
        </if-empty>

        <!-- create a ShipmentRouteSegment with originFacilityId (if set on Shipment), destContactMechId,
            and from OrderItemShipGroup shipmentMethodTypeId, carrierPartyId, etc -->
        <field-to-field field-name="shipmentId" map-name="shipment" to-map-name="shipmentRouteSegmentMap"/>
        <find-by-and entity-name="ShipmentRouteSegment" map-name="shipmentRouteSegmentMap" list-name="shipmentRouteSegments"/>
        <if-empty field-name="shipmentRouteSegments">
            <!-- estimatedShipDate, estimatedArrivalDate -->
            <field-to-field field-name="estimatedShipDate" map-name="shipment" to-field-name="estimatedStartDate" to-map-name="shipmentRouteSegmentMap"/>
            <field-to-field field-name="estimatedArrivalDate" map-name="shipment" to-field-name="estimatedArrivalDate" to-map-name="shipmentRouteSegmentMap"/>

            <field-to-field field-name="originFacilityId" map-name="shipment" to-map-name="shipmentRouteSegmentMap"/>
            <field-to-field field-name="originContactMechId" map-name="shipment" to-map-name="shipmentRouteSegmentMap"/>
            <field-to-field field-name="originTelecomNumberId" map-name="shipment" to-map-name="shipmentRouteSegmentMap"/>
            <field-to-field field-name="destinationFacilityId" map-name="shipment" to-field-name="destFacilityId" to-map-name="shipmentRouteSegmentMap"/>
            <field-to-field field-name="destinationContactMechId" map-name="shipment" to-field-name="destContactMechId" to-map-name="shipmentRouteSegmentMap"/>
            <field-to-field field-name="destinationTelecomNumberId" map-name="shipment" to-field-name="destTelecomNumberId" to-map-name="shipmentRouteSegmentMap"/>

            <entity-one entity-name="OrderItemShipGroup" value-name="orderItemShipGroup">
                <field-map field-name="orderId" env-name="shipment.primaryOrderId"/>
                <field-map field-name="shipGroupSeqId" env-name="shipment.primaryShipGroupSeqId"/>
            </entity-one>
            <if-not-empty field-name="orderItemShipGroup">
                <field-to-field field-name="carrierPartyId" map-name="orderItemShipGroup" to-map-name="shipmentRouteSegmentMap"/>
                <field-to-field field-name="shipmentMethodTypeId" map-name="orderItemShipGroup" to-map-name="shipmentRouteSegmentMap"/>
            </if-not-empty>
            <call-service service-name="createShipmentRouteSegment" in-map-name="shipmentRouteSegmentMap"/>
        </if-empty>

        <set-service-fields service-name="updateShipment" map-name="shipment" to-map-name="shipmentUpdateMap"/>
        <call-service service-name="updateShipment" in-map-name="shipmentUpdateMap"/>
    </simple-method>
    <simple-method method-name="setShipmentSettingsFromFacilities" short-description="Set Shipment Settings From Facilities">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run setShipmentSettingsFromFacilities you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run setShipmentSettingsFromFacilities you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Set Shipment Settings From Facilities" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <field-to-field field-name="shipmentId" map-name="parameters" to-map-name="lookupShipmentPKMap"/>
        <find-by-primary-key entity-name="Shipment" map-name="lookupShipmentPKMap" value-name="shipment"/>

        <clone-value value-name="shipment" new-value-name="shipmentCopy"/>

        <string-to-list string="-fromDate" list-name="descendingFromDateOrder"/>
        <if-not-empty field-name="originFacilityId" map-name="shipment">
            <if-empty field-name="originContactMechId" map-name="shipment">
                <field-to-field field-name="originFacilityId" map-name="shipment" to-field-name="facilityId" to-map-name="findFcmpMap"/>
                <string-to-field string="SHIP_ORIG_LOCATION" field-name="contactMechPurposeTypeId" map-name="findFcmpMap"/>
                <find-by-and entity-name="FacilityContactMechPurpose" map-name="findFcmpMap" order-by-list-name="descendingFromDateOrder" list-name="facilityContactMechPurposes"/>
                <filter-list-by-date list-name="facilityContactMechPurposes"/>
                <first-from-list entry-name="facilityContactMechPurpose" list-name="facilityContactMechPurposes"/>
                <field-to-field field-name="contactMechId" map-name="facilityContactMechPurpose" to-field-name="originContactMechId" to-map-name="shipment"/>
            </if-empty>
            <if-empty field-name="originTelecomNumberId" map-name="shipment">
                <field-to-field field-name="originFacilityId" map-name="shipment" to-field-name="facilityId" to-map-name="findFcmpMap"/>
                <string-to-field string="PHONE_SHIP_ORIG" field-name="contactMechPurposeTypeId" map-name="findFcmpMap"/>
                <find-by-and entity-name="FacilityContactMechPurpose" map-name="findFcmpMap" order-by-list-name="descendingFromDateOrder" list-name="facilityContactMechPurposes"/>
                <filter-list-by-date list-name="facilityContactMechPurposes"/>
                <first-from-list entry-name="facilityContactMechPurpose" list-name="facilityContactMechPurposes"/>
                <field-to-field field-name="contactMechId" map-name="facilityContactMechPurpose" to-field-name="originTelecomNumberId" to-map-name="shipment"/>
            </if-empty>
        </if-not-empty>
        <if-not-empty field-name="destinationFacilityId" map-name="shipment">
            <if-empty field-name="destinationContactMechId" map-name="shipment">
                <field-to-field field-name="destinationFacilityId" map-name="shipment" to-field-name="facilityId" to-map-name="findFcmpMap"/>
                <string-to-field string="SHIPPING_LOCATION" field-name="contactMechPurposeTypeId" map-name="findFcmpMap"/>
                <find-by-and entity-name="FacilityContactMechPurpose" map-name="findFcmpMap" order-by-list-name="descendingFromDateOrder" list-name="facilityContactMechPurposes"/>
                <filter-list-by-date list-name="facilityContactMechPurposes"/>
                <first-from-list entry-name="facilityContactMechPurpose" list-name="facilityContactMechPurposes"/>
                <field-to-field field-name="contactMechId" map-name="facilityContactMechPurpose" to-field-name="destinationContactMechId" to-map-name="shipment"/>
            </if-empty>
            <if-empty field-name="destinationTelecomNumberId" map-name="shipment">
                <field-to-field field-name="destinationFacilityId" map-name="shipment" to-field-name="facilityId" to-map-name="findFcmpMap"/>
                <string-to-field string="PHONE_SHIPPING" field-name="contactMechPurposeTypeId" map-name="findFcmpMap"/>
                <find-by-and entity-name="FacilityContactMechPurpose" map-name="findFcmpMap" order-by-list-name="descendingFromDateOrder" list-name="facilityContactMechPurposes"/>
                <filter-list-by-date list-name="facilityContactMechPurposes"/>
                <first-from-list entry-name="facilityContactMechPurpose" list-name="facilityContactMechPurposes"/>
                <field-to-field field-name="contactMechId" map-name="facilityContactMechPurpose" to-field-name="destinationTelecomNumberId" to-map-name="shipment"/>
            </if-empty>
        </if-not-empty>

        <if-compare-field field-name="shipment" operator="not-equals" to-field-name="shipmentCopy">
            <set-service-fields service-name="updateShipment" map-name="shipment" to-map-name="shipmentUpdateMap"/>
            <call-service service-name="updateShipment" in-map-name="shipmentUpdateMap"/>
        </if-compare-field>
    </simple-method>
    <simple-method method-name="sendShipmentScheduledNotification" short-description="Send Shipment Scheduled Notification">
        <check-permission permission="FACILITY" action="_CREATE">
            <alt-permission permission="FACILITY" action="_UPDATE"/>
            <fail-message message="Security Error: to run createShipmentItem you must have the FACILITY_CREATE, FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value entity-name="Shipment" value-name="shipment"/>
        <set-pk-fields value-name="shipment" map-name="parameters"/>
        <find-by-primary-key map-name="shipment" value-name="shipment"/>

        <!-- find email address for currently logged in user, set as sendFrom -->
        <field-to-field field-name="partyId" map-name="userLogin" to-map-name="curUserPcmFindMap"/>
        <string-to-field string="EMAIL_ADDRESS" field-name="contactMechTypeId" map-name="curUserPcmFindMap"/>
        <find-by-and entity-name="PartyAndContactMech" map-name="curUserPcmFindMap" list-name="curUserPartyAndContactMechs"/>
        <first-from-list entry-name="curUserPartyAndContactMech" list-name="curUserPartyAndContactMechs"/>
        <string-append field-name="sendEmailMap.sendFrom" string="${curUserPartyAndContactMech.infoString}" prefix=","/>

        <!-- find email addresses of partyIdFrom, set as sendTo -->
        <env-to-env env-name="shipment.partyIdFrom" to-env-name="sendToPartyIdMap.${shipment.partyIdFrom}"/>

        <!-- find email addresses of all parties not equal to partyIdFrom in SUPPLIER_AGENT roleTypeId associated with primary order, set as sendTo -->
        <field-to-field field-name="primaryOrderId" map-name="shipment" to-field-name="orderId" to-map-name="supplierAgentOrderRoleFindMap"/>
        <string-to-field string="SUPPLIER_AGENT" field-name="roleTypeId" map-name="supplierAgentOrderRoleFindMap"/>
        <find-by-and entity-name="OrderRole" map-name="supplierAgentOrderRoleFindMap" list-name="supplierAgentOrderRoles"/>
        <iterate entry-name="supplierAgentOrderRole" list-name="supplierAgentOrderRoles">
            <env-to-env env-name="supplierAgentOrderRole.partyId" to-env-name="sendToPartyIdMap.${supplierAgentOrderRole.partyId}"/>
        </iterate>

        <!-- go through all send to parties and get email addresses -->
        <iterate-map key-name="sendToPartyId" value-name="sendToPartyIdValue" map-name="sendToPartyIdMap">
            <env-to-field env-name="sendToPartyId" field-name="partyId" map-name="sendToPartyPcmFindMap"/>
            <string-to-field string="EMAIL_ADDRESS" field-name="contactMechTypeId" map-name="sendToPartyPcmFindMap"/>
            <find-by-and entity-name="PartyAndContactMech" map-name="sendToPartyPcmFindMap" list-name="sendToPartyPartyAndContactMechs"/>
            <iterate entry-name="sendToPartyPartyAndContactMech" list-name="sendToPartyPartyAndContactMechs">
                <string-append field-name="sendEmailMap.sendTo" string="${sendToPartyPartyAndContactMech.infoString}" prefix=","/>
            </iterate>
        </iterate-map>

        <!-- set subject, contentType, templateName, templateData -->
        <string-to-field string="Scheduled Notification for Shipment ${shipment.shipmentId}" field-name="subject" map-name="sendEmailMap"/>
        <if-not-empty field-name="shipment.primaryOrderId">
            <string-append string=" for Primary Order ${shipment.primaryOrderId}" field-name="subject" map-name="sendEmailMap"/>
        </if-not-empty>
        <string-to-field string="text/html" field-name="contentType" map-name="sendEmailMap"/>
        <string-to-field string="org/ofbiz/shipment/shipment/ShipmentScheduledNotice.ftl" field-name="templateName" map-name="sendEmailMap"/>
        <env-to-env env-name="shipment" to-env-name="sendEmailMap.templateData.shipment"/>

        <!-- call sendGenericNotificationEmail service, if enough information was found -->
        <log level="info" message="Sending generic notification email (if all info is in place): ${sendEmailMap}"/>
        <if>
            <condition>
                <and>
                    <not><if-empty field-name="sendTo" map-name="sendEmailMap"/></not>
                    <not><if-empty field-name="sendFrom" map-name="sendEmailMap"/></not>
                </and>
            </condition>
            <then>
                <call-service service-name="sendGenericNotificationEmail" in-map-name="sendEmailMap"/>
            </then>
            <else>
                <log level="error" message="Insufficient data to send notice email: ${sendEmailMap}"/>
            </else>
        </if>
    </simple-method>

    <!-- ShipmentItem services -->
    <simple-method method-name="createShipmentItem" short-description="Create ShipmentItem">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipmentItem you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Create ShipmentItem" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentItem"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <!-- if no shipmentItemSeqId, generate one based on existing items, ie one greater than the current higher number -->
        <make-next-seq-id value-name="newEntity" seq-field-name="shipmentItemSeqId"/>
        <field-to-result field-name="shipmentItemSeqId" map-name="newEntity" result-name="shipmentItemSeqId"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateShipmentItem" short-description="Update ShipmentItem">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipmentItem you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Update ShipmentItem" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentItem"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentItem" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteShipmentItem" short-description="Delete ShipmentItem">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipmentItem you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete ShipmentItem" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentItem"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentItem" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ShipmentPackage services -->
    <simple-method method-name="createShipmentPackage" short-description="Create ShipmentPackage">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipmentPackage you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Create ShipmentPackage" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentPackage"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <if-compare value="New" operator="equals" field-name="shipmentPackageSeqId" map-name="newEntity">
            <clear-field field-name="shipmentPackageSeqId" map-name="newEntity"/>
        </if-compare>

        <!-- if no shipmentPackageSeqId, generate one based on existing items, ie one greater than the current higher number -->
        <make-next-seq-id value-name="newEntity" seq-field-name="shipmentPackageSeqId"/>
        <field-to-result field-name="shipmentPackageSeqId" map-name="newEntity" result-name="shipmentPackageSeqId"/>

        <now-timestamp-to-env env-name="newEntity.dateCreated"/>

        <create-value value-name="newEntity"/>

        <field-to-env map-name="newEntity" field-name="shipmentId"/>
        <field-to-env map-name="newEntity" field-name="shipmentPackageSeqId"/>
        <call-simple-method method-name="ensurePackageRouteSeg"/>
    </simple-method>
    <simple-method method-name="updateShipmentPackage" short-description="Update ShipmentPackage">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipmentPackage you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Update ShipmentPackage" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusShipped"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentPackage"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackage" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>

        <field-to-env map-name="lookedUpValue" field-name="shipmentId"/>
        <field-to-env map-name="lookedUpValue" field-name="shipmentPackageSeqId"/>
        <call-simple-method method-name="ensurePackageRouteSeg"/>
    </simple-method>
    <simple-method method-name="deleteShipmentPackage" short-description="Delete ShipmentPackage">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipmentPackage you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete ShipmentPackage" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentPackage"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackage" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="ensurePackageRouteSeg" short-description="Ensure ShipmentPackageRouteSeg exists for all RouteSegments for this Package">
        <env-to-field env-name="shipmentId" map-name="lookupRouteSegmentsMap"/>
        <find-by-and entity-name="ShipmentRouteSegment" map-name="lookupRouteSegmentsMap" list-name="shipmentRouteSegments"/>
        <iterate entry-name="shipmentRouteSegment" list-name="shipmentRouteSegments">
            <env-to-field env-name="shipmentId" map-name="checkShipmentPackageRouteSegMap"/>
            <env-to-field env-name="shipmentPackageSeqId" map-name="checkShipmentPackageRouteSegMap"/>
            <field-to-field field-name="shipmentRouteSegmentId" map-name="shipmentRouteSegment" to-map-name="checkShipmentPackageRouteSegMap"/>
            <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map-name="checkShipmentPackageRouteSegMap" value-name="checkShipmentPackageRouteSeg"/>
            <if-empty field-name="checkShipmentPackageRouteSeg">
                <call-service service-name="createShipmentPackageRouteSeg" in-map-name="checkShipmentPackageRouteSegMap">
                </call-service>
            </if-empty>
        </iterate>
    </simple-method>

    <!-- ShipmentPackageContent services -->
    <simple-method method-name="createShipmentPackageContent" short-description="Create ShipmentPackageContent">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipmentPackageContent you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Create ShipmentPackageContent" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentPackageContent"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <create-value value-name="newEntity"/>
        <field-to-result field-name="shipmentPackageSeqId" map-name="newEntity" result-name="shipmentPackageSeqId"/>
    </simple-method>
    <simple-method method-name="updateShipmentPackageContent" short-description="Update ShipmentPackageContent">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipmentPackageContent you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Update ShipmentPackageContent" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentPackageContent"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackageContent" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteShipmentPackageContent" short-description="Delete ShipmentPackageContent">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipmentPackageContent you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete ShipmentPackageContent" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentPackageContent"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackageContent" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="addShipmentContentToPackage" short-description="Add Shipment Content To Package">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run addShipmentContentToPackage you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Create ShipmentPackageContent" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentPackageContent"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <find-by-primary-key value-name="shipmentPackageContent" map-name="newEntity"/>
        <log level="verbose" message="In addShipmentContentToPackage trying values: ${newEntity}"/>
        <if-empty field-name="shipmentPackageContent">
            <set-service-fields service-name="createShipmentPackageContent" map-name="parameters" to-map-name="createSPCMap"/>
            <call-service service-name="createShipmentPackageContent" in-map-name="createSPCMap">
                <result-to-field result-name="shipmentPackageSeqId" field-name="newEntity.shipmentPackageSeqId"/>
            </call-service>
        <else>
            <!-- add the quantities and store it -->
            <calculate field-name="shipmentPackageContent.quantity" type="Double">
                <calcop field-name="shipmentPackageContent.quantity" operator="add"><calcop field-name="parameters.quantity" operator="get"/></calcop>
            </calculate>
            <set-service-fields service-name="updateShipmentPackageContent" map-name="shipmentPackageContent" to-map-name="updateSPCMap"/>
            <call-service service-name="updateShipmentPackageContent" in-map-name="updateSPCMap"/>
        </else>
        </if-empty>
        <field-to-result field-name="newEntity.shipmentPackageSeqId" result-name="shipmentPackageSeqId"/>
    </simple-method>

    <!-- ShipmentPackageRouteSeg services -->
    <simple-method method-name="createShipmentPackageRouteSeg" short-description="Create ShipmentPackageRouteSeg">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipmentPackageRouteSeg you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentPackageRouteSeg"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateShipmentPackageRouteSeg" short-description="Update ShipmentPackageRouteSeg">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipmentPackageRouteSeg you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentPackageRouteSeg"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteShipmentPackageRouteSeg" short-description="Delete ShipmentPackageRouteSeg">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipmentPackageRouteSeg you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete ShipmentPackageRouteSeg" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentPackageRouteSeg"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ShipmentContactMech services -->
    <simple-method method-name="createShipmentContactMech" short-description="Create ShipmentContactMech">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipmentContactMech you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentContactMech"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateShipmentContactMech" short-description="Update ShipmentContactMech">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipmentContactMech you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentContactMech"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentContactMech" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteShipmentContactMech" short-description="Delete ShipmentContactMech">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipmentContactMech you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete ShipmentContactMech" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentContactMech"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentContactMech" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ShipmentRouteSegment services -->
    <simple-method method-name="createShipmentRouteSegment" short-description="Create ShipmentRouteSegment">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipmentRouteSegment you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Create ShipmentRouteSegment" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentRouteSegment"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <!-- if no shipmentRouteSegmentSeqId, generate one based on existing items, ie one greater than the current higher number -->
        <make-next-seq-id value-name="newEntity" seq-field-name="shipmentRouteSegmentId"/>
        <field-to-result field-name="shipmentRouteSegmentId" map-name="newEntity" result-name="shipmentRouteSegmentId"/>

        <if-empty field-name="carrierServiceStatusId" map-name="newEntity">
            <string-to-field string="SHRSCS_NOT_STARTED" field-name="carrierServiceStatusId" map-name="newEntity"/>
        </if-empty>

        <create-value value-name="newEntity"/>

        <field-to-env map-name="newEntity" field-name="shipmentId"/>
        <field-to-env map-name="newEntity" field-name="shipmentRouteSegmentId"/>
        <call-simple-method method-name="ensureRouteSegPackage"/>
    </simple-method>
    <simple-method method-name="updateShipmentRouteSegment" short-description="Update ShipmentRouteSegment">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipmentRouteSegment you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Update ShipmentRouteSegment" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusDelivered"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentRouteSegment"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentRouteSegment" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>

        <if-empty field-name="carrierServiceStatusId" map-name="newEntity">
            <string-to-field string="SHRSCS_NOT_STARTED" field-name="carrierServiceStatusId" map-name="newEntity"/>
        </if-empty>

        <now-timestamp-to-env env-name="nowTimestamp"/>

        <field-to-field field-name="userLoginId" map-name="userLogin" to-field-name="updatedByUserLoginId" to-map-name="lookedUpValue"/>
        <env-to-field env-name="nowTimestamp" field-name="lastUpdatedDate" map-name="lookedUpValue"/>

        <store-value value-name="lookedUpValue"/>

        <field-to-env map-name="lookedUpValue" field-name="shipmentId"/>
        <field-to-env map-name="lookedUpValue" field-name="shipmentRouteSegmentId"/>
        <call-simple-method method-name="ensureRouteSegPackage"/>
    </simple-method>
    <simple-method method-name="deleteShipmentRouteSegment" short-description="Delete ShipmentRouteSegment">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipmentRouteSegment you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete ShipmentRouteSegment" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentRouteSegment"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentRouteSegment" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="ensureRouteSegPackage" short-description="Ensure ShipmentPackageRouteSeg exists for all Packages for this RouteSegment">
        <env-to-field env-name="shipmentId" map-name="lookupPackagesMap"/>
        <find-by-and entity-name="ShipmentPackage" map-name="lookupPackagesMap" list-name="shipmentPackages"/>
        <iterate entry-name="shipmentPackage" list-name="shipmentPackages">
            <env-to-field env-name="shipmentId" map-name="checkShipmentPackageRouteSegMap"/>
            <env-to-field env-name="shipmentRouteSegmentId" map-name="checkShipmentPackageRouteSegMap"/>
            <field-to-field field-name="shipmentPackageSeqId" map-name="shipmentPackage" to-map-name="checkShipmentPackageRouteSegMap"/>
            <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map-name="checkShipmentPackageRouteSegMap" value-name="checkShipmentPackageRouteSeg"/>
            <if-empty field-name="checkShipmentPackageRouteSeg">
                <call-service service-name="createShipmentPackageRouteSeg" in-map-name="checkShipmentPackageRouteSegMap">
                </call-service>
            </if-empty>
        </iterate>
    </simple-method>

    <!-- Check the Status of a Shipment to see if it can be changed - meant to be called in-line -->
    <simple-method method-name="checkCanChangeShipmentStatusPacked" short-description="Check the Status of a Shipment to see if it can be changed - meant to be called in-line">
        <string-to-field string="SHIPMENT_PACKED" field-name="fromStatusId"/>
    </simple-method>
    <simple-method method-name="checkCanChangeShipmentStatusShipped" short-description="Check the Status of a Shipment to see if it can be changed - meant to be called in-line">
        <string-to-field string="SHIPMENT_SHIPPED" field-name="fromStatusId"/>
    </simple-method>
    <simple-method method-name="checkCanChangeShipmentStatusDelivered" short-description="Check the Status of a Shipment to see if it can be changed - meant to be called in-line">
        <string-to-field string="SHIPMENT_DELIVERED" field-name="fromStatusId"/>
    </simple-method>
    <simple-method method-name="checkCanChangeShipmentStatusGeneral" short-description="Check the Status of a Shipment to see if it can be changed - meant to be called in-line">
        <field-to-field field-name="shipmentId" map-name="parameters" to-map-name="lookupShipmentMap"/>
        <find-by-primary-key entity-name="Shipment" map-name="lookupShipmentMap" value-name="testShipment"/>
        <if>
            <condition>
                <or>
                    <and>
                        <or>
                            <if-empty field-name="fromStatusId"/>
                            <if-compare field-name="fromStatusId" operator="equals" value="SHIPMENT_PACKED"/>
                        </or>
                        <if-compare field-name="shipment.statusId" operator="equals" value="SHIPMENT_PACKED"/>
                    </and>
                    <and>
                        <or>
                            <if-compare field-name="fromStatusId" operator="equals" value="SHIPMENT_PACKED"/>
                            <if-compare field-name="fromStatusId" operator="equals" value="SHIPMENT_SHIPPED"/>
                        </or>
                        <if-compare field-name="shipment.statusId" operator="equals" value="SHIPMENT_SHIPPED"/>
                    </and>
                    <and>
                        <or>
                            <if-compare field-name="fromStatusId" operator="equals" value="SHIPMENT_PACKED"/>
                            <if-compare field-name="fromStatusId" operator="equals" value="SHIPMENT_SHIPPED"/>
                            <if-compare field-name="fromStatusId" operator="equals" value="SHIPMENT_DELIVERED"/>
                        </or>
                        <if-compare field-name="shipment.statusId" operator="equals" value="SHIPMENT_DELIVERED"/>
                    </and>
                    <if-compare field-name="shipment.statusId" operator="equals" value="SHIPMENT_CANCELLED"/>
                </or>
            </condition>
            <then>
                <get-related-one relation-name="StatusItem" value-name="testShipment" to-value-name="testShipmentStatus"/>
                <string-to-list string="Cannot perform operation ${operationName} when the shipment is in the ${testShipmentStatus.description} [${testShipment.statusId}] status." list-name="error_list"/>
            </then>
        </if>
    </simple-method>

    <!-- shipment method type services -->
    <simple-method method-name="createCarrierShipmentMethod" short-description="Creates a CarrierShipmentMethod">
        <make-value value-name="carrierShipmentMethod" entity-name="CarrierShipmentMethod"/>
        <set-pk-fields map-name="parameters" value-name="carrierShipmentMethod"/>
        <set-nonpk-fields map-name="parameters" value-name="carrierShipmentMethod"/>
        <create-value value-name="carrierShipmentMethod"/>
    </simple-method>
    <simple-method method-name="updateCarrierShipmentMethod" short-description="Updates a CarrierShipmentMethod">
        <make-value value-name="lookupMap" entity-name="CarrierShipmentMethod"/>
        <set-pk-fields map-name="parameters" value-name="lookupMap"/>
        <find-by-primary-key entity-name="CarrierShipmentMethod" map-name="lookupMap" value-name="carrierShipmentMethod"/>

        <set-nonpk-fields map-name="parameters" value-name="carrierShipmentMethod"/>
        <store-value value-name="carrierShipmentMethod"/>
    </simple-method>
    <simple-method method-name="createShipmentMethodType" short-description="Creates a ShipmentMethodType">
        <make-value value-name="shipmentMethodType" entity-name="ShipmentMethodType"/>
        <set-pk-fields map-name="parameters" value-name="shipmentMethodType"/>
        <set-nonpk-fields map-name="parameters" value-name="shipmentMethodType"/>
        <create-value value-name="shipmentMethodType"/>
    </simple-method>
    <simple-method method-name="updateShipmentMethodType" short-description="Updates a ShipmentMethodType">
        <make-value value-name="lookupMap" entity-name="ShipmentMethodType"/>
        <set-pk-fields map-name="parameters" value-name="lookupMap"/>
        <find-by-primary-key entity-name="ShipmentMethodType" map-name="lookupMap" value-name="shipmentMethodType"/>

        <set-nonpk-fields map-name="parameters" value-name="shipmentMethodType"/>
        <store-value value-name="shipmentMethodType"/>
    </simple-method>
    
    <!-- quick ship entire order in one package per facility & ship group -->
    <simple-method method-name="quickShipEntireOrder" short-description="Quick ships an entire order from multiple facilities">
        <!-- first get the order header; make sure we have a product store -->
        <field-to-field field-name="orderId" map-name="parameters" to-map-name="ohpkmap"/>
        <find-by-primary-key entity-name="OrderHeader" map-name="ohpkmap" value-name="orderHeader"/>
        <if-empty field-name="productStoreId" map-name="orderHeader">
            <!-- no store cannot use quick ship; throw error -->
            <add-error><fail-message message="No ProductStore associated with order; cannot use Quick Ship"/></add-error>
            <check-errors/>
        </if-empty>

        <!-- get the product store entity -->
        <field-to-field field-name="productStoreId" map-name="orderHeader" to-map-name="storeLookup"/>
        <find-by-primary-key entity-name="ProductStore" map-name="storeLookup" value-name="productStore"/>
        <if-compare field-name="reserveInventory" map-name="productStore" operator="not-equals" value="Y">
            <!-- no reservations; no shipment; cannot use quick ship -->
            <add-error><fail-message message="ProductStore [${productStore.productStoreID}] does not reserve inventory; cannot use Quick Ship for Multiple Facilities"/></add-error>
        </if-compare>
        <if-compare field-name="explodeOrderItems" map-name="productStore" operator="equals" value="Y">
            <!-- can't insert duplicate rows in shipmentPackageContent -->
            <add-error><fail-message message="ProductStore [${productStore.productStoreID}] explodes order items; cannot use Quick Ship for Multiple Facilities"/></add-error>
        </if-compare>
        <!-- locate shipping facilities associated with order item rez's -->
        <entity-condition entity-name="OrderItemAndShipGrpInvResAndItem" list-name="orderItemAndShipGrpInvResAndItemList">
            <condition-list>
                <condition-expr field-name="orderId" env-name="orderHeader.orderId"/>
                <condition-expr field-name="statusId" value="ITEM_APPROVED"/>
            </condition-list>
        </entity-condition>
        <iterate list-name="orderItemAndShipGrpInvResAndItemList" entry-name="orderItemAndShipGrpInvResAndItem">
            <if>
                <condition><not><if-compare-field field-name="orderItemShipGrpInvResFacilityIds" operator="contains" to-field-name="orderItemAndShipGrpInvResAndItem.facilityId"/></not></condition>
                <then><field-to-list field-name="orderItemAndShipGrpInvResAndItem.facilityId" list-name="orderItemShipGrpInvResFacilityIds"/></then>
            </if>
        </iterate>
            
        <!-- lookup all the approved items, doing by item because the item must be approved before shipping -->
        <string-to-field field-name="statusId" map-name="itemLookupMap" string="ITEM_APPROVED"/>
        <field-to-field field-name="orderId" map-name="orderHeader" to-map-name="itemLookupMap"/>
        <find-by-and entity-name="OrderItemAndShipGroupAssoc" map-name="itemLookupMap" list-name="orderItemAndShipGroupAssocList"/>

        <!-- make sure we have something to ship -->
        <if-empty field-name="orderItemAndShipGroupAssocList">
            <add-error><fail-message message="No items available to ship at this time"/></add-error>
            <check-errors/>
        </if-empty>
            
        <!-- group orderItems (actually OrderItemAndShipGroupAssocs) by shipGroupSeqId in a Map with List values -->
        <iterate list-name="orderItemAndShipGroupAssocList" entry-name="orderItemAndShipGroupAssoc">
            <field-to-list field-name="orderItemAndShipGroupAssoc" list-name="orderItemListByShGrpMap.${orderItemAndShipGroupAssoc.shipGroupSeqId}"/>
        </iterate>

        <get-related relation-name="OrderItemShipGroup" value-name="orderHeader" list-name="orderItemShipGroupList"/>
            
        <!-- traverse facilities, instantiate shipment for each -->
        <iterate list-name="orderItemShipGrpInvResFacilityIds" entry-name="orderItemShipGrpInvResFacilityId">
            <!-- sanity check for valid facility -->
            <env-to-env env-name="orderItemShipGrpInvResFacilityId" to-env-name="facilityLookupMap.facilityId"/>
            <find-by-primary-key entity-name="Facility" map-name="facilityLookupMap" value-name="facility"/>
            <!-- should never be empty - referential integrity enforced -->

            <!-- for OrderItemShipGroup need to split all OISGIRs into their ship groups and create a shipment for each -->
            <iterate list-name="orderItemShipGroupList" entry-name="orderItemShipGroup">
                <!-- lookup all the approved items -->
                <string-to-field field-name="statusId" map-name="itemLookupMap" string="ITEM_APPROVED"/>
                <field-to-field field-name="orderId" map-name="orderHeader" to-map-name="itemLookupMap"/>
                <field-to-field field-name="shipGroupSeqId" map-name="orderItemShipGroup" to-map-name="itemLookupMap"/>
                <find-by-and entity-name="OrderItemAndShipGroupAssoc" map-name="itemLookupMap" list-name="orderItems"/>
                    
                <env-to-env env-name="orderItemListByShGrpMap.${orderItemShipGroup.shipGroupSeqId}" to-env-name="perShipGroupItemList"/>
            
                <!-- make sure we have something to ship -->
                <if-empty field-name="perShipGroupItemList">
                    <string-to-list string="No items available to ship at this time for ship group ID [${orderItemShipGroup.shipGroupSeqId}]" list-name="successMessageList"/>
                <else>
                    <!-- create the shipment for this facility and ship group combination -->
                    <field-to-field field-name="orderHeader.orderId" to-field-name="shipmentContext.primaryOrderId"/>
                    <field-to-field field-name="orderItemShipGroup.shipGroupSeqId" to-field-name="shipmentContext.primaryShipGroupSeqId"/>
                    <field-to-field field-name="orderItemShipGrpInvResFacilityId" to-field-name="shipmentContext.originFacilityId"/>
                    <string-to-field string="SHIPMENT_INPUT" field-name="statusId" map-name="shipmentContext"/>
                    <call-service service-name="createShipment" in-map-name="shipmentContext">
                        <result-to-field result-name="shipmentId" field-name="shipmentLookupMap.shipmentId"/>
                    </call-service>
                    <find-by-primary-key entity-name="Shipment" map-name="shipmentLookupMap" value-name="shipment"/>
    
                    <iterate list-name="perShipGroupItemList" entry-name="orderItemAndShipGroupAssoc">
                        <!-- just get the OrderItemShipGrpInvResAndItem records for this facility and this ship group, since that is what this shipment is for -->
                        <clear-field field-name="itemResFindMap"/>
                        <env-to-env env-name="orderItemShipGrpInvResFacilityId" to-env-name="itemResFindMap.facilityId"/>
                        <get-related value-name="orderItemAndShipGroupAssoc" relation-name="OrderItemShipGrpInvResAndItem" map-name="itemResFindMap" list-name="itemResList"/>
                        <iterate list-name="itemResList" entry-name="itemRes">
                            <field-to-field field-name="shipmentId" map-name="shipment" to-map-name="issueContext"/>
                            <field-to-field field-name="orderId" map-name="itemRes" to-map-name="issueContext"/>
                            <field-to-field field-name="orderItemSeqId" map-name="itemRes" to-map-name="issueContext"/>
                            <field-to-field field-name="shipGroupSeqId" map-name="itemRes" to-map-name="issueContext"/>
                            <field-to-field field-name="inventoryItemId" map-name="itemRes" to-map-name="issueContext"/>
                            <field-to-field field-name="quantity" map-name="itemRes" to-map-name="issueContext"/>
                            <call-service service-name="issueOrderItemShipGrpInvResToShipment" in-map-name="issueContext"/>
                        </iterate>
                    </iterate>
                        
                    <!-- place all issued items into a single package -->
                    <field-to-field field-name="shipmentId" map-name="shipment" to-map-name="issueLookupMap"/>
                    <field-to-field field-name="orderId" map-name="orderHeader" to-map-name="issueLookupMap"/>
                    <field-to-field field-name="shipGroupSeqId" map-name="orderItemShipGroup" to-map-name="issueLookupMap"/>
                    <find-by-and entity-name="ItemIssuance" map-name="issueLookupMap" list-name="itemIssuances"/>
                    
                    <string-to-field string="New" field-name="shipmentPackageSeqId"/>
                    <iterate list-name="itemIssuances" entry-name="itemIssuance">
                        <log level="verbose" message="In quick ship adding item to package: ${shipmentPackageSeqId}"/>
                        <clear-field field-name="shipItemContext"/>
                        <field-to-field field-name="shipmentId" map-name="itemIssuance" to-map-name="shipItemContext"/>
                        <field-to-field field-name="shipmentItemSeqId" map-name="itemIssuance" to-map-name="shipItemContext"/>
                        <field-to-field field-name="quantity" map-name="itemIssuance" to-map-name="shipItemContext"/>
                        <field-to-field field-name="shipmentPackageSeqId" to-field-name="shipItemContext.shipmentPackageSeqId"/>
                        <call-service service-name="addShipmentContentToPackage" in-map-name="shipItemContext">
                            <result-to-field result-name="shipmentPackageSeqId" field-name="shipmentPackageSeqId"/>
                        </call-service>
                    </iterate>
                    <!-- update the shipment status to packed -->
                    <field-to-field field-name="shipmentId" map-name="shipment" to-map-name="packedContext"/>
                    <string-to-field string="SHIPMENT_PACKED" field-name="packedContext.statusId"/>
                    <call-service service-name="updateShipment" in-map-name="packedContext"/>
                    <!-- update the shipment status to shipped -->
                    <field-to-field field-name="shipmentId" map-name="shipment" to-map-name="packedContext"/>
                    <string-to-field string="SHIPMENT_SHIPPED" field-name="packedContext.statusId"/>
                    <call-service service-name="updateShipment" in-map-name="packedContext"/>

                    <env-to-env env-name="shipment.shipmentId" to-env-name="shipmentShipGroupFacility.shipmentId"/>
                    <env-to-env env-name="facility.facilityId" to-env-name="shipmentShipGroupFacility.facilityId"/>
                    <env-to-env env-name="orderItemShipGroup.shipGroupSeqId" to-env-name="shipmentShipGroupFacility.shipGroupSeqId"/>
                    <field-to-list field-name="shipmentShipGroupFacility" list-name="shipmentShipGroupFacilityList"/>
                    <string-to-list string="Created shipment with ID [${shipmentShipGroupFacility.shipmentId}] for ship group ID [${shipmentShipGroupFacility.shipGroupSeqId}] for facility ID [${shipmentShipGroupFacility.facilityId}]" list-name="successMessageList"/>
                    <clear-field field-name="shipmentShipGroupFacility"/>
                </else>
                </if-empty>
            </iterate>
        </iterate>
        
        <log level="info" message="Finished quickShipEntireOrder:\nshipmentShipGroupFacilityList=${shipmentShipGroupFacilityList}\nsuccessMessageList=${successMessageList}"/>
        <field-to-result field-name="shipmentShipGroupFacilityList"/>
        <field-to-result field-name="successMessageList"/>
        
        <if-empty field-name="shipmentShipGroupFacilityList">
            <add-error><fail-message message="Warning: no shipments created; could not find anything ready and needing to be shipped."/></add-error>
        </if-empty>
        <check-errors/>
    </simple-method>   

    <simple-method method-name="quickShipOrderByItem" short-description="Quick ships order based on item list">
        <!-- quick ship order using multiple packages per tracking number -->
        <!-- Parameters coming in: orderId, shipGroupSeqId,itemShipList, originFacilityId, setPackedOnly -->
        <!-- The input list contains Maps with four keys: orderItemSeqId, inventoryItemId, qtyShipped, trackingNum -->
        <!-- Parameters going out: shipmentId -->
        
        <!-- first get the order header; make sure we have a product store -->
        <entity-one entity-name="OrderHeader" value-name="orderHeader"/>

        <if-empty field-name="parameters.originFacilityId">
            <if-empty field-name="orderHeader.productStoreId">
                <!-- no store cannot use quick ship; throw error -->
                <add-error><fail-message message="No ProductStore associated with order; cannot use Quick Ship"/></add-error>
                <check-errors/>
            </if-empty>
            <if-not-empty field-name="orderHeader.productStoreId">
                <!-- get the product store entity -->
                <entity-one entity-name="ProductStore" value-name="productStore">
                    <field-map field-name="productStoreId" env-name="orderHeader.productStoreId"/>
                </entity-one>
                
                <if-compare field-name="reserveInventory" map-name="productStore" operator="not-equals" value="Y">
                    <!-- no reservations; no shipment; cannot use quick ship -->
                    <add-error><fail-message message="ProductStore [${productStore.productStoreID}] does not reserve inventory; cannot use Quick Ship"/></add-error>
                </if-compare>
                <if-compare field-name="oneInventoryFacility" map-name="productStore" operator="not-equals" value="Y">
                    <!-- if we allow multiple facilities we cannot use quick ship; throw error -->
                    <add-error><fail-message message="ProductStore [${productStore.productStoreId}] allows multiple facilities; cannot use Quick Ship"/></add-error>
                </if-compare>
                <if-empty field-name="inventoryFacilityId" map-name="productStore">
                    <!-- if no inventoryFacility is defined we cannot use quick ship; throw error -->
                    <add-error><fail-message message="No inventory facility associated with ProductStore [${productStore.productStoreId}]; cannot use Quick Ship"/></add-error>
                </if-empty>
                <check-errors/>
            </if-not-empty>
        </if-empty>

        <!-- make sure we have items to issue -->
        <if-empty field-name="itemShipList" map-name="parameters">
            <add-error><fail-message message="No items available to ship at this time"/></add-error>
            <check-errors/>
        </if-empty>

        <!-- move the itemMap to the envrironment -->
        <field-to-env field-name="itemShipList" map-name="parameters" env-name="itemMapList"/>

        <!-- we are all good to go; create the shipment -->
        <if-not-empty field-name="parameters.originFacilityId">
            <env-to-env env-name="parameters.originFacilityId" to-env-name="shipmentContext.originFacilityId"/>
        </if-not-empty>
        <env-to-env env-name="parameters.orderId" to-env-name="shipmentContext.primaryOrderId"/>
        <env-to-env env-name="parameters.shipGroupSeqId" to-env-name="shipmentContext.primaryShipGroupSeqId"/>
        <string-to-field string="SHIPMENT_INPUT" field-name="shipmentContext.statusId"/>
        <call-service service-name="createShipment" in-map-name="shipmentContext">
            <result-to-field result-name="shipmentId" field-name="shipmentLookupMap.shipmentId"/>
        </call-service>
        <find-by-primary-key entity-name="Shipment" map-name="shipmentLookupMap" value-name="shipment"/>

        <!-- issue the passed in order items -->
        <log level="verbose" message="ShipMap List : ${itemMapList}  /  ${parameters.itemShipList}"/>
        <iterate list-name="itemMapList" entry-name="itemMap">
            <log level="verbose" message="Item Map : ${itemMap}"/>
            <clear-field field-name="issueContext"/>
            <field-to-field field-name="shipmentId" map-name="shipment" to-map-name="issueContext"/>
            <field-to-field field-name="orderId" map-name="parameters" to-map-name="issueContext"/>
            <field-to-field field-name="shipGroupSeqId" map-name="parameters" to-map-name="issueContext"/>
            <field-to-field field-name="orderItemSeqId" map-name="itemMap" to-map-name="issueContext"/>
            <field-to-field field-name="inventoryItemId" map-name="itemMap" to-map-name="issueContext"/>
            <field-to-field field-name="itemMap.qtyShipped" to-field-name="issueContext.quantity"/>
            <call-service service-name="issueOrderItemShipGrpInvResToShipment" in-map-name="issueContext">
                <result-to-field result-name="itemIssuanceId" field-name="itemMap.itemIssuanceId"/>
            </call-service>
        </iterate>

        <!-- place all issued items into a unique package per tracking num -->
        <iterate list-name="itemMapList" entry-name="itemMap">
            <log level="info" message="QuickShipOrderByItem grouping by tracking number : ${itemMap.trackingNum}"/>

            <entity-one entity-name="ItemIssuance" value-name="itemIssuance">
                <field-map field-name="itemIssuanceId" env-name="itemMap.itemIssuanceId"/>
            </entity-one>

            <clear-field field-name="shipItemContext"/>
            <field-to-field field-name="packageMap.${itemMap.trackingNum}" to-field-name="shipItemContext.shipmentPackageSeqId"/>
            <if-empty field-name="shipItemContext.shipmentPackageSeqId">
                <string-to-field string="New" field-name="shipItemContext.shipmentPackageSeqId"/>
            </if-empty>
            <log level="info" message="Package SeqID : ${shipItemContext.shipmentPackageSeqId}"/>

            <field-to-field field-name="shipmentId" map-name="itemIssuance" to-map-name="shipItemContext"/>
            <field-to-field field-name="shipmentItemSeqId" map-name="itemIssuance" to-map-name="shipItemContext"/>
            <field-to-field field-name="quantity" map-name="itemIssuance" to-map-name="shipItemContext"/>
            <call-service service-name="addShipmentContentToPackage" in-map-name="shipItemContext">
                <result-to-field result-name="shipmentPackageSeqId" field-name="packageMap.${itemMap.trackingNum}"/>
                <result-to-field result-name="shipmentPackageSeqId" map-name="routeSegLookup"/>
            </call-service>

            <if-not-empty field-name="shipmentPackageSeqId" map-name="routeSegLookup">
                <env-to-env env-name="itemIssuance.shipmentId" to-env-name="routeSegLookup.shipmentId"/>
                <!-- quick ship orders should only have one route segment -->
                <string-to-field string="00001" field-name="routeSegLookup.shipmentRouteSegmentId"/>
                <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map-name="routeSegLookup" value-name="packageRouteSegment"/>
                
                <if-not-empty field-name="packageRouteSegment">
                    <field-to-field field-name="trackingNum" map-name="itemMap" to-field-name="trackingCode" to-map-name="packageRouteSegment"/>
                    <store-value value-name="packageRouteSegment"/>
                </if-not-empty>
                <if-empty field-name="packageRouteSegment">
                    <log level="warning" message="No route segment found : ${routeSegLookup}"/>
                </if-empty>
            </if-not-empty>
            <if-empty field-name="routeSegLookup.shipmentPackageSeqId">
                <log level="warning" message="No shipment package ID found; cannot update RouteSegment"/>                 
            </if-empty>
        </iterate>

        <!-- update the shipment status to packed -->
        <field-to-field field-name="shipmentId" map-name="shipment" to-map-name="packedContext"/>
        <string-to-field string="SHIPMENT_PACKED" field-name="packedContext.statusId"/>
        <call-service service-name="updateShipment" in-map-name="packedContext"/>

        <!-- update the shipment status to shipped -->
        <if-empty field-name="parameters.setPackedOnly">
            <field-to-field field-name="shipmentId" map-name="shipment" to-map-name="packedContext"/>
            <string-to-field string="SHIPMENT_SHIPPED" field-name="packedContext.statusId"/>
            <call-service service-name="updateShipment" in-map-name="packedContext"/>
        </if-empty>

        <field-to-result field-name="shipment.shipmentId" result-name="shipmentId"/>
    </simple-method>
    
    <simple-method method-name="removeOrderShipmentFromShipment" short-description="Delete an OrderShipment and updates the ShipmentItem">
        <string-to-field string="Delete OrderShipment entry" field-name="operationName"/>
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run ${operationName} you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run ${operationName} you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <make-value entity-name="OrderShipment" value-name="lookupPk"/>
        <set-pk-fields value-name="lookupPk" map-name="parameters"/>
        <find-by-primary-key entity-name="OrderShipment" map-name="lookupPk" value-name="orderShipment"/>
        <clear-field field-name="lookupPk"/>
        <make-value entity-name="ShipmentItem" value-name="lookupPk"/>
        <set-pk-fields value-name="lookupPk" map-name="parameters"/>
        <find-by-primary-key entity-name="ShipmentItem" map-name="lookupPk" value-name="shipmentItem"/>
        
        <field-to-field field-name="parameters.userLogin" to-field-name="inMap.userLogin"/>
        <field-to-field field-name="parameters.shipmentId" to-field-name="inMap.shipmentId"/>
        <field-to-field field-name="parameters.shipmentItemSeqId" to-field-name="inMap.shipmentItemSeqId"/>
        <field-to-field field-name="parameters.orderId" to-field-name="inMap.orderId"/>
        <field-to-field field-name="parameters.orderItemSeqId" to-field-name="inMap.orderItemSeqId"/>
        <call-service service-name="deleteOrderShipment" in-map-name="inMap"/>
        
        <calculate field-name="shipmentItem.quantity" type="Double">
            <calcop field-name="shipmentItem.quantity" operator="subtract">
                <calcop field-name="orderShipment.quantity" operator="get"/>
            </calcop>
        </calculate>
        <clear-field field-name="inMap"/>
        <if-compare field-name="shipmentItem.quantity" operator="greater" value="0.0" type="Double">
            <field-to-field field-name="parameters.userLogin" to-field-name="inMap.userLogin"/>
            <field-to-field field-name="parameters.shipmentId" to-field-name="inMap.shipmentId"/>
            <field-to-field field-name="parameters.shipmentItemSeqId" to-field-name="inMap.shipmentItemSeqId"/>
            <field-to-field field-name="shipmentItem.quantity" to-field-name="inMap.quantity"/>
            <call-service service-name="updateShipmentItem" in-map-name="inMap"/>
        <else>
            <field-to-field field-name="parameters.userLogin" to-field-name="inMap.userLogin"/>
            <field-to-field field-name="parameters.shipmentId" to-field-name="inMap.shipmentId"/>
            <field-to-field field-name="parameters.shipmentItemSeqId" to-field-name="inMap.shipmentItemSeqId"/>
            <call-service service-name="deleteShipmentItem" in-map-name="inMap"/>
        </else>
        </if-compare>
    </simple-method>
    
    <!-- for a given order item and quantity it creates (or updates if already exists) an -->
    <!-- entry in the ShipmentPlan. -->
    <simple-method method-name="addOrderShipmentToShipment" short-description="Add or update a ShipmentPlan entry">
        <string-to-field string="Put Ordered Quantity to Shipment Plan" field-name="operationName"/>
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run ${operationName} you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run ${operationName} you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>

        <!-- if quantity is greater than 0 we add or update the ShipmentPlan -->
        <if-compare field-name="parameters.quantity" operator="greater" value="0" type="Double">

            <!-- get orderHeader -->
            <make-value entity-name="OrderHeader" value-name="orderHeaderLookupPk"/>
            <set-pk-fields value-name="orderHeaderLookupPk" map-name="parameters"/>
            <find-by-primary-key map-name="orderHeaderLookupPk" value-name="orderHeader"/>
        
            <!-- make sure the order is of orderTypeId: SALES_ORDER -->
            <if-compare field-name="orderTypeId" map-name="orderHeader" operator="not-equals" value="SALES_ORDER">
                <string-to-list string="Not adding Order Item to plan for shipment [${parameters.shipmentId}] because the order is not a Sales Order for order [${parameters.orderId}] order item [${parameters.orderItemSeqId}]" list-name="error_list"/>
            </if-compare>

            <!-- get orderItem -->
            <make-value entity-name="OrderItem" value-name="orderItemLookupPk"/>
            <set-pk-fields value-name="orderItemLookupPk" map-name="parameters"/>
            <find-by-primary-key map-name="orderItemLookupPk" value-name="orderItem"/>

            <!-- make sure the orderItem is not already present in this shipment -->
            <make-value entity-name="OrderShipment" value-name="orderShipmentLookup"/>
            <set-pk-fields value-name="orderShipmentLookup" map-name="parameters"/>
            <find-by-and entity-name="OrderShipment" map-name="orderShipmentLookup" list-name="existingOrderShipments"/>
            <if-not-empty field-name="existingOrderShipments">
                <string-to-list string="Not adding Order Item to plan for shipment [${parameters.shipmentId}] because the order item is already in the shipment (order [${parameters.orderId}], order item [${parameters.orderItemSeqId}])" list-name="error_list"/>
            </if-not-empty>
        
            <field-to-field field-name="parameters.orderId" to-field-name="inputMap.orderId"/>
            <field-to-field field-name="parameters.orderItemSeqId" to-field-name="inputMap.orderItemSeqId"/>
            <call-service service-name="getQuantityForShipment" in-map-name="inputMap">
                <result-to-field result-name="remainingQuantity" field-name="remainingQuantity"/>
            </call-service>
        
            <if-compare-field field-name="parameters.quantity" operator="greater" to-field-name="remainingQuantity" type="Double">
                <string-to-list string="Not adding Order Item to plan for shipment [${parameters.shipmentId}] because the quantity is greater than the remaining quantity (order [${parameters.orderId}], order item [${parameters.orderItemSeqId}])" list-name="error_list"/>
            </if-compare-field>
            <check-errors/>
            <clear-field field-name="inputMap"/>
            <field-to-field field-name="parameters.userLogin" to-field-name="inputMap.userLogin"/>
            <field-to-field field-name="parameters.shipmentId" to-field-name="inputMap.shipmentId"/>
            <field-to-field field-name="orderItem.productId" to-field-name="inputMap.productId"/>
            <field-to-field field-name="parameters.quantity" to-field-name="inputMap.quantity"/>
            <call-service service-name="createShipmentItem" in-map-name="inputMap">
                <result-to-field result-name="shipmentItemSeqId" field-name="parameters.shipmentItemSeqId"/>
            </call-service>
            <clear-field field-name="inputMap"/>
            <field-to-field field-name="parameters.userLogin" to-field-name="inputMap.userLogin"/>
            <field-to-field field-name="parameters.shipmentId" to-field-name="inputMap.shipmentId"/>
            <field-to-field field-name="parameters.shipmentItemSeqId" to-field-name="inputMap.shipmentItemSeqId"/>
            <field-to-field field-name="parameters.orderId" to-field-name="inputMap.orderId"/>
            <field-to-field field-name="parameters.orderItemSeqId" to-field-name="inputMap.orderItemSeqId"/>
            <field-to-field field-name="parameters.quantity" to-field-name="inputMap.quantity"/>
            <call-service service-name="createOrderShipment" in-map-name="parameters"/>
        </if-compare>
    </simple-method>
    <simple-method method-name="getQuantityForShipment" short-description="get the order item quantity still not put in shipments">
        <!-- get orderItem -->
        <make-value entity-name="OrderItem" value-name="orderItemLookupPk"/>
        <set-pk-fields value-name="orderItemLookupPk" map-name="parameters"/>
        <find-by-primary-key map-name="orderItemLookupPk" value-name="orderItem"/>

        <field-to-field field-name="orderId" map-name="parameters" to-map-name="orderShipmentLookup"/>
        <field-to-field field-name="orderItemSeqId" map-name="parameters" to-map-name="orderShipmentLookup"/>
        <find-by-and entity-name="OrderShipment" map-name="orderShipmentLookup" list-name="existingOrderShipments"/>
        <iterate list-name="existingOrderShipments" entry-name="orderShipment">
            <calculate field-name="plannedQuantity" type="Double">
                <calcop field-name="plannedQuantity" operator="add">
                    <calcop field-name="orderShipment.quantity" operator="get"/>
                </calcop>
            </calculate>
        </iterate>
        <clear-field field-name="existingOrderShipments"/>
        <find-by-and entity-name="ItemIssuance" map-name="orderShipmentLookup" list-name="existingOrderShipments"/>
        <iterate list-name="existingOrderShipments" entry-name="itemIssuance">
            <calculate field-name="issuedQuantity" type="Double">
                <calcop field-name="issuedQuantity" operator="add">
                    <calcop field-name="itemIssuance.quantity" operator="get"/>
                </calcop>
            </calculate>
        </iterate>

        <calculate field-name="totPlannedOrIssuedQuantity" type="Double">
            <calcop field-name="issuedQuantity" operator="add">
                <calcop field-name="plannedQuantity" operator="get"/>
            </calcop>
        </calculate>
        <calculate field-name="remainingQuantity" type="Double">
            <calcop field-name="orderItem.quantity" operator="subtract">
                <calcop field-name="totPlannedOrIssuedQuantity" operator="get"/>
            </calcop>
        </calculate>
        <field-to-result field-name="remainingQuantity"/>
    </simple-method>
</simple-methods>

    <!-- FooBar services -->
<!--
    <simple-method method-name="createFooBar" short-description="Create FooBar">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createFooBar you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="FooBar"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateFooBar" short-description="Update FooBar">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateFooBar you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="FooBar"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="FooBar" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteFooBar" short-description="Delete FooBar">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteFooBar you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="FooBar"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="FooBar" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
-->

