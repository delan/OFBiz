<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE simple-methods PUBLIC "-//OFBiz//DTD Simple Methods//EN" "http://www.ofbiz.org/dtds/simple-methods.dtd">

<!--
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author     David E. Jones (jonesde@ofbiz.org)
 * @author     Andy Zeneski (jaz@ofbiz.org)
 * @version    $Revision: 1.1 $
 * @since      2.2
-->
<simple-methods>
    <!-- Shipment services -->
    <simple-method method-name="createShipment" short-description="Create Shipment">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipment you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="Shipment"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        
        <sequenced-id-to-env sequence-name="Shipment" env-name="sequencedId"/>
        <to-string field-name="sequencedId"/>
        <env-to-field env-name="sequencedId" field-name="shipmentId" map-name="newEntity"/>
        <field-to-result field-name="sequencedId" result-name="shipmentId"/>
        
        <!-- set the created and lastModified info -->
        <now-timestamp-to-env env-name="newEntity.createdDate"/>
        <field-to-field field-name="userLoginId" map-name="userLogin" to-field-name="createdByUserLogin" to-map-name="newEntity"/>
        <now-timestamp-to-env env-name="newEntity.lastModifiedDate"/>
        <field-to-field field-name="userLoginId" map-name="userLogin" to-field-name="lastModifiedByUserLogin" to-map-name="newEntity"/>

        <!-- if needed create some WorkEfforts and remember their IDs: 
            estimatedShipDate: estimatedShipWorkEffId
            estimatedArrivalDate: estimatedArrivalWorkEffId 
        -->
        <!-- always create the WorkEfforts, even if dates aren't specified yet; when they are they will be set in the update service... -->

        <!-- the Ship WorkEffort entity -->
        <string-to-field string="Shipment #${sequencedId} Ship" field-name="workEffortName" map-name="shipWorkEffortMap"/>
        <string-to-field string="EVENT" field-name="workEffortTypeId" map-name="shipWorkEffortMap"/>
        <string-to-field string="CAL_TENTATIVE" field-name="currentStatusId" map-name="shipWorkEffortMap"/>
        <field-to-field map-name="parameters" field-name="estimatedShipDate" to-field-name="estimatedStartDate" to-map-name="shipWorkEffortMap"/>
        <field-to-field map-name="parameters" field-name="estimatedShipDate" to-field-name="estimatedCompletionDate" to-map-name="shipWorkEffortMap"/>
        <field-to-field map-name="parameters" field-name="originFacilityId" to-field-name="facilityId" to-map-name="shipWorkEffortMap"/>
        <env-to-field env-name="userLogin.partyId" field-name="quickAssignPartyId" map-name="shipWorkEffortMap"/>
        <call-service service-name="createWorkEffort" in-map-name="shipWorkEffortMap">
            <result-to-field result-name="workEffortId" map-name="newEntity" field-name="estimatedShipWorkEffId"/>
        </call-service>
        <if-not-empty field-name="partyIdFrom" map-name="newEntity">
            <field-to-field field-name="estimatedShipWorkEffId" map-name="newEntity" to-field-name="workEffortId" to-map-name="assignPartyToWorkEffortShip"/>
            <field-to-field field-name="partyIdFrom" map-name="newEntity" to-field-name="partyId" to-map-name="assignPartyToWorkEffortShip"/>
            <string-to-field string="CAL_ATTENDEE" field-name="roleTypeId" map-name="assignPartyToWorkEffortShip"/>
            <string-to-field string="CAL_SENT" field-name="statusId" map-name="assignPartyToWorkEffortShip"/>
            <call-service service-name="assignPartyToWorkEffort" in-map-name="assignPartyToWorkEffortShip"/>
        </if-not-empty>
        
        <!-- the Arrival WorkEffort entity -->
        <string-to-field string="Shipment #${sequencedId} Arrival" field-name="workEffortName" map-name="arrivalWorkEffortMap"/>
        <string-to-field string="EVENT" field-name="workEffortTypeId" map-name="arrivalWorkEffortMap"/>
        <string-to-field string="CAL_TENTATIVE" field-name="currentStatusId" map-name="arrivalWorkEffortMap"/>
        <field-to-field map-name="parameters" field-name="estimatedArrivalDate" to-field-name="estimatedStartDate" to-map-name="arrivalWorkEffortMap"/>
        <field-to-field map-name="parameters" field-name="estimatedArrivalDate" to-field-name="estimatedCompletionDate" to-map-name="arrivalWorkEffortMap"/>
        <field-to-field map-name="parameters" field-name="destinationFacilityId" to-field-name="facilityId" to-map-name="arrivalWorkEffortMap"/>
        <env-to-field env-name="userLogin.partyId" field-name="quickAssignPartyId" map-name="arrivalWorkEffortMap"/>
        <call-service service-name="createWorkEffort" in-map-name="arrivalWorkEffortMap">
            <result-to-field result-name="workEffortId" map-name="newEntity" field-name="estimatedArrivalWorkEffId"/>
        </call-service>
        <if-not-empty field-name="partyIdTo" map-name="newEntity">
            <field-to-field field-name="estimatedArrivalWorkEffId" map-name="newEntity" to-field-name="workEffortId" to-map-name="assignPartyToWorkEffortArrival"/>
            <field-to-field field-name="partyIdTo" map-name="newEntity" to-field-name="partyId" to-map-name="assignPartyToWorkEffortArrival"/>
            <string-to-field string="CAL_ATTENDEE" field-name="roleTypeId" map-name="assignPartyToWorkEffortArrival"/>
            <string-to-field string="CAL_SENT" field-name="statusId" map-name="assignPartyToWorkEffortArrival"/>
            <call-service service-name="assignPartyToWorkEffort" in-map-name="assignPartyToWorkEffortArrival"/>
        </if-not-empty>

        <create-value value-name="newEntity"/>
        
        <!-- get the ShipmentStatus history started -->
        <if-not-empty field-name="statusId" map-name="newEntity">
            <make-value entity-name="ShipmentStatus" value-name="newStatusValue"/>
            <field-to-field field-name="statusId" map-name="newEntity" to-map-name="newStatusValue"/>
            <field-to-field field-name="shipmentId" map-name="newEntity" to-map-name="newStatusValue"/>
            <now-timestamp-to-env env-name="newStatusValue.statusDate"/>
            <create-value value-name="newStatusValue"/>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="updateShipment" short-description="Update Shipment">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipment you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Update Shipment" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusDelivered"/>

        <make-value value-name="lookupPKMap" entity-name="Shipment"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="Shipment" map-name="lookupPKMap" value-name="lookedUpValue"/>
        
        <if-not-empty field-name="parameters.statusId">
			<if-compare-field field-name="parameters.statusId" operator="not-equals" to-field-name="lookedUpValue.statusId">
                <!-- make sure a StatusValidChange record exists, if not return error -->
                <env-to-field env-name="lookedUpValue.statusId" field-name="statusId" map-name="checkStatusValidChangeMap"/>
                <env-to-field env-name="parameters.statusId" field-name="statusIdTo" map-name="checkStatusValidChangeMap"/>
                <find-by-primary-key entity-name="StatusValidChange" map-name="checkStatusValidChangeMap" value-name="checkStatusValidChange"/>
                <if-empty field-name="checkStatusValidChange">
                    <string-to-list string="ERROR: Changing the status from ${lookedUpValue.statusId} to ${parameters.statusId} is not allowed." list-name="error_list"/>
                </if-empty>
                
				<make-value entity-name="ShipmentStatus" value-name="newStatusValue"/>
				<field-to-field field-name="statusId" map-name="parameters" to-map-name="newStatusValue"/>
				<field-to-field field-name="shipmentId" map-name="parameters" to-map-name="newStatusValue"/>
				<now-timestamp-to-env env-name="newStatusValue.statusDate"/>
				<create-value value-name="newStatusValue"/>
			</if-compare-field>
        </if-not-empty>

        <!-- now finally check for errors -->
        <check-errors/>

        <!-- Check the pickup and delivery dates for changes and update the corresponding WorkEfforts -->
        <if>
            <condition>
            	<or>
					<and>
						<not><if-empty field-name="estimatedShipDate" map-name="parameters"/></not>
						<if-compare-field field-name="parameters.estimatedShipDate" operator="not-equals" to-field-name="lookedUpValue.estimatedShipDate"/>
					</and>
					<and>
						<not><if-empty field-name="originFacilityId" map-name="parameters"/></not>
						<if-compare-field field-name="parameters.originFacilityId" operator="not-equals" to-field-name="lookedUpValue.originFacilityId"/>
					</and>
            	</or>
            </condition>
            <then>
                <field-to-field field-name="estimatedShipWorkEffId" map-name="lookedUpValue" to-field-name="workEffortId" to-map-name="estimatedShipWorkEffortMap"/>
                <find-by-primary-key entity-name="WorkEffort" map-name="estimatedShipWorkEffortMap" value-name="estimatedShipWorkEffort"/>
                <field-to-field map-name="parameters" field-name="estimatedShipDate" to-field-name="estimatedStartDate" to-map-name="estimatedShipWorkEffort"/>
                <field-to-field map-name="parameters" field-name="estimatedShipDate" to-field-name="estimatedCompletionDate" to-map-name="estimatedShipWorkEffort"/>
                <field-to-field map-name="parameters" field-name="originFacilityId" to-field-name="facilityId" to-map-name="estimatedShipWorkEffort"/>
                <set-service-fields service-name="updateWorkEffort" map-name="estimatedShipWorkEffort" to-map-name="estimatedShipWorkEffortUpdMap"/>
                <call-service service-name="updateWorkEffort" in-map-name="estimatedShipWorkEffortUpdMap"/>
            </then>
        </if>
        <if>
            <condition>
            	<or>
					<and>
						<not><if-empty field-name="estimatedArrivalDate" map-name="parameters"/></not>
						<if-compare-field field-name="parameters.estimatedArrivalDate" operator="not-equals" to-field-name="lookedUpValue.estimatedArrivalDate"/>
					</and>
					<and>
						<not><if-empty field-name="destinationFacilityId" map-name="parameters"/></not>
						<if-compare-field field-name="parameters.destinationFacilityId" operator="not-equals" to-field-name="lookedUpValue.destinationFacilityId"/>
					</and>
            	</or>
            </condition>
            <then>
                <field-to-field field-name="estimatedArrivalWorkEffId" map-name="lookedUpValue" to-field-name="workEffortId" to-map-name="estimatedArrivalWorkEffortMap"/>
                <find-by-primary-key entity-name="WorkEffort" map-name="estimatedArrivalWorkEffortMap" value-name="estimatedArrivalWorkEffort"/>
                <field-to-field map-name="parameters" field-name="estimatedArrivalDate" to-field-name="estimatedStartDate" to-map-name="estimatedArrivalWorkEffort"/>
                <field-to-field map-name="parameters" field-name="estimatedArrivalDate" to-field-name="estimatedCompletionDate" to-map-name="estimatedArrivalWorkEffort"/>
                <field-to-field map-name="parameters" field-name="destinationFacilityId" to-field-name="facilityId" to-map-name="estimatedArrivalWorkEffort"/>
                <set-service-fields service-name="updateWorkEffort" map-name="estimatedArrivalWorkEffort" to-map-name="estimatedArrivalWorkEffortUpdMap"/>
                <call-service service-name="updateWorkEffort" in-map-name="estimatedArrivalWorkEffortUpdMap"/>
            </then>
        </if>
        
        <!-- if the partyIdTo or partyIdFrom has changed, add WEPAs -->
        <if>
            <condition>
                <and>
                    <not><if-empty field-name="parameters.partyIdFrom"/></not>
                    <if-compare-field field-name="parameters.partyIdFrom" operator="not-equals" to-field-name="lookedUpValue.partyIdFrom"/>
                </and>
            </condition>
            <then>
                <field-to-field field-name="estimatedShipWorkEffId" map-name="lookedUpValue" to-field-name="workEffortId" to-map-name="assignPartyToWorkEffortShip"/>
                <field-to-field field-name="partyIdFrom" map-name="parameters" to-field-name="partyId" to-map-name="assignPartyToWorkEffortShip"/>
                <find-by-and entity-name="WorkEffortPartyAssignment" list-name="existingShipWepas" map-name="assignPartyToWorkEffortShip"/>
                <filter-list-by-date list-name="existingShipWepas"/>
                <if-empty field-name="existingShipWepas">
                    <string-to-field string="CAL_ATTENDEE" field-name="roleTypeId" map-name="assignPartyToWorkEffortShip"/>
                    <string-to-field string="CAL_SENT" field-name="statusId" map-name="assignPartyToWorkEffortShip"/>
                    <call-service service-name="assignPartyToWorkEffort" in-map-name="assignPartyToWorkEffortShip"/>
                </if-empty>
            </then>
        </if>
        <if>
            <condition>
                <and>
                    <not><if-empty field-name="parameters.partyIdTo"/></not>
                    <if-compare-field field-name="parameters.partyIdTo" operator="not-equals" to-field-name="lookedUpValue.partyIdTo"/>
                </and>
            </condition>
            <then>
                <field-to-field field-name="estimatedArrivalWorkEffId" map-name="lookedUpValue" to-field-name="workEffortId" to-map-name="assignPartyToWorkEffortArrival"/>
                <field-to-field field-name="partyIdTo" map-name="parameters" to-field-name="partyId" to-map-name="assignPartyToWorkEffortArrival"/>
                <find-by-and entity-name="WorkEffortPartyAssignment" list-name="existingArrivalWepas" map-name="assignPartyToWorkEffortArrival"/>
                <filter-list-by-date list-name="existingArrivalWepas"/>
                <if-empty field-name="existingArrivalWepas">
                    <string-to-field string="CAL_ATTENDEE" field-name="roleTypeId" map-name="assignPartyToWorkEffortArrival"/>
                    <string-to-field string="CAL_SENT" field-name="statusId" map-name="assignPartyToWorkEffortArrival"/>
                    <call-service service-name="assignPartyToWorkEffort" in-map-name="assignPartyToWorkEffortArrival"/>
                </if-empty>
            </then>
        </if>

        <!-- finally before setting nonpk fields, set the oldStatusId, oldPrimaryOrderId, oldOriginFacilityId, oldDestinationFacilityId -->
        <field-to-result field-name="statusId" map-name="lookedUpValue" result-name="oldStatusId"/>
        <field-to-result field-name="primaryOrderId" map-name="lookedUpValue" result-name="oldPrimaryOrderId"/>
        <field-to-result field-name="originFacilityId" map-name="lookedUpValue" result-name="oldOriginFacilityId"/>
        <field-to-result field-name="destinationFacilityId" map-name="lookedUpValue" result-name="oldDestinationFacilityId"/>

        <!-- now that all changes have been checked, set the nonpks -->
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <now-timestamp-to-env env-name="lookedUpValue.lastModifiedDate"/>
        <field-to-field field-name="userLoginId" map-name="userLogin" to-field-name="lastModifiedByUserLogin" to-map-name="lookedUpValue"/>

        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteShipment" short-description="Delete Shipment">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipment you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete Shipment" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="Shipment"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="Shipment" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="setShipmentSettingsFromPrimaryOrder" short-description="Set Shipment Settings From Primary Order">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run setShipmentSettingsFromPrimaryOrder you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run setShipmentSettingsFromPrimaryOrder you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Set Shipment Settings From Primary Order" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <!-- on Shipment set partyIdFrom, partyIdTo (vendorPartyId), originContactMechId, destinationContactMechId, estimatedShipCost -->
        <field-to-field field-name="shipmentId" map-name="parameters" to-map-name="lookupShipmentPKMap"/>
        <find-by-primary-key entity-name="Shipment" map-name="lookupShipmentPKMap" value-name="shipment"/>

        <if-empty field-name="primaryOrderId" map-name="shipment">
            <!-- No primryOrderId specified, don't do anything -->
            <return response-code="success"/>
        </if-empty>

        <field-to-field field-name="primaryOrderId" map-name="shipment" to-field-name="orderId" to-map-name="lookupOrderHeaderPKMap"/>
        <find-by-primary-key entity-name="OrderHeader" map-name="lookupOrderHeaderPKMap" value-name="orderHeader"/>
        
        <if-compare field-name="orderTypeId" map-name="orderHeader" operator="equals" value="SALES_ORDER">
            <string-to-field string="SALES_SHIPMENT" field-name="shipmentTypeId" map-name="shipment"/>
        </if-compare>
        <if-compare field-name="orderTypeId" map-name="orderHeader" operator="equals" value="PURCHASE_ORDER">
            <string-to-field string="PURCHASE_SHIPMENT" field-name="shipmentTypeId" map-name="shipment"/>
        </if-compare>
        
        <!-- set the facility if we are from a store with a single facility -->
        <if-compare field-name="shipmentTypeId" map-name="shipment" operator="equals" value="SALES_SHIPMENT">
        	<if-not-empty field-name="productStoreId" map-name="orderHeader">
        		<field-to-field field-name="productStoreId" map-name="orderHeader" to-map-name="storeLookup"/>
        		<find-by-primary-key entity-name="ProductStore" map-name="storeLookup" value-name="productStore"/>
        		<if-compare field-name="oneInventoryFacility" map-name="productStore" operator="equals" value="Y">
        			<field-to-field field-name="inventoryFacilityId" map-name="productStore" to-field-name="originFacilityId" to-map-name="shipment"/>
        		</if-compare>
        	</if-not-empty>
        </if-compare>
        
        <!-- partyIdFrom, partyIdTo (vendorPartyId) - NOTE: these work the same for Purchase and Sales Orders... -->
        <find-by-and entity-name="OrderRole" map-name="lookupOrderHeaderPKMap" list-name="orderRoles"/>
        
        <!-- From: SHIP_FROM_VENDOR -->
        <if-empty field-name="partyIdFrom" map-name="shipment">
            <string-to-field string="SHIP_FROM_VENDOR" field-name="roleTypeId" map-name="limitRoleMap"/>
            <filter-list-by-and list-name="orderRoles" map-name="limitRoleMap" to-list-name="limitOrderRoles"/>
            <first-from-list entry-name="limitOrderRole" list-name="limitOrderRoles"/>
            <if-not-empty field-name="limitOrderRole">
                <field-to-field field-name="partyId" map-name="limitOrderRole" to-field-name="partyIdFrom" to-map-name="shipment"/>
            </if-not-empty>
            <clear-field field-name="limitRoleMap"/><clear-field field-name="limitOrderRoles"/><clear-field field-name="limitOrderRole"/>
        </if-empty>
        <!-- From: VENDOR -->
        <if-empty field-name="partyIdFrom" map-name="shipment">
            <string-to-field string="VENDOR" field-name="roleTypeId" map-name="limitRoleMap"/>
            <filter-list-by-and list-name="orderRoles" map-name="limitRoleMap" to-list-name="limitOrderRoles"/>
            <first-from-list entry-name="limitOrderRole" list-name="limitOrderRoles"/>
            <if-not-empty field-name="limitOrderRole">
                <field-to-field field-name="partyId" map-name="limitOrderRole" to-field-name="partyIdFrom" to-map-name="shipment"/>
            </if-not-empty>
            <clear-field field-name="limitRoleMap"/><clear-field field-name="limitOrderRoles"/><clear-field field-name="limitOrderRole"/>
        </if-empty>

        <!-- To: SHIP_TO_CUSTOMER -->
        <if-empty field-name="partyIdTo" map-name="shipment">
            <string-to-field string="SHIP_TO_CUSTOMER" field-name="roleTypeId" map-name="limitRoleMap"/>
            <filter-list-by-and list-name="orderRoles" map-name="limitRoleMap" to-list-name="limitOrderRoles"/>
            <first-from-list entry-name="limitOrderRole" list-name="limitOrderRoles"/>
            <if-not-empty field-name="limitOrderRole">
                <field-to-field field-name="partyId" map-name="limitOrderRole" to-field-name="partyIdTo" to-map-name="shipment"/>
            </if-not-empty>
            <clear-field field-name="limitRoleMap"/><clear-field field-name="limitOrderRoles"/><clear-field field-name="limitOrderRole"/>
        </if-empty>
        <!-- To: CUSTOMER -->
        <if-empty field-name="partyIdTo" map-name="shipment">
            <string-to-field string="CUSTOMER" field-name="roleTypeId" map-name="limitRoleMap"/>
            <filter-list-by-and list-name="orderRoles" map-name="limitRoleMap" to-list-name="limitOrderRoles"/>
            <first-from-list entry-name="limitOrderRole" list-name="limitOrderRoles"/>
            <if-not-empty field-name="limitOrderRole">
                <field-to-field field-name="partyId" map-name="limitOrderRole" to-field-name="partyIdTo" to-map-name="shipment"/>
            </if-not-empty>
            <clear-field field-name="limitRoleMap"/><clear-field field-name="limitOrderRoles"/><clear-field field-name="limitOrderRole"/>
        </if-empty>
        
        <find-by-and entity-name="OrderContactMech" map-name="lookupOrderHeaderPKMap" list-name="orderContactMechs"/>
        <!-- destinationContactMechId -->
        <if-empty field-name="destinationContactMechId" map-name="shipment">
            <string-to-field string="SHIPPING_LOCATION" field-name="contactMechPurposeTypeId" map-name="destinationContactMap"/>
            <filter-list-by-and list-name="orderContactMechs" map-name="destinationContactMap" to-list-name="destinationOrderContactMechs"/>
            <first-from-list entry-name="destinationOrderContactMech" list-name="destinationOrderContactMechs"/>
            <if-not-empty field-name="destinationOrderContactMech">
                <field-to-field field-name="contactMechId" map-name="destinationOrderContactMech" to-field-name="destinationContactMechId" to-map-name="shipment"/>
            </if-not-empty>
        </if-empty>
        <!-- originContactMechId -->
        <if-empty field-name="originContactMechId" map-name="shipment">
            <string-to-field string="SHIP_ORIG_LOCATION" field-name="contactMechPurposeTypeId" map-name="originContactMap"/>
            <filter-list-by-and list-name="orderContactMechs" map-name="originContactMap" to-list-name="originOrderContactMechs"/>
            <first-from-list entry-name="originOrderContactMech" list-name="originOrderContactMechs"/>
            <if-not-empty field-name="originOrderContactMech">
                <field-to-field field-name="contactMechId" map-name="originOrderContactMech" to-field-name="originContactMechId" to-map-name="shipment"/>
            </if-not-empty>
        </if-empty>

        <!-- destinationTelecomNumberId -->
        <if-empty field-name="destinationTelecomNumberId" map-name="shipment">
            <string-to-field string="PHONE_SHIPPING" field-name="contactMechPurposeTypeId" map-name="destTelecomOrderContactMechMap"/>
            <filter-list-by-and list-name="orderContactMechs" map-name="destTelecomOrderContactMechMap" to-list-name="destTelecomOrderContactMechs"/>
            <first-from-list entry-name="destTelecomOrderContactMech" list-name="destTelecomOrderContactMechs"/>
            <if-not-empty field-name="destTelecomOrderContactMech">
                <field-to-field field-name="contactMechId" map-name="destTelecomOrderContactMech" to-field-name="destinationTelecomNumberId" to-map-name="shipment"/>
            </if-not-empty>
        </if-empty>
        <!-- originTelecomNumberId -->
        <if-empty field-name="originTelecomNumberId" map-name="shipment">
            <string-to-field string="PHONE_SHIP_ORIG" field-name="contactMechPurposeTypeId" map-name="originTelecomOrderContactMechMap"/>
            <filter-list-by-and list-name="orderContactMechs" map-name="originTelecomOrderContactMechMap" to-list-name="originTelecomOrderContactMechs"/>
            <first-from-list entry-name="originTelecomOrderContactMech" list-name="originTelecomOrderContactMechs"/>
            <if-not-empty field-name="originTelecomOrderContactMech">
                <field-to-field field-name="contactMechId" map-name="originTelecomOrderContactMech" to-field-name="originTelecomNumberId" to-map-name="shipment"/>
            </if-not-empty>
        </if-empty>
        
        <if-empty field-name="estimatedShipCost" map-name="shipment">
            <call-bsh><![CDATA[
                    import org.ofbiz.commonapp.order.order.OrderReadHelper;
                
                    orderReadHelper = new OrderReadHelper(orderHeader);
                    orderItems = orderReadHelper.getValidOrderItems();
                    orderAdjustments = orderReadHelper.getAdjustments();
                    orderHeaderAdjustments = orderReadHelper.getOrderHeaderAdjustments();
                    orderSubTotal = orderReadHelper.getOrderItemsSubTotal();
                   
                    shippingAmount = OrderReadHelper.getAllOrderItemsAdjustmentsTotal(orderItems, orderAdjustments, false, false, true);
                    shippingAmount += OrderReadHelper.calcOrderAdjustments(orderHeaderAdjustments, orderSubTotal, false, false, true);
                    //org.ofbiz.core.util.Debug.log("shippingAmmount=" + shippingAmount);
                    shipment.put("estimatedShipCost", shippingAmount);
            ]]></call-bsh>
        </if-empty>
        
        <!-- create a ShipmentRouteSegment with originFacilityId (if set on Shipment), destContactMechId, 
            and from OrderShipmentPreference shipmentMethodTypeId, carrierPartyId, etc -->
        <field-to-field field-name="shipmentId" map-name="shipment" to-map-name="shipmentRouteSegmentMap"/>
        <find-by-and entity-name="ShipmentRouteSegment" map-name="shipmentRouteSegmentMap" list-name="shipmentRouteSegments"/>
        <if-empty field-name="shipmentRouteSegments">
            <!-- estimatedShipDate, estimatedArrivalDate -->
            <field-to-field field-name="estimatedShipDate" map-name="shipment" to-field-name="estimatedStartDate" to-map-name="shipmentRouteSegmentMap"/>
            <field-to-field field-name="estimatedArrivalDate" map-name="shipment" to-field-name="estimatedArrivalDate" to-map-name="shipmentRouteSegmentMap"/>
    
            <field-to-field field-name="originFacilityId" map-name="shipment" to-map-name="shipmentRouteSegmentMap"/>
            <field-to-field field-name="originContactMechId" map-name="shipment" to-map-name="shipmentRouteSegmentMap"/>
            <field-to-field field-name="originTelecomNumberId" map-name="shipment" to-map-name="shipmentRouteSegmentMap"/>
            <field-to-field field-name="destinationFacilityId" map-name="shipment" to-field-name="destFacilityId" to-map-name="shipmentRouteSegmentMap"/>
            <field-to-field field-name="destinationContactMechId" map-name="shipment" to-field-name="destContactMechId" to-map-name="shipmentRouteSegmentMap"/>
            <field-to-field field-name="destinationTelecomNumberId" map-name="shipment" to-field-name="destTelecomNumberId" to-map-name="shipmentRouteSegmentMap"/>
    
            <field-to-field field-name="primaryOrderId" map-name="shipment" to-field-name="orderId" to-map-name="lookupOrderSpPKMap"/>
            <string-to-field string="_NA_" field-name="orderItemSeqId" map-name="lookupOrderSpPKMap"/>
            <find-by-primary-key entity-name="OrderShipmentPreference" map-name="lookupOrderSpPKMap" value-name="orderShipmentPreference"/>
            <if-not-empty field-name="orderShipmentPreference">
                <field-to-field field-name="carrierPartyId" map-name="orderShipmentPreference" to-map-name="shipmentRouteSegmentMap"/>
                <field-to-field field-name="shipmentMethodTypeId" map-name="orderShipmentPreference" to-map-name="shipmentRouteSegmentMap"/>
            </if-not-empty>
            <call-service service-name="createShipmentRouteSegment" in-map-name="shipmentRouteSegmentMap"/>
        </if-empty>

        <set-service-fields service-name="updateShipment" map-name="shipment" to-map-name="shipmentUpdateMap"/>
        <call-service service-name="updateShipment" in-map-name="shipmentUpdateMap"/>
    </simple-method>
    <simple-method method-name="setShipmentSettingsFromFacilities" short-description="Set Shipment Settings From Facilities">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run setShipmentSettingsFromFacilities you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run setShipmentSettingsFromFacilities you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Set Shipment Settings From Facilities" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <field-to-field field-name="shipmentId" map-name="parameters" to-map-name="lookupShipmentPKMap"/>
        <find-by-primary-key entity-name="Shipment" map-name="lookupShipmentPKMap" value-name="shipment"/>
        
        <clone-value value-name="shipment" new-value-name="shipmentCopy"/>
        
        <string-to-list string="-fromDate" list-name="descendingFromDateOrder"/>
        <if-not-empty field-name="originFacilityId" map-name="shipment">
	        <if-empty field-name="originContactMechId" map-name="shipment">
	            <field-to-field field-name="originFacilityId" map-name="shipment" to-field-name="facilityId" to-map-name="findFcmpMap"/>
	            <string-to-field string="SHIP_ORIG_LOCATION" field-name="contactMechPurposeTypeId" map-name="findFcmpMap"/>
	            <find-by-and entity-name="FacilityContactMechPurpose" map-name="findFcmpMap" order-by-list-name="descendingFromDateOrder" list-name="facilityContactMechPurposes"/>
	            <filter-list-by-date list-name="facilityContactMechPurposes"/>
	            <first-from-list entry-name="facilityContactMechPurpose" list-name="facilityContactMechPurposes"/>
	            <field-to-field field-name="contactMechId" map-name="facilityContactMechPurpose" to-field-name="originContactMechId" to-map-name="shipment"/>
	        </if-empty>
	        <if-empty field-name="originTelecomNumberId" map-name="shipment">
	            <field-to-field field-name="originFacilityId" map-name="shipment" to-field-name="facilityId" to-map-name="findFcmpMap"/>
	            <string-to-field string="PHONE_SHIP_ORIG" field-name="contactMechPurposeTypeId" map-name="findFcmpMap"/>
	            <find-by-and entity-name="FacilityContactMechPurpose" map-name="findFcmpMap" order-by-list-name="descendingFromDateOrder" list-name="facilityContactMechPurposes"/>
	            <filter-list-by-date list-name="facilityContactMechPurposes"/>
	            <first-from-list entry-name="facilityContactMechPurpose" list-name="facilityContactMechPurposes"/>
	            <field-to-field field-name="contactMechId" map-name="facilityContactMechPurpose" to-field-name="originTelecomNumberId" to-map-name="shipment"/>
	        </if-empty>
        </if-not-empty>
        <if-not-empty field-name="destinationFacilityId" map-name="shipment">
	        <if-empty field-name="destinationContactMechId" map-name="shipment">
	            <field-to-field field-name="destinationFacilityId" map-name="shipment" to-field-name="facilityId" to-map-name="findFcmpMap"/>
	            <string-to-field string="SHIPPING_LOCATION" field-name="contactMechPurposeTypeId" map-name="findFcmpMap"/>
	            <find-by-and entity-name="FacilityContactMechPurpose" map-name="findFcmpMap" order-by-list-name="descendingFromDateOrder" list-name="facilityContactMechPurposes"/>
	            <filter-list-by-date list-name="facilityContactMechPurposes"/>
	            <first-from-list entry-name="facilityContactMechPurpose" list-name="facilityContactMechPurposes"/>
	            <field-to-field field-name="contactMechId" map-name="facilityContactMechPurpose" to-field-name="destinationContactMechId" to-map-name="shipment"/>
	        </if-empty>
	        <if-empty field-name="destinationTelecomNumberId" map-name="shipment">
	            <field-to-field field-name="destinationFacilityId" map-name="shipment" to-field-name="facilityId" to-map-name="findFcmpMap"/>
	            <string-to-field string="PHONE_SHIPPING" field-name="contactMechPurposeTypeId" map-name="findFcmpMap"/>
	            <find-by-and entity-name="FacilityContactMechPurpose" map-name="findFcmpMap" order-by-list-name="descendingFromDateOrder" list-name="facilityContactMechPurposes"/>
	            <filter-list-by-date list-name="facilityContactMechPurposes"/>
	            <first-from-list entry-name="facilityContactMechPurpose" list-name="facilityContactMechPurposes"/>
	            <field-to-field field-name="contactMechId" map-name="facilityContactMechPurpose" to-field-name="destinationTelecomNumberId" to-map-name="shipment"/>
	        </if-empty>
	    </if-not-empty>
	    
	    <if-compare-field field-name="shipment" operator="not-equals" to-field-name="shipmentCopy">
	        <set-service-fields service-name="updateShipment" map-name="shipment" to-map-name="shipmentUpdateMap"/>
	        <call-service service-name="updateShipment" in-map-name="shipmentUpdateMap"/>
	    </if-compare-field>
    </simple-method>
    <simple-method method-name="sendShipmentScheduledNotification" short-description="Send Shipment Scheduled Notification">
        <check-permission permission="FACILITY" action="_CREATE">
            <alt-permission permission="FACILITY" action="_UPDATE"/>
            <fail-message message="Security Error: to run createShipmentItem you must have the FACILITY_CREATE, FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value entity-name="Shipment" value-name="shipment"/>
        <set-pk-fields value-name="shipment" map-name="parameters"/>
        <find-by-primary-key map-name="shipment" value-name="shipment"/>
        
        <!-- find email address for currently logged in user, set as sendFrom -->
        <field-to-field field-name="partyId" map-name="userLogin" to-map-name="curUserPcmFindMap"/>
        <string-to-field string="EMAIL_ADDRESS" field-name="contactMechTypeId" map-name="curUserPcmFindMap"/>
        <find-by-and entity-name="PartyAndContactMech" map-name="curUserPcmFindMap" list-name="curUserPartyAndContactMechs"/>
        <first-from-list entry-name="curUserPartyAndContactMech" list-name="curUserPartyAndContactMechs"/>
        <string-append field-name="sendEmailMap.sendFrom" string="${curUserPartyAndContactMech.infoString}" prefix=","/>
        
        <!-- find email addresses of partyIdFrom, set as sendTo -->
        <env-to-env env-name="shipment.partyIdFrom" to-env-name="sendToPartyIdMap.${shipment.partyIdFrom}"/>

        <!-- find email addresses of all parties not equal to partyIdFrom in SUPPLIER_AGENT roleTypeId associated with primary order, set as sendTo -->
        <field-to-field field-name="primaryOrderId" map-name="shipment" to-field-name="orderId" to-map-name="supplierAgentOrderRoleFindMap"/>
        <string-to-field string="SUPPLIER_AGENT" field-name="roleTypeId" map-name="supplierAgentOrderRoleFindMap"/>
        <find-by-and entity-name="OrderRole" map-name="supplierAgentOrderRoleFindMap" list-name="supplierAgentOrderRoles"/>
        <iterate entry-name="supplierAgentOrderRole" list-name="supplierAgentOrderRoles">
            <env-to-env env-name="supplierAgentOrderRole.partyId" to-env-name="sendToPartyIdMap.${supplierAgentOrderRole.partyId}"/>
        </iterate>
        
        <!-- go through all send to parties and get email addresses -->
        <iterate-map key-name="sendToPartyId" value-name="sendToPartyIdValue" map-name="sendToPartyIdMap">
            <env-to-field env-name="sendToPartyId" field-name="partyId" map-name="sendToPartyPcmFindMap"/>
            <string-to-field string="EMAIL_ADDRESS" field-name="contactMechTypeId" map-name="sendToPartyPcmFindMap"/>
            <find-by-and entity-name="PartyAndContactMech" map-name="sendToPartyPcmFindMap" list-name="sendToPartyPartyAndContactMechs"/>
            <iterate entry-name="sendToPartyPartyAndContactMech" list-name="sendToPartyPartyAndContactMechs">
                <string-append field-name="sendEmailMap.sendTo" string="${sendToPartyPartyAndContactMech.infoString}" prefix=","/>
            </iterate>
        </iterate-map>
        
        <!-- set subject, contentType, templateName, templateData -->
        <string-to-field string="Scheduled Notification for Shipment ${shipment.shipmentId}" field-name="subject" map-name="sendEmailMap"/>
        <if-not-empty field-name="shipment.primaryOrderId">
            <string-append string=" for Primary Order ${shipment.primaryOrderId}" field-name="subject" map-name="sendEmailMap"/>
        </if-not-empty>
        <string-to-field string="text/html" field-name="contentType" map-name="sendEmailMap"/>
        <string-to-field string="org/ofbiz/commonapp/shipment/shipment/ShipmentScheduledNotice.ftl" field-name="templateName" map-name="sendEmailMap"/>
        <env-to-env env-name="shipment" to-env-name="sendEmailMap.templateData.shipment"/>
        
        <!-- call sendGenericNotificationEmail service, if enough information was found -->
        <log level="info" message="Sending generic notification email (if all info is in place): ${sendEmailMap}"/>
        <if>
            <condition>
                <and>
	                <not><if-empty field-name="sendTo" map-name="sendEmailMap"/></not>
	                <not><if-empty field-name="sendFrom" map-name="sendEmailMap"/></not>
                </and>
            </condition>
            <then>
                <call-service service-name="sendGenericNotificationEmail" in-map-name="sendEmailMap"/>
            </then>
            <else>
                <log level="error" message="Insufficient data to send notice email: ${sendEmailMap}"/>
            </else>
        </if>
    </simple-method>

    <!-- ShipmentItem services -->
    <simple-method method-name="createShipmentItem" short-description="Create ShipmentItem">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipmentItem you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Create ShipmentItem" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentItem"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <!-- if no shipmentItemSeqId, generate one based on existing items, ie one greater than the current higher number -->
        <make-next-seq-id value-name="newEntity" seq-field-name="shipmentItemSeqId"/>
        <field-to-result field-name="shipmentItemSeqId" map-name="newEntity" result-name="shipmentItemSeqId"/>
        
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateShipmentItem" short-description="Update ShipmentItem">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipmentItem you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Update ShipmentItem" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentItem"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentItem" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteShipmentItem" short-description="Delete ShipmentItem">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipmentItem you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete ShipmentItem" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentItem"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentItem" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ShipmentPackage services -->
    <simple-method method-name="createShipmentPackage" short-description="Create ShipmentPackage">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipmentPackage you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Create ShipmentPackage" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentPackage"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

		<if-compare value="New" operator="equals" field-name="shipmentPackageSeqId" map-name="newEntity">
			<clear-field field-name="shipmentPackageSeqId" map-name="newEntity"/>
		</if-compare>

        <!-- if no shipmentPackageSeqId, generate one based on existing items, ie one greater than the current higher number -->
        <make-next-seq-id value-name="newEntity" seq-field-name="shipmentPackageSeqId"/>
        <field-to-result field-name="shipmentPackageSeqId" map-name="newEntity" result-name="shipmentPackageSeqId"/>
        
        <now-timestamp-to-env env-name="newEntity.dateCreated"/>
        
        <create-value value-name="newEntity"/>

		<field-to-env map-name="newEntity" env-name="shipmentId"/>
		<field-to-env map-name="newEntity" env-name="shipmentPackageSeqId"/>
        <call-simple-method method-name="ensurePackageRouteSeg"/>
    </simple-method>
    <simple-method method-name="updateShipmentPackage" short-description="Update ShipmentPackage">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipmentPackage you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Update ShipmentPackage" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusShipped"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentPackage"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackage" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
        
		<field-to-env map-name="lookedUpValue" env-name="shipmentId"/>
		<field-to-env map-name="lookedUpValue" env-name="shipmentPackageSeqId"/>
        <call-simple-method method-name="ensurePackageRouteSeg"/>
    </simple-method>
    <simple-method method-name="deleteShipmentPackage" short-description="Delete ShipmentPackage">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipmentPackage you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete ShipmentPackage" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentPackage"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackage" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="ensurePackageRouteSeg" short-description="Ensure ShipmentPackageRouteSeg exists for all RouteSegments for this Package">
        <env-to-field env-name="shipmentId" map-name="lookupRouteSegmentsMap"/>
        <find-by-and entity-name="ShipmentRouteSegment" map-name="lookupRouteSegmentsMap" list-name="shipmentRouteSegments"/>
        <iterate entry-name="shipmentRouteSegment" list-name="shipmentRouteSegments">
	        <env-to-field env-name="shipmentId" map-name="checkShipmentPackageRouteSegMap"/>
	        <env-to-field env-name="shipmentPackageSeqId" map-name="checkShipmentPackageRouteSegMap"/>
            <field-to-field field-name="shipmentRouteSegmentId" map-name="shipmentRouteSegment" to-map-name="checkShipmentPackageRouteSegMap"/>
            <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map-name="checkShipmentPackageRouteSegMap" value-name="checkShipmentPackageRouteSeg"/>
            <if-empty field-name="checkShipmentPackageRouteSeg">
                <call-service service-name="createShipmentPackageRouteSeg" in-map-name="checkShipmentPackageRouteSegMap">
                </call-service>
            </if-empty>
        </iterate>
    </simple-method>

    <!-- ShipmentPackageContent services -->
    <simple-method method-name="createShipmentPackageContent" short-description="Create ShipmentPackageContent">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipmentPackageContent you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Create ShipmentPackageContent" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentPackageContent"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateShipmentPackageContent" short-description="Update ShipmentPackageContent">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipmentPackageContent you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Update ShipmentPackageContent" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentPackageContent"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackageContent" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteShipmentPackageContent" short-description="Delete ShipmentPackageContent">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipmentPackageContent you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete ShipmentPackageContent" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentPackageContent"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackageContent" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ShipmentPackageRouteSeg services -->
    <simple-method method-name="createShipmentPackageRouteSeg" short-description="Create ShipmentPackageRouteSeg">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipmentPackageRouteSeg you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentPackageRouteSeg"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateShipmentPackageRouteSeg" short-description="Update ShipmentPackageRouteSeg">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipmentPackageRouteSeg you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentPackageRouteSeg"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteShipmentPackageRouteSeg" short-description="Delete ShipmentPackageRouteSeg">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipmentPackageRouteSeg you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete ShipmentPackageRouteSeg" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentPackageRouteSeg"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ShipmentContactMech services -->
    <simple-method method-name="createShipmentContactMech" short-description="Create ShipmentContactMech">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipmentContactMech you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentContactMech"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateShipmentContactMech" short-description="Update ShipmentContactMech">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipmentContactMech you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentContactMech"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentContactMech" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteShipmentContactMech" short-description="Delete ShipmentContactMech">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipmentContactMech you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete ShipmentContactMech" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentContactMech"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentContactMech" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ShipmentRouteSegment services -->
    <simple-method method-name="createShipmentRouteSegment" short-description="Create ShipmentRouteSegment">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createShipmentRouteSegment you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Create ShipmentRouteSegment" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentRouteSegment"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <!-- if no shipmentRouteSegmentSeqId, generate one based on existing items, ie one greater than the current higher number -->
        <make-next-seq-id value-name="newEntity" seq-field-name="shipmentRouteSegmentId"/>
        <field-to-result field-name="shipmentRouteSegmentId" map-name="newEntity" result-name="shipmentRouteSegmentId"/>
        
        <if-empty field-name="carrierServiceStatusId" map-name="newEntity">
            <string-to-field string="SHRSCS_NOT_STARTED" field-name="carrierServiceStatusId" map-name="newEntity"/>
        </if-empty>
        
        <create-value value-name="newEntity"/>

		<field-to-env map-name="newEntity" env-name="shipmentId"/>
		<field-to-env map-name="newEntity" env-name="shipmentRouteSegmentId"/>
        <call-simple-method method-name="ensureRouteSegPackage"/>
    </simple-method>
    <simple-method method-name="updateShipmentRouteSegment" short-description="Update ShipmentRouteSegment">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run updateShipmentRouteSegment you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Update ShipmentRouteSegment" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusDelivered"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentRouteSegment"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentRouteSegment" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>

        <if-empty field-name="carrierServiceStatusId" map-name="newEntity">
            <string-to-field string="SHRSCS_NOT_STARTED" field-name="carrierServiceStatusId" map-name="newEntity"/>
        </if-empty>
        
        <store-value value-name="lookedUpValue"/>

		<field-to-env map-name="lookedUpValue" env-name="shipmentId"/>
		<field-to-env map-name="lookedUpValue" env-name="shipmentRouteSegmentId"/>
        <call-simple-method method-name="ensureRouteSegPackage"/>
    </simple-method>
    <simple-method method-name="deleteShipmentRouteSegment" short-description="Delete ShipmentRouteSegment">
        <check-permission permission="FACILITY" action="_DELETE">
            <fail-message message="Security Error: to run deleteShipmentRouteSegment you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <string-to-field string="Delete ShipmentRouteSegment" field-name="operationName"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentRouteSegment"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentRouteSegment" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="ensureRouteSegPackage" short-description="Ensure ShipmentPackageRouteSeg exists for all Packages for this RouteSegment">
        <env-to-field env-name="shipmentId" map-name="lookupPackagesMap"/>
        <find-by-and entity-name="ShipmentPackage" map-name="lookupPackagesMap" list-name="shipmentPackages"/>
        <iterate entry-name="shipmentPackage" list-name="shipmentPackages">
	        <env-to-field env-name="shipmentId" map-name="checkShipmentPackageRouteSegMap"/>
	        <env-to-field env-name="shipmentRouteSegmentId" map-name="checkShipmentPackageRouteSegMap"/>
            <field-to-field field-name="shipmentPackageSeqId" map-name="shipmentPackage" to-map-name="checkShipmentPackageRouteSegMap"/>
            <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map-name="checkShipmentPackageRouteSegMap" value-name="checkShipmentPackageRouteSeg"/>
            <if-empty field-name="checkShipmentPackageRouteSeg">
                <call-service service-name="createShipmentPackageRouteSeg" in-map-name="checkShipmentPackageRouteSegMap">
                </call-service>
            </if-empty>
        </iterate>
    </simple-method>

    <!-- Check the Status of a Shipment to see if it can be changed - meant to be called in-line -->
    <simple-method method-name="checkCanChangeShipmentStatusPacked" short-description="Check the Status of a Shipment to see if it can be changed - meant to be called in-line">
        <string-to-field string="SHIPMENT_PACKED" field-name="fromStatusId"/>
    </simple-method>
    <simple-method method-name="checkCanChangeShipmentStatusShipped" short-description="Check the Status of a Shipment to see if it can be changed - meant to be called in-line">
        <string-to-field string="SHIPMENT_SHIPPED" field-name="fromStatusId"/>
    </simple-method>
    <simple-method method-name="checkCanChangeShipmentStatusDelivered" short-description="Check the Status of a Shipment to see if it can be changed - meant to be called in-line">
        <string-to-field string="SHIPMENT_DELIVERED" field-name="fromStatusId"/>
    </simple-method>
    <simple-method method-name="checkCanChangeShipmentStatusGeneral" short-description="Check the Status of a Shipment to see if it can be changed - meant to be called in-line">
        <field-to-field field-name="shipmentId" map-name="parameters" to-map-name="lookupShipmentMap"/>
        <find-by-primary-key entity-name="Shipment" map-name="lookupShipmentMap" value-name="testShipment"/>
        <if>
            <condition>
                <or>
                    <and>
                        <or>
                            <if-empty field-name="fromStatusId"/>
                            <if-compare field-name="fromStatusId" operator="equals" value="SHIPMENT_PACKED"/>
                        </or>
                        <if-compare field-name="shipment.statusId" operator="equals" value="SHIPMENT_PACKED"/>
                    </and>
                    <and>
                        <or>
                            <if-compare field-name="fromStatusId" operator="equals" value="SHIPMENT_PACKED"/>
                            <if-compare field-name="fromStatusId" operator="equals" value="SHIPMENT_SHIPPED"/>
                        </or>
                        <if-compare field-name="shipment.statusId" operator="equals" value="SHIPMENT_SHIPPED"/>
                    </and>
                    <and>
                        <or>
                            <if-compare field-name="fromStatusId" operator="equals" value="SHIPMENT_PACKED"/>
                            <if-compare field-name="fromStatusId" operator="equals" value="SHIPMENT_SHIPPED"/>
                            <if-compare field-name="fromStatusId" operator="equals" value="SHIPMENT_DELIVERED"/>
                        </or>
                        <if-compare field-name="shipment.statusId" operator="equals" value="SHIPMENT_DELIVERED"/>
                    </and>
                    <if-compare field-name="shipment.statusId" operator="equals" value="SHIPMENT_CANCELLED"/>
                </or>
            </condition>
            <then>
                <get-related-one relation-name="StatusItem" value-name="testShipment" to-value-name="testShipmentStatus"/>
                <string-to-list string="Cannot perform operation ${operationName} when the shipment is in the ${testShipmentStatus.description} [${testShipment.statusId}] status." list-name="error_list"/>
            </then>
        </if>
    </simple-method>
    
    <!-- shipment method type services -->
	<simple-method method-name="createCarrierShipmentMethod" short-description="Creates a CarrierShipmentMethod">		
		<make-value value-name="carrierShipmentMethod" entity-name="CarrierShipmentMethod"/>
		<set-pk-fields map-name="parameters" value-name="carrierShipmentMethod"/>
		<set-nonpk-fields map-name="parameters" value-name="carrierShipmentMethod"/>
		<create-value value-name="carrierShipmentMethod"/>						
	</simple-method>
	<simple-method method-name="updateCarrierShipmentMethod" short-description="Updates a CarrierShipmentMethod">		
		<make-value value-name="lookupMap" entity-name="CarrierShipmentMethod"/>
		<set-pk-fields map-name="parameters" value-name="lookupMap"/>
		<find-by-primary-key entity-name="CarrierShipmentMethod" map-name="lookupMap" value-name="carrierShipmentMethod"/>
		
		<set-nonpk-fields map-name="parameters" value-name="carrierShipmentMethod"/>
		<store-value value-name="carrierShipmentMethod"/>						
	</simple-method>	
	<simple-method method-name="createShipmentMethodType" short-description="Creates a ShipmentMethodType">
		<make-value value-name="shipmentMethodType" entity-name="ShipmentMethodType"/>
		<set-pk-fields map-name="parameters" value-name="shipmentMethodType"/>
		<set-nonpk-fields map-name="parameters" value-name="shipmentMethodType"/>
		<create-value value-name="shipmentMethodType"/>						
	</simple-method>
	<simple-method method-name="updateShipmentMethodType" short-description="Updates a ShipmentMethodType">
		<make-value value-name="lookupMap" entity-name="ShipmentMethodType"/>
		<set-pk-fields map-name="parameters" value-name="lookupMap"/>
		<find-by-primary-key entity-name="ShipmentMethodType" map-name="lookupMap" value-name="shipmentMethodType"/>
		
		<set-nonpk-fields map-name="parameters" value-name="shipmentMethodType"/>
		<store-value value-name="shipmentMethodType"/>						
	</simple-method>
	
	<!-- quick ship entire order in single package -->
	<simple-method method-name="quickShipEntireOrder" short-description="Quick ships an entire order">
		<!-- first get the order header; make sure we have a product store -->
		<field-to-field field-name="orderId" map-name="parameters" to-map-name="ohpkmap"/>
		<find-by-primary-key entity-name="OrderHeader" map-name="ohpkmap" value-name="orderHeader"/>
		<if-empty field-name="productStoreId" map-name="orderHeader">
			<!-- no store cannot use quick ship; throw error -->
			<add-error><fail-message message="No ProductStore associated with order; cannot use Quick Ship"/></add-error>
			<check-errors/>
		</if-empty>
		<if-not-empty field-name="productStoreId" map-name="orderHeader">
			<!-- get the product store entity -->
			<field-to-field field-name="productStoreId" map-name="orderHeader" to-map-name="storeLookup"/>
			<find-by-primary-key entity-name="ProductStore" map-name="storeLookup" value-name="productStore"/>
			<if-compare field-name="reserveInventory" map-name="productStore" operator="not-equals" value="Y">
				<!-- no reservations; no shipment; cannot use quick ship -->
				<add-error><fail-message message="ProductStore [${productStore.productStoreID}] does not reserve inventory; cannot use Quick Ship"/></add-error>
			</if-compare>
			<if-compare field-name="oneInventoryFacility" map-name="productStore" operator="not-equals" value="Y">
				<!-- if we allow multiple facilities we cannot use quick ship; throw error -->
				<add-error><fail-message message="ProductStore [${productStore.productStoreId}] allows multiple facilities; cannot use Quick Ship"/></add-error>
				<check-errors/>
			</if-compare>
			<if-empty field-name="inventoryFacilityId" map-name="productStore">
				<!-- if no inventoryFacility is defined we cannot use quick ship; throw error -->
				<add-error><fail-message message="No inventory facility associated with ProductStore [${productStore.productStoreId}]; cannot use Quick Ship"/></add-error>
				<check-errors/>
			</if-empty>
			<!-- we are all good to go; create the shipment -->
			<field-to-field field-name="orderId" map-name="orderHeader" to-field-name="primaryOrderId" to-map-name="shipmentContext"/>
			<string-to-field field-name="statusId" map-name="shipmentContext" string="SHIPMENT_INPUT"/>
			<call-service service-name="createShipment" in-map-name="shipmentContext">
				<result-to-field result-name="shipmentId" field-name="shipmentId" map-name="shipmentLookupMap"/>
			</call-service>
			<find-by-primary-key entity-name="Shipment" map-name="shipmentLookupMap" value-name="shipment"/>
			<!-- issue all order items that are in approved status -->
			<string-to-field field-name="statusId" map-name="itemLookupMap" string="ITEM_APPROVED"/>
			<field-to-field field-name="orderId" map-name="orderHeader" to-map-name="itemLookupMap"/>
			<find-by-and entity-name="OrderItem" map-name="itemLookupMap" list-name="orderItems"/>
			<iterate list-name="orderItems" entry-name="orderItem">
				<get-related value-name="orderItem" relation-name="OrderItemInventoryRes" list-name="itemReses"/>
				<iterate list-name="itemReses" entry-name="itemRes">
					<field-to-field field-name="shipmentId" map-name="shipment" to-map-name="issueContext"/>
					<field-to-field field-name="orderId" map-name="itemRes" to-map-name="issueContext"/>
					<field-to-field field-name="orderItemSeqId" map-name="itemRes" to-map-name="issueContext"/>
					<field-to-field field-name="inventoryItemId" map-name="itemRes" to-map-name="issueContext"/>
					<field-to-field field-name="quantity" map-name="itemRes" to-map-name="issueContext"/>
					<call-service service-name="issueOrderItemInventoryResToShipment" in-map-name="issueContext"/>
				</iterate>
			</iterate>
			<!-- place all issued items into a single package -->
			<field-to-field field-name="shipmentId" to-map-name="issueLookupMap"/>
			<field-to-field field-name="orderId" map-name="orderHeader" to-map-name="issueLookupMap"/>
			<find-by-and entity-name="ItemIssuance" map-name="issueLookupMap" list-name="itemIssuances"/>
			<string-to-field field-name="packageId" map-name="packageSeqMap" string="New"/>
			<iterate list-name="itemIssuances" entry-name="itemIssuance">
				<field-to-field field-name="shipmentId" map-name="itemIssuance" to-map-name="shipItemContext"/>
				<field-to-field field-name="shipmentItemSeqId" map-name="itemIssuance" to-map-name="shipItemContext"/>
				<field-to-field field-name="quantity" map-name="itemIssuance" to-map-name="shipItemContext"/>
				<field-to-field field-name="packageId" map-name="packageSeqMap" to-field-name="shipmentPackageSeqId" to-map-name="shipItemContext"/>
				<call-service service-name="createShipmentPackageContent" in-map-name="shipItemContext">
					<result-to-field result-name="shipmentPackageSeqId" field-name="packageId" map-name="packageSeqMap"/>
				</call-service>
			</iterate>
			<!-- update the shipment status to packed -->
			<field-to-field field-name="shipmentId" map-name="shipment" to-map-name="packedContext"/>
			<string-to-field field-name="statusId" map-name="packedContext" string="SHIPMENT_PACKED"/>
			<call-service service-name="updateShipment" in-map-name="packedContext"/>
			<!-- update the shipment status to shipped -->
			<field-to-field field-name="shipmentId" map-name="shipment" to-map-name="packedContext"/>
			<string-to-field field-name="statusId" map-name="packedContext" string="SHIPMENT_SHIPPED"/>
			<call-service service-name="updateShipment" in-map-name="packedContext"/>			
		</if-not-empty>
	</simple-method>	 	   
</simple-methods>

    <!-- FooBar services -->
<!--
    <simple-method method-name="createFooBar" short-description="Create FooBar">
        <check-permission permission="FACILITY" action="_CREATE">
        	<fail-message message="Security Error: to run createFooBar you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="FooBar"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateFooBar" short-description="Update FooBar">
        <check-permission permission="FACILITY" action="_UPDATE">
        	<fail-message message="Security Error: to run updateFooBar you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="FooBar"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="FooBar" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteFooBar" short-description="Delete FooBar">
        <check-permission permission="FACILITY" action="_DELETE">
        	<fail-message message="Security Error: to run deleteFooBar you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="FooBar"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="FooBar" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
-->
