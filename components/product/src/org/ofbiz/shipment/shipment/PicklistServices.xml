<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE simple-methods PUBLIC "-//OFBiz//DTD Simple Methods//EN" "http://www.ofbiz.org/dtds/simple-methods.dtd">

<!--
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author     David E. Jones (jonesde@ofbiz.org)
 * @version    $Revision: 1.9 $
 * @since      2.2
 -->
<simple-methods>
    <simple-method method-name="findOrdersToPickMove" short-description="Find Orders Ready to Pick or that need Stock Moves">
        <!-- filter on:
         + OrderHeader.orderType = SALES_ORDER
         + OrderHeader.statusId = ORDER_APPROVED
         + OrderItem.statusId = ITEM_APPROVED
         + total number of orders to pick: limit to X
         + OrderShipmentPreference.shipmentMethodTypeId = group by
         + ShipmentMethodType.sequenceNum = order display of methods by
         x OrderShipmentPreference.carrierPartyId = group by along with ship method?
         + OrderShipmentPreference.shipAfterDate is null or <= now
         + OrderShipmentPreference.maySplit = decide to include based on whether all items available or not
         x OrderItemInventoryRes.reservedDatetime = sort by, or by order date?
         + OrderItemInventoryRes.quantityNotAvailable = if not null and not 0, and maySplit is N, exclude whole order
         + OrderItemInventoryRes.pickStartDate = if not null already being picked, set when creating the pick list
         + InventoryItem.facilityId = passed facilityId
         + FacilityLocation.locationTypeEnumId = FLT_PICKLOC, can be picked now
         + FacilityLocation.locationTypeEnumId = FLT_BULK, stock move needed, remove whole order from list to be picked, add to list needing stock move
        -->
        <!-- data to create - in Map in List pickMoveByShipmentMethodInfoList
         + shipmentMethodType
         + orderReadyToPickInfoList
         + orderNeedsStockMoveInfoList
         With each list containing a Map with:
         + orderHeader
         + orderShipmentPreference
         + orderItemList
         + orderItemInventoryResList
         + orderItemInventoryResInfoList
         Each entry in the orderItemInventoryResInfoList is a Map with:
         + orderItemInventoryRes
         + inventoryItem
         + facilityLocation (may be null)
        -->

        <check-permission permission="FACILITY" action="_VIEW">
            <fail-message message="Security Error: to run getPicklistData you must have the FACILITY_VIEW or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        
        <now-timestamp-to-env env-name="nowTimestamp"/>
        
        <string-to-field string="SALES_ORDER" field-name="orderTypeId" map-name="orderHeaderLkpMp"/>
        <string-to-field string="ORDER_APPROVED" field-name="statusId" map-name="orderHeaderLkpMp"/>
        <string-to-list string="+orderDate" list-name="orderHeaderOrdLst"/><!-- oldest first -->
        <find-by-and list-name="orderHeaderList" entity-name="OrderHeader" map-name="orderHeaderLkpMp" order-by-list-name="orderHeaderOrdLst"/>

        <iterate entry-name="orderHeader" list-name="orderHeaderList">
            <!-- get the order items and the order item inventory res entries -->
            <field-to-field field-name="orderId" map-name="orderHeader" to-map-name="orderShipmentPreferenceLkupMap"/>
            <string-to-field string="_NA_" field-name="orderItemSeqId" map-name="orderShipmentPreferenceLkupMap"/>
            <find-by-primary-key entity-name="OrderShipmentPreference" map-name="orderShipmentPreferenceLkupMap" value-name="orderShipmentPreference"/>
            
            <!-- if a shipmentMethodTypeId was not passed or is the same as the current, then process this order -->
            <if>
                <condition>
                    <and>
                        <!-- only pick if it is the right shipmentMethodTypeId, if one was passed in -->
                        <or>
                            <if-empty field-name="parameters.shipmentMethodTypeId"/>
                            <if-compare-field field-name="parameters.shipmentMethodTypeId" operator="equals" to-field-name="orderShipmentPreference.shipmentMethodTypeId"/>
                        </or>
                        <!-- only pick if now is after the shipAfterDate or the shipAfterDate is empty -->
                        <or>
                            <if-empty field-name="orderShipmentPreference.shipAfterDate"/>
                            <if-compare-field field-name="nowTimestamp" operator="greater-equals" to-field-name="orderShipmentPreference.shipAfterDate"/>
                        </or>
                    </and>
                </condition>
                <then>
                    <get-related value-name="orderHeader" relation-name="OrderItemInventoryRes" list-name="orderItemInventoryResList"/>
                    <string-to-list string="+orderItemSeqId" list-name="orderItemOrdLst"/>
                    <get-related value-name="orderHeader" relation-name="OrderItem" list-name="orderItemList" order-by-list-name="orderItemOrdLst"/>
        
                    <!-- only add to picklist if inventory is not available (quantityNotAvailable on OIIR greater than 0) when maySplit is N (wait until all available to ship) -->
                    <string-to-field string="Y" field-name="pickThisOrder"/>
                    <string-to-field string="N" field-name="needsStockMove"/>
                    <string-to-field string="Y" field-name="allPickStarted"/>
                    <iterate entry-name="orderItemInventoryRes" list-name="orderItemInventoryResList">
                        <if-compare field-name="pickThisOrder" operator="equals" value="Y">
                            <get-related-one value-name="orderItemInventoryRes" relation-name="InventoryItem" to-value-name="inventoryItem"/>
                            <!-- if all orderItemInventoryRes.pickStartDate are set, don't include order as a pick candidate; keep a flag to see -->
                            <if-empty field-name="orderItemInventoryRes.pickStartDate">
                                <!-- note that this is separate because we can't really use it as a break condition, must check all of them before any useful information is to be had -->
                                <string-to-field string="N" field-name="allPickStarted"/>
                                
                                <if>
                                    <condition>
                                        <or>
                                            <!-- check all OIIRs and if quantityNotAvailable is not empty and > 0 for any, don't pick order -->
                                            <and>
                                                <if-compare field-name="maySplit"  map-name="orderShipmentPreference" operator="equals" value="N"/>
                                                <not><if-empty field-name="orderItemInventoryRes.quantityNotAvailable"/></not>
                                                <if-compare field-name="orderItemInventoryRes.quantityNotAvailable" operator="greater" value="0" type="Double"/>
                                            </and>
                                            <!-- make sure the inventoryItem is in the specified facility -->
                                            <if-compare-field field-name="parameters.facilityId" operator="not-equals" to-field-name="inventoryItem.facilityId"/>
                                        </or>
                                    </condition>
                                    <then>
                                        <string-to-field string="N" field-name="pickThisOrder"/>
                                    </then>
                                    <else>
                                        <!-- check InventoryItem->FacilityLocation (if exists), if it is of type FLT_BULK set needs stock move to true -->
                                        <get-related-one value-name="inventoryItem" relation-name="FacilityLocation" to-value-name="facilityLocation"/>
                                        <if-not-empty field-name="facilityLocation">
                                            <if-compare field-name="facilityLocation.locationTypeEnumId" operator="equals" value="FLT_BULK">
                                                <string-to-field string="Y" field-name="needsStockMove"/>
                                            </if-compare>
                                        </if-not-empty>
                                        
                                        <!-- make the orderItemInventoryResInfo and add it to the orderItemInventoryResInfoList -->
                                        <env-to-env env-name="orderItemInventoryRes" to-env-name="orderItemInventoryResInfo.orderItemInventoryRes"/>
                                        <env-to-env env-name="inventoryItem" to-env-name="orderItemInventoryResInfo.inventoryItem"/>
                                        <env-to-env env-name="facilityLocation" to-env-name="orderItemInventoryResInfo.facilityLocation"/>
                                        <field-to-list field-name="orderItemInventoryResInfo" list-name="orderItemInventoryResInfoList"/>
                                        <clear-field field-name="orderItemInventoryResInfo"/>
                                    </else>
                                </if>
                            </if-empty>
                        </if-compare>
                    </iterate>
                    
                    <if>
                        <condition>
                            <and>
                                <if-compare field-name="pickThisOrder" operator="equals" value="Y"/>
                                <if-compare field-name="allPickStarted" operator="equals" value="N"/>
                            </and>
                        </condition>
                        <then>
                            <!-- make the info map for this orderHeader -->
                            <env-to-env env-name="orderHeader" to-env-name="orderHeaderInfo.orderHeader"/>
                            <env-to-env env-name="orderShipmentPreference" to-env-name="orderHeaderInfo.orderShipmentPreference"/>
                            <env-to-env env-name="orderItemList" to-env-name="orderHeaderInfo.orderItemList"/>
                            <env-to-env env-name="orderItemInventoryResList" to-env-name="orderHeaderInfo.orderItemInventoryResList"/>
                            <env-to-env env-name="orderItemInventoryResInfoList" to-env-name="orderHeaderInfo.orderItemInventoryResInfoList"/>
                    
                            <!-- pick now, or needs stock move first? -->
                            <!-- put in pick or move lists for the given shipmentMethodTypeId -->
                            <env-to-env env-name="orderShipmentPreference.shipmentMethodTypeId" to-env-name="shipmentMethodTypeId"/>
                            <if-empty field-name="pickMoveByShipmentMethodInfoMap.${shipmentMethodTypeId}">
                                <get-related-one value-name="orderShipmentPreference" relation-name="ShipmentMethodType" to-value-name="pickMoveByShipmentMethodInfoMap.${shipmentMethodTypeId}.shipmentMethodType"/>
                            </if-empty>
                            <if-compare field-name="needsStockMove" operator="equals" value="Y">
                                <field-to-list field-name="orderHeaderInfo" list-name="pickMoveByShipmentMethodInfoMap.${shipmentMethodTypeId}.orderNeedsStockMoveInfoList"/>
                            <else>
                                <field-to-list field-name="orderHeaderInfo" list-name="pickMoveByShipmentMethodInfoMap.${shipmentMethodTypeId}.orderReadyToPickInfoList"/>
                            </else>
                            </if-compare>
                            <clear-field field-name="orderHeaderInfo"/>
                        </then>
                    </if>
                    
                    <clear-field field-name="orderShipmentPreference"/>
                    <clear-field field-name="orderItemList"/>
                    <clear-field field-name="orderItemInventoryResInfoList"/>
                </then>
            </if>
            
            <clear-field field-name="orderHeaderInfo"/>
            <clear-field field-name="orderShipmentPreference"/>
            <clear-field field-name="orderShipmentPreferenceLkupMap"/>
            <clear-field field-name="orderShipmentPreferenceLkupMap"/>
        </iterate>
        
        <!-- find all ShipmentMethodType in order by sequenceNum, for each one get the value from the pickMoveByShipmentMethodInfoMap and add it to the pickMoveByShipmentMethodInfoList -->
        <string-to-list string="+sequenceNum" list-name="shipmentMethodTypeOrdLst"/>
        <find-by-and list-name="shipmentMethodTypeList" entity-name="ShipmentMethodType" map-name="" order-by-list-name="shipmentMethodTypeOrdLst"/>
        <iterate entry-name="shipmentMethodType" list-name="shipmentMethodTypeList">
            <if-not-empty field-name="pickMoveByShipmentMethodInfoMap.${shipmentMethodType.shipmentMethodTypeId}">
                <field-to-list field-name="pickMoveByShipmentMethodInfoMap.${shipmentMethodType.shipmentMethodTypeId}" list-name="pickMoveByShipmentMethodInfoList"/>
            </if-not-empty>
        </iterate>
        
        <field-to-result field-name="pickMoveByShipmentMethodInfoList"/>
    </simple-method>
    
    <simple-method method-name="getPicklistData" short-description="Get Picklist Data">
        <!--
            Parameters:
                facilityId
                shipmentMethodTypeId
                maxNumberOfOrders
            Returns:
                inventoryItemInfoList: List of Maps with inventoryItem, facilityLocation, orderItems, product, statusItem, quantity
                orderHeaderInfoList: List of Maps with orderHeader and orderItemInfoList which is List of Maps with orderItem, product and orderItemInventoryResList
                wrongQuantityReservedList: List of Maps with reservedQuantity and orderItem
                insufficientQohList: List of Maps with inventoryItem and quantityNeeded
        -->
        
        <check-permission permission="FACILITY" action="_VIEW">
            <fail-message message="Security Error: to run getPicklistData you must have the FACILITY_VIEW or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run getPicklistData you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <now-timestamp-to-env env-name="nowTimestamp"/>
        
        <set-service-fields map-name="parameters" service-name="findOrdersToPickMove" to-map-name="findOrdersToPickMoveMap"/>
        <call-service service-name="findOrdersToPickMove" in-map-name="findOrdersToPickMoveMap">
            <result-to-field result-name="pickMoveByShipmentMethodInfoList"/>
        </call-service>

        <!-- if maxNumberOfOrders is passed, get at most that many orders and go over them -->
        <calculate field-name="numberSoFar" type="Long"><number value="0"/></calculate>
        <iterate entry-name="pickMoveByShipmentMethodInfo" list-name="pickMoveByShipmentMethodInfoList">
            <if>
                <condition>
                    <or>
                        <if-empty field-name="parameters.maxNumberOfOrders"/>
                        <if-compare-field field-name="numberSoFar" operator="less" to-field-name="parameters.maxNumberOfOrders"></if-compare-field>
                    </or>
                </condition>
                <then>
                    <field-to-list field-name="pickMoveByShipmentMethodInfo" list-name="limitedPickMoveByShipmentMethodInfoList"/>
                </then>
            </if>
            
            <calculate field-name="numberSoFar" type="Long">
                <calcop field-name="numberSoFar" operator="add"><number value="1"/></calcop>
            </calculate>
        </iterate>
        
        <iterate entry-name="pickMoveByShipmentMethodInfo" list-name="limitedPickMoveByShipmentMethodInfoList">
            <iterate entry-name="orderReadyToPickInfo" list-name="pickMoveByShipmentMethodInfo.orderReadyToPickInfoList">
                <iterate entry-name="orderItem" list-name="orderReadyToPickInfo.orderItemList">
                    <if-compare value="ITEM_APPROVED" operator="equals" field-name="orderItem.statusId">
                        <calculate field-name="reservedQuantity" type="Double"><number value="0"/></calculate>
                        
                        <field-to-field field-name="orderItemSeqId" map-name="orderItem" to-map-name="itemFilterMap"/>
                        <filter-list-by-and to-list-name="perItemResList" map-name="itemFilterMap" list-name="orderReadyToPickInfo.orderItemInventoryResList"/>
                        <iterate entry-name="orderItemInventoryRes" list-name="perItemResList">
                            <field-to-env field-name="inventoryItemId" map-name="orderItemInventoryRes" env-name="inventoryItemId"/>
                            <!-- update reserved quantity per inventoryItem, keep track of orderItems this came from -->
                            <field-to-env field-name="${inventoryItemId}" map-name="inventoryItems" env-name="inventoryItem"/>
                            <if-empty field-name="inventoryItem">
                                <env-to-field env-name="inventoryItemId" map-name="invItmLookupMap"/>
                                <find-by-primary-key value-name="inventoryItem" entity-name="InventoryItem" map-name="invItmLookupMap"/>
                                <env-to-field env-name="inventoryItem" field-name="${inventoryItemId}" map-name="inventoryItems"/>
                            </if-empty>
                            
                            <if-compare-field field-name="inventoryItem.facilityId" operator="equals" to-field-name="parameters.facilityId">
                                <field-to-list field-name="orderItemInventoryRes" list-name="perItemResListValid"/>
                                
                                <field-to-env field-name="${inventoryItemId}" map-name="inventoryItemOrderItems" env-name="inventoryItemOrderItemList"/>
                                <field-to-list field-name="orderItem" list-name="inventoryItemOrderItemList"/>
                                <env-to-field env-name="inventoryItemOrderItemList" field-name="${orderItemInventoryRes.inventoryItemId}" map-name="inventoryItemOrderItems"/>
                                <clear-field field-name="inventoryItemOrderItemList"/>
                                <if-not-empty field-name="inventoryItemQuantities.${inventoryItemId}">
                                    <calculate field-name="inventoryItemQuantities.${inventoryItemId}" type="Double">
                                        <calcop field-name="inventoryItemQuantities.${inventoryItemId}" operator="add">
                                            <calcop field-name="orderItemInventoryRes.quantity" operator="get"/>
                                        </calcop>
                                    </calculate>
                                <else>
                                    <env-to-field env-name="orderItemInventoryRes.quantity" field-name="inventoryItemQuantities.${inventoryItemId}"/>
                                </else>
                                </if-not-empty>
                            </if-compare-field>
                            <clear-field field-name="inventoryItem"/>
                            <!-- update total quantity reserved, picked, etc per line item to check to see if all and not more is reserved -->
                            <calculate field-name="reservedQuantity" type="Double">
                                <calcop field-name="reservedQuantity" operator="add">
                                    <calcop field-name="orderItemInventoryRes.quantity" operator="get"/>
                                </calcop>
                            </calculate>
                            
                            <!-- if setPickStartedDate == "Y" then set the OrderItemInventoryRes.pickStartDate to now -->
                            <if-compare field-name="parameters.setPickStartedDate" operator="equals" value="Y">
                                <env-to-env env-name="nowTimestamp" to-env-name="orderItemInventoryRes.pickStartDate"/>
                                <store-value value-name="orderItemInventoryRes"/>
                            </if-compare>
                        </iterate>
                        
                        <if-not-empty field-name="perItemResListValid">
                            <env-to-field env-name="orderItem" map-name="orderItemInfo"/>
                            <env-to-field env-name="perItemResListValid" field-name="orderItemInventoryResList" map-name="orderItemInfo"/>
                            <get-related-one value-name="orderItem" relation-name="Product" to-value-name="orderItemInfo.product"/>
                            <field-to-list field-name="orderItemInfo" list-name="orderItemInfoList"/>
                            <clear-field field-name="orderItemInfo"/>
                        </if-not-empty>
                        <clear-field field-name="perItemResListValid"/>
                        
                        <!-- warn if wrong inventory has been reserved+issued -->
                        <!-- change to include issued items as well, otherwise can't really do an effective check... -->
                        <get-related value-name="orderItem" relation-name="ItemIssuance" list-name="itemIssuances"/>
                        <calculate field-name="issuedQuantity" type="Double"><number value="0"/></calculate>
                        <iterate entry-name="itemIssuance" list-name="itemIssuances">
                            <calculate field-name="issuedQuantity" type="Double">
                                <calcop field-name="issuedQuantity" operator="add">
                                    <calcop field-name="itemIssuance.quantity" operator="get"/>
                                </calcop>
                            </calculate>
                        </iterate>
                        <calculate field-name="reservedIssuedQuantity">
                            <calcop operator="add">
                                <calcop operator="get" field-name="reservedQuantity"/>
                                <calcop operator="get" field-name="issuedQuantity"/>
                            </calcop>
                        </calculate>
                        <if-compare-field field-name="reservedIssuedQuantity" operator="not-equals" to-field-name="orderItem.quantity" type="Double">
                            <env-to-field env-name="orderItem" map-name="wrongQuantityReserved"/>
                            <env-to-field env-name="reservedQuantity" map-name="wrongQuantityReserved"/>
                            <env-to-field env-name="issuedQuantity" map-name="wrongQuantityReserved"/>
                            <env-to-field env-name="reservedIssuedQuantity" map-name="wrongQuantityReserved"/>
                            <field-to-list field-name="wrongQuantityReserved" list-name="wrongQuantityReservedList"/>
                            <clear-field field-name="wrongQuantityReserved"/>
                        </if-compare-field>
                    </if-compare>
                </iterate>
                
                <!-- keep the order info for easy handling of order pack info -->
                <if-not-empty field-name="orderItemInfoList">
                    <env-to-env env-name="orderReadyToPickInfo.orderHeader" to-env-name="orderHeaderInfo.orderHeader"/>
                    <env-to-field env-name="orderItemInfoList" map-name="orderHeaderInfo"/>
                    <field-to-list field-name="orderHeaderInfo" list-name="orderHeaderInfoList"/>
                </if-not-empty>
                
                <clear-field field-name="orderHeaderInfo"/>
                <clear-field field-name="orderItemInfoList"/>
            </iterate>
        </iterate>
        

        <!-- go through all quantities and get inventoryItem and facilityLocation -->
        <!-- warn if insufficient QOH for reserved amount -->
        <iterate-map key-name="inventoryItemId" value-name="quantityNeeded" map-name="inventoryItemQuantities">
            <field-to-env field-name="${inventoryItemId}" map-name="inventoryItems" env-name="inventoryItem"/>
            
            <if>
                <condition>
                    <or>
                        <and>
                            <if-compare value="SERIALIZED_INV_ITEM" operator="equals" field-name="inventoryItem.inventoryItemTypeId"/>
                            <if-compare value="1" operator="less" field-name="quantityNeeded" type="Double"/>
                        </and>
                        <if-compare-field field-name="quantityNeeded" operator="greater" to-field-name="inventoryItem.quantityOnHand" type="Double"/>
                    </or>
                </condition>
                <then>
                    <env-to-field env-name="inventoryItem" map-name="insufficientQoh"/>
                    <env-to-field env-name="quantityNeeded" map-name="insufficientQoh"/>
                    <field-to-list field-name="insufficientQoh" list-name="insufficientQohList"/>
                    <clear-field field-name="insufficientQoh"/>
                </then>
            </if>
            
            <!-- create a list of locations, then sort it, will have to create a reverse Map to go from location to inventory item -->
            <get-related-one value-name="inventoryItem" relation-name="FacilityLocation" to-value-name="facilityLocation"/>
            <if-not-empty field-name="facilityLocation">
                <field-to-list field-name="facilityLocation" list-name="facilityLocations"/>
                <!-- support multiple invnetoryItemIds per facilityLocation.locationSeqId -->
                <field-to-env field-name="${facilityLocation.locationSeqId}" map-name="inventoryItemsByLocation" env-name="inventoryItemIdList"/>
                <field-to-list field-name="inventoryItemId" list-name="inventoryItemIdList"/>
                <env-to-field env-name="inventoryItemIdList" field-name="${facilityLocation.locationSeqId}" map-name="inventoryItemsByLocation"/>
                <clear-field field-name="inventoryItemIdList"/>
            <else>
                <field-to-list field-name="inventoryItemId" list-name="noLocationInventoryItemIds"/>
            </else>
            </if-not-empty>
            <clear-field field-name="facilityLocation"/>
        </iterate-map>
        
        <!-- order the facilityLocations -->
        <string-to-list string="+areaId" list-name="facilityLocsOrdLst"/>
        <string-to-list string="+aisleId" list-name="facilityLocsOrdLst"/>
        <string-to-list string="+sectionId" list-name="facilityLocsOrdLst"/>
        <string-to-list string="+levelId" list-name="facilityLocsOrdLst"/>
        <string-to-list string="+positionId" list-name="facilityLocsOrdLst"/>
        <order-value-list list-name="facilityLocations" order-by-list-name="facilityLocsOrdLst"/>
        
        <!-- for each facility location add an entry to the inventoryItemInfoList -->
        <iterate entry-name="facilityLocation" list-name="facilityLocations">
            <!-- inventoryItemInfoList: facilityLocation, inventoryItem, orderItems, quantity -->
            <field-to-env field-name="${facilityLocation.locationSeqId}" map-name="inventoryItemsByLocation" env-name="inventoryItemIdList"/>
            <iterate entry-name="inventoryItemId" list-name="inventoryItemIdList">
                <env-to-field env-name="facilityLocation" map-name="inventoryItemInfo"/>
                <field-to-field field-name="${inventoryItemId}" map-name="inventoryItems" to-field-name="inventoryItem" to-map-name="inventoryItemInfo"/>
                <field-to-field field-name="${inventoryItemId}" map-name="inventoryItemOrderItems" to-field-name="orderItems" to-map-name="inventoryItemInfo"/>
                <field-to-field field-name="${inventoryItemId}" map-name="inventoryItemQuantities" to-field-name="quantity" to-map-name="inventoryItemInfo"/>
                <get-related-one value-name="inventoryItemInfo.inventoryItem" relation-name="Product" to-value-name="inventoryItemInfo.product"/>
                <get-related-one value-name="inventoryItemInfo.inventoryItem" relation-name="StatusItem" to-value-name="inventoryItemInfo.statusItem"/>

                <field-to-list field-name="inventoryItemInfo" list-name="inventoryItemInfoList"/>
                <clear-field field-name="inventoryItemInfo"/>
            </iterate>
        </iterate>
        
        <!-- add all noLocationInventoryItemIds to inventoryItemInfoList with all entries except facilityLocation -->
        <iterate entry-name="inventoryItemId" list-name="noLocationInventoryItemIds">
            <field-to-field field-name="${inventoryItemId}" map-name="inventoryItems" to-field-name="inventoryItem" to-map-name="inventoryItemInfo"/>
            <field-to-field field-name="${inventoryItemId}" map-name="inventoryItemOrderItems" to-field-name="orderItems" to-map-name="inventoryItemInfo"/>
            <field-to-field field-name="${inventoryItemId}" map-name="inventoryItemQuantities" to-field-name="quantity" to-map-name="inventoryItemInfo"/>
            <get-related-one value-name="inventoryItemInfo.inventoryItem" relation-name="Product" to-value-name="inventoryItemInfo.product"/>
            <get-related-one value-name="inventoryItemInfo.inventoryItem" relation-name="StatusItem" to-value-name="inventoryItemInfo.statusItem"/>

            <field-to-list field-name="inventoryItemInfo" list-name="inventoryItemInfoList"/>
            <clear-field field-name="inventoryItemInfo"/>
        </iterate>
        
        <field-to-result field-name="inventoryItemInfoList"/>
        <field-to-result field-name="orderHeaderInfoList"/>
        <field-to-result field-name="wrongQuantityReservedList"/>
        <field-to-result field-name="insufficientQohList"/>
    </simple-method>    

    <simple-method method-name="clearPickStarted" short-description="Clear PickStarted Dates according to specified parameters">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run getPicklistData you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value entity-name="OrderItemInventoryRes" map-name="parameters" value-name="orderItemInventoryResLkupValue"/>
        <find-by-and entity-name="OrderItemInventoryRes" map-name="orderItemInventoryResLkupValue" list-name="orderItemInventoryResList"/>
        <iterate entry-name="orderItemInventoryRes" list-name="orderItemInventoryResList">
            <clear-field field-name="pickStartDate" map-name="orderItemInventoryRes"/>
            <store-value value-name="orderItemInventoryRes"/>
        </iterate>
    </simple-method>

    <!-- =================================================================== -->
    <!-- ======================= Stock Move Services ======================= -->
    <!-- =================================================================== -->

    <simple-method method-name="findStockMovesNeeded" short-description="Find all Stock Moves that need to be done">
        <check-permission permission="FACILITY" action="_VIEW">
            <fail-message message="Security Error: to run processPhysicalStockMove you must have the FACILITY_VIEW or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <!-- First find all OrderItemInventoryRes that are in a FLT_BULK location in the current Facility -->
        <string-to-field string="FLT_BULK" field-name="locationTypeEnumId" map-name="findOiirailMap"/>
        <field-to-field field-name="facilityId" map-name="parameters" to-map-name="findOiirailMap"/>
        <find-by-and entity-name="OrderItemInventoryResAndItemLocation" map-name="findOiirailMap" list-name="orderItemInventoryResAndItemLocationList"/>
        
        <!-- 
            Consolidate into a List of infos return as moveByOiirInfoList where each info Map contains:
             - product
             - facilityLocationFrom
             - facilityLocationTo
             - totalQuantity
             - orderItemInventoryResInfoList (to be done later if we need it)
        -->
        <!-- start by making a Map where the locationSeqId is the key and the value is a List of orderItemInventoryResAndItemLocation -->
        <iterate entry-name="orderItemInventoryResAndItemLocation" list-name="orderItemInventoryResAndItemLocationList">
            <field-to-list field-name="orderItemInventoryResAndItemLocation" list-name="oiirailByLocMap.${orderItemInventoryResAndItemLocation.locationSeqId}"/>
        </iterate>

        <!-- now get all info for each origin location -->
        <iterate-map key-name="locationSeqId" value-name="perLocationOiirailList" map-name="oiirailByLocMap">
            <!-- now for more fun, split up by productId; this should generally not happen, but we'll make sure here -->
            <clear-field field-name="oiirailByProdMap"/>
            <iterate entry-name="orderItemInventoryResAndItemLocation" list-name="perLocationOiirailList">
                <field-to-list field-name="orderItemInventoryResAndItemLocation" list-name="oiirailByProdMap.${orderItemInventoryResAndItemLocation.productId}"/>
            </iterate>
            
            <iterate-map key-name="productId" value-name="perProductOiirailList" map-name="oiirailByProdMap">
                <!-- get product -->
                <env-to-field env-name="productId" map-name="findProductMap"/>
                <find-by-primary-key entity-name="Product" map-name="findProductMap" value-name="moveInfo.product"/>
                
                <!-- get facilityLocationFrom -->
                <field-to-field field-name="facilityId" map-name="parameters" to-map-name="findFacilityLocationMap"/>
                <env-to-field env-name="locationSeqId" map-name="findFacilityLocationMap"/>
                <find-by-primary-key entity-name="FacilityLocation" map-name="findFacilityLocationMap" value-name="moveInfo.facilityLocationFrom"/>
                
                <!-- get facilityLocationTo: a little more tricky, find the first FLT_PICKLOC  -->
                <env-to-field env-name="productId" map-name="findProductFacilityLocationViewMap"/>
                <field-to-field field-name="facilitytId" map-name="parameters" to-map-name="findProductFacilityLocationViewMap"/>
                <string-to-field string="FLT_PICKLOC" field-name="locationTypeEnumId" map-name="findProductFacilityLocationViewMap"/>
                <find-by-and entity-name="ProductFacilityLocationView" map-name="findProductFacilityLocationViewMap" list-name="productFacilityLocationViewList"/>

                <if-empty field-name="productFacilityLocationViewList">
                    <!-- TODO: do something better with the error messages... -->
                    <string-to-list string="Error in stock move, could not find a pick/primary location for facility [${inventoryItem.facilityId}] and product [${inventoryItem.productId}]" list-name="error_list"/>
                    <check-errors/>
                </if-empty>

                <!-- should generally only be one pick/primary location, just choose the first... -->
                <first-from-list entry-name="productFacilityLocationView" list-name="productFacilityLocationViewList"/>
                <get-related-one value-name="productFacilityLocationView" relation-name="FacilityLocation" to-value-name="moveInfo.facilityLocationTo"/>
                <get-related-one value-name="productFacilityLocationView" relation-name="ProductFacilityLocation" to-value-name="targetProductFacilityLocation"/>
                
                <!-- get totalQuantity: iterate through perProductOiirailList and add up quantity (from OrderItemInventoryRes) -->
                <calculate field-name="moveInfo.totalQuantity" type="Double"><number value="0"/></calculate>
                <iterate entry-name="perProductOiirail" list-name="perProductOiirailList">
                    <calculate field-name="moveInfo.totalQuantity" type="Double">
                        <calcop field-name="moveInfo.totalQuantity" operator="add"><calcop field-name="perProductOiirail.quantity" operator="get"/></calcop>
                    </calculate>
                </iterate>
                
                <!-- TODO: if moveInfo.totalQuantity is greater than the total quantity in the given location, show an error and do something intelligent -->
                
                <!-- check ProductFacilityLocation for where this is going and see if we should do a pre-emptive transfer too... -->
                <!-- 
                    now if there is enough left and there is less than the minimum for the 
                    ProductFacilityLocation, move the restock quantity from ProductFacilityLocation
                -->
                <if-empty field-name="targetLocationSimpleMoveQuantity.${targetProductFacilityLocation.locationSeqId}">
                    <!-- get all InventoryItems and total the availableToPromise -->
                    <get-related value-name="targetProductFacilityLocation" relation-name="InventoryItem" list-name="inventoryItemList"/>
                    <iterate entry-name="inventoryItem" list-name="inventoryItemList">
                        <calculate field-name="totalAvailableToPromise" type="Double">
                            <calcop field-name="totalAvailableToPromise" operator="add"><calcop field-name="inventoryItem.availableToPromise" operator="get"/></calcop>
                        </calculate>
                    </iterate>

                    <!-- if totalAvailableToPromise is less than productFacilityLocation.minimumStock, move over the targetProductFacilityLocation.moveQuantity -->
                    <if-compare-field field-name="totalAvailableToPromise" operator="less" to-field-name="targetProductFacilityLocation.minimumStock">
                        <!-- TODO: if trying to move more from the location than is there, find the different and put it in targetLocationSimpleMoveQuantity.${targetProductFacilityLocation.locationSeqId} -->
                        <calculate field-name="moveInfo.totalQuantity" type="Double">
                            <calcop field-name="moveInfo.totalQuantity" operator="add"><calcop field-name="targetProductFacilityLocation.moveQuantity" operator="get"/></calcop>
                        </calculate>
                    </if-compare-field>
                <else>
                    <!-- 
                        TODO: see if there is enough left for the full amount in 
                        targetLocationSimpleMoveQuantity.${targetProductFacilityLocation.locationSeqId}, 
                        if not do whatever is available and put difference back in 
                        targetLocationSimpleMoveQuantity.${targetProductFacilityLocation.locationSeqId} 
                    -->
                </else>
                </if-empty>
                
                <!-- add the moveInfo to the master list -->
                <field-to-list field-name="moveInfo" list-name="moveByOiirInfoList"/>
            </iterate-map>
        </iterate-map>
        <field-to-result field-name="moveByOiirInfoList"/>
        
        <!-- TODO:
            The last bit will be finding all stock moves for ProductFacilityLocation based pre-emptive moves.
            These will go in a separate list returned as moveByPflInfoList where each info Map contains:
             - product
             - facilityLocationFrom
             - facilityLocationTo
             - totalQuantity
        -->
        <!-- TODO: start by finding all Xxx where locationTypeEnumId=FLT_PICKLOC and total of InventoryItems in the loc are less than minimumStock -->
    </simple-method>
    
    <simple-method method-name="processPhysicalStockMove" short-description="Process a Physical Stock Move from one FacilityLocation to another, in the same Facility">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run processPhysicalStockMove you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run processPhysicalStockMove you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <!-- Start by processing all OrderItemInventoryRes from the origin FacilityLocation, and transfer to target, orderBy OrderHeader.statusId (approved first), orderDate -->
        
        <!-- Now for any remaining quantity, to a simple, ie non-OIIR, stock move -->
    </simple-method>
    
    <simple-method method-name="checkPickStockMove" short-description="Check Stock Moves needed to prepare for Picking">
        <!-- 
            TODO TODO: refactor this service into two steps: one that figures out how much to move and 
            where and one that does the data updates based on that after the stock move is done
        -->
    
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run getPicklistData you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run getPicklistData you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        
        

        <!--
            to find the destination FacilityLocation look up most ProductFacilityLocationView (has 
            ProductFacilityLocation and FacilityLocation) with type FLT_PICKLOC and the productId 
            and facilityId of the current InventoryItem
        -->
        <make-value entity-name="InventoryItem" map-name="parameters" value-name="inventoryItemLkupMap"/>
        <find-by-primary-key map-name="inventoryItemLkupMap" value-name="inventoryItem"/>
        
        <field-to-field field-name="productId" map-name="inventoryItem" to-map-name="findProductFacilityLocationViewMap"/>
        <field-to-field field-name="facilitytId" map-name="inventoryItem" to-map-name="findProductFacilityLocationViewMap"/>
        <string-to-field string="FLT_PICKLOC" field-name="locationTypeEnumId" map-name="findProductFacilityLocationViewMap"/>
        <find-by-and entity-name="ProductFacilityLocationView" map-name="findProductFacilityLocationViewMap" list-name="productFacilityLocationViewList"/>

        <if-empty field-name="productFacilityLocationViewList">
            <string-to-list string="Error in stock move, could not find a pick/primary location for facility [${inventoryItem.facilityId}] and product [${inventoryItem.productId}]" list-name="error_list"/>
            <check-errors/>
        </if-empty>
        
        <!-- should generally only be one pick/primary location, just choose the first... -->
        <first-from-list entry-name="productFacilityLocationView" list-name="productFacilityLocationViewList"/>
        <get-related-one value-name="productFacilityLocationView" relation-name="ProductFacilityLocation" to-value-name="productFacilityLocation"/>
        
        <!-- if this is a serialized InventoryItem, then just update the location -->
        <if-compare field-name="inventoryItem.inventoryItemTypeId" operator="equals" value="SERIALIZED_INV_ITEM">
            <field-to-field field-name="locationSeqId" map-name="productFacilityLocationView" to-map-name="inventoryItem"/>
            <store-value value-name="inventoryItem"/>
            <field-to-result field-name="inventoryItemId" map-name="inventoryItem" result-name="targetInventoryItemId"/>
        </if-compare>
        
        <!-- 
            if this is a non-serialized InventoryItem, create a new targetInventoryItem in the 
            target location and start moving all OrderItemInventoryRes over, plus min move quantity from PFL
        -->
        <if-compare field-name="inventoryItem.inventoryItemTypeId" operator="equals" value="NON_SERIAL_INV_ITEM">
            <!-- create a new InventoryItem for the targetInventoryItem -->
            <make-value entity-name="InventoryItem" map-name="inventoryItem" value-name="targetInventoryItem"/>
            <field-to-field field-name="locationSeqId" map-name="productFacilityLocationView" to-map-name="targetInventoryItem"/>
            <calculate field-name="targetInventoryItem.availableToPromise" type="Double"><number value="0"/></calculate>
            <calculate field-name="targetInventoryItem.quantityOnHand" type="Double"><number value="0"/></calculate>

            <!-- 
                go through OrderItemInventoryRes and move each one over, starting with the older making 
                sure to stay within quantityOnHand
            -->
            <get-related value-name="inventoryItem" relation-name="OrderItemInventoryRes" list-name="orderItemInventoryResList"/>
            <calculate field-name="quantityOnHandMoved" type="Double"><number value="0"/></calculate>
            <iterate entry-name="orderItemInventoryRes" list-name="orderItemInventoryResList">
                <!-- if there aren't enough to move, put this on a list for insufficient quantities and handle later -->
                <if-compare-field field-name="orderItemInventoryRes.quantity" operator="greater" to-field-name="inventoryItem.quantityOnHand">
                    <field-to-list field-name="orderItemInventoryRes" list-name="insufficientQuantityOiirList"/>
                <else>
                    <!-- okay, move it over, start by calculating new QOHs -->
                    <calculate field-name="inventoryItem.quantityOnHand" type="Double">
                        <calcop field-name="inventoryItem.quantityOnHand" operator="subtract"><calcop field-name="orderItemInventoryRes.quantity" operator="get"/></calcop>
                    </calculate>
                    <calculate field-name="targetInventoryItem.quantityOnHand" type="Double">
                        <calcop field-name="targetInventoryItem.quantityOnHand" operator="add"><calcop field-name="orderItemInventoryRes.quantity" operator="get"/></calcop>
                    </calculate>
                    
                    <!-- make a new OIIR value object -->
                    <make-value entity-name="OrderItemInventoryRes" map-name="orderItemInventoryRes" value-name="targetOrderItemInventoryRes"/>
                    <field-to-field field-name="inventoryItemId" map-name="targetInventoryItem" to-map-name="targetOrderItemInventoryRes"/>
                    
                    <!-- 
                        note that nothing needs to be done with the OIIR.quantity because if all is 
                        balanced the new one should have a zero availableToPromise until the 
                        ProductFacilityLocation based pre-emptive move is done
                    -->
                    <!-- if the OIIR has a quantityNotAvailable, move that over by adding it to the origin, and subtracting it from the target -->
                    <if-not-empty field-name="orderItemInventoryRes.quantityNotAvailable">
                        <if-compare field-name="orderItemInventoryRes.quantityNotAvailable" operator="greater" value="0" type="Double">
                            <calculate field-name="inventoryItem.availableToPromise" type="Double">
                                <calcop field-name="inventoryItem.availableToPromise" operator="add"><calcop field-name="orderItemInventoryRes.quantityNotAvailable" operator="get"/></calcop>
                            </calculate>
                            <calculate field-name="targetInventoryItem.availableToPromise" type="Double">
                                <calcop field-name="targetInventoryItem.availableToPromise" operator="subtract"><calcop field-name="orderItemInventoryRes.quantityNotAvailable" operator="get"/></calcop>
                            </calculate>
                        </if-compare>
                    </if-not-empty>
                    
                    <!-- create the new and remove the old OIIRs -->
                    <create-value value-name="targetOrderItemInventoryRes"/>
                    <remove-value value-name="orderItemInventoryRes"/>
                </else>
                </if-compare-field>
            </iterate>
            
            <!-- now that targetInventoryItem is populated with quantities, etc, call createInventoryItem service -->
            <set-service-fields map-name="targetInventoryItem" service-name="createInventoryItem" to-map-name="createInventoryItemMap"/>
            <call-service service-name="createInventoryItem" in-map-name="createInventoryItemMap">
                <result-to-result result-name="inventoryItemId" service-result-name="targetInventoryItemId"/>
            </call-service>

            <!-- also need to store the origin inventoryItem, so do that now and do it through a service since there is one -->
            <set-service-fields map-name="inventoryItemId" service-name="updateInventoryItem" to-map-name="updateInventoryItemMap"/>
            <call-service service-name="updateInventoryItem" in-map-name="updateInventoryItemMap"/>
            
            <!-- something with the insufficientQuantityOiirList -->
            <field-to-result field-name="insufficientQuantityOiirList"/>

            <!-- now at the end call checkDoProductFacilityLocationStockMove for pre-emptive moving -->
            <set-service-fields map-name="productFacilityLocation" service-name="checkDoProductFacilityLocationStockMove" to-map-name="checkDoProductFacilityLocationStockMoveMap"/>
            <call-service service-name="checkDoProductFacilityLocationStockMove" in-map-name="checkDoProductFacilityLocationStockMoveMap"/>
        </if-compare>
    </simple-method>
</simple-methods>
