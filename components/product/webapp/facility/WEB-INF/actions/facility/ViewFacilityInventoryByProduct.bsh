/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Jacopo Cappellato (tiz@sastau.it)
 *@version    $Revision: 1.1 $
 *@since      3.0
 */


import java.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.content.widget.html.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");
dispatcher = request.getAttribute("dispatcher");

facilityId = request.getParameter("facilityId");
if (UtilValidate.isEmpty(facilityId)) {
    facilityId = request.getAttribute("facilityId");
}

if(security.hasEntityPermission("FACILITY", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}
if (facilityId != null) context.put("facilityId", facilityId);
GenericValue facility = delegator.findByPrimaryKey("Facility", UtilMisc.toMap("facilityId", facilityId));
if (facility != null) context.put("facility", facility);

List prods = delegator.findByAnd("ProductFacility", UtilMisc.toMap("facilityId", facilityId));
prodsIt = prods.iterator();
rows = new ArrayList();

while (prodsIt.hasNext()) {
    oneProd = prodsIt.next();
    contextInput = UtilMisc.toMap("productId",oneProd.getString("productId"), "facilityId", facilityId);
    resultOutput = dispatcher.runSync("getInventoryAvailableByFacility",contextInput);
    oneInventory = new HashMap();
    oneInventory.put("productId", oneProd.getString("productId"));
    oneInventory.put("minimumStock", oneProd.getString("minimumStock"));
    oneInventory.put("reorderQuantity", oneProd.getString("reorderQuantity"));
    oneInventory.put("daysToShip", oneProd.getString("daysToShip"));
    oneInventory.put("totalQuantityOnHand", resultOutput.get("quantityOnHand"));
    oneInventory.put("totalAvailableToPromise", resultOutput.get("availableToPromise"));
    rows.add(oneInventory);
}

HtmlFormWrapper inventoryWrapper = new HtmlFormWrapper("/facility/FacilityForms.xml", "ListFacilityInventoryByProduct", request, response);
inventoryWrapper.putInContext("inventoryByProduct", rows);
inventoryWrapper.putInContext("uiLabelMap", request.getAttribute("uiLabelMap"));
context.put("inventoryWrapper", inventoryWrapper);
context.put("inventoryRows", rows);
