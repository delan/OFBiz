import java.util.*;
import java.io.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.content.widget.html.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

if(security.hasEntityPermission("FACILITY", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}
String facilityId = request.getParameter("facilityId");
if (facilityId != null) context.put("facilityId", facilityId);

String lookup = request.getParameter("look_up");
String itemId = request.getParameter("inventoryItemId");
if (itemId != null)
    session.setAttribute("inventoryItemId", itemId);

itemId = (String) session.getAttribute("inventoryItemId");
if (itemId != null) context.put("itemId", itemId);

GenericValue facility = delegator.findByPrimaryKey("Facility", UtilMisc.toMap("facilityId", facilityId));
if (facility != null) context.put("facility", facility);

UtilHttp.parametersToAttributes(request);

List foundLocations = null;
if (lookup != null) {
    Map paramMap = UtilHttp.getParameterMap(request);
    paramMap.remove("look_up");
    Iterator i = paramMap.keySet().iterator();
    while (i.hasNext()) {
        Object key = i.next();
        String value = (String) paramMap.get(key);
        if (value == null || value.length() == 0)
            paramMap.remove(key);
    }
    foundLocations = delegator.findByAnd("FacilityLocation", paramMap);
    if (foundLocations != null && foundLocations.size() > 0)
        context.put("foundLocations", foundLocations);
}
