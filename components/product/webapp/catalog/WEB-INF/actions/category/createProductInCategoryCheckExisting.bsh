/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones
 *@version    $Revision: 1.1 $
 *@since      2.1
 */

import org.ofbiz.core.util.*;
import org.ofbiz.core.entity.*;
import org.ofbiz.commonapp.product.feature.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

if(security.hasEntityPermission("CATALOG", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}

productCategoryId = request.getParameter("productCategoryId");
productCategory = delegator.findByPrimaryKey("ProductCategory", UtilMisc.toMap("productCategoryId", productCategoryId));

// get all products in category, add each productId to a List, then filter by features...
productCategoryMembers = productCategory.getRelated("ProductCategoryMember");
productCategoryMemberIter = productCategoryMembers.iterator();
productIds = new ArrayList(productCategoryMembers.size());
while (productCategoryMemberIter.hasNext()) {
    productCategoryMember = productCategoryMemberIter.next();
    productIds.add(productCategoryMember.get("productId"));
}
featureIdByType = ParametricSearch.makeFeatureIdByTypeMap(request);
ParametricSearch.filterProductIdListByFeatures(productIds, featureIdByType, delegator);

// get the product for each ID
productIdIter = productIds.iterator();
products = new ArrayList(productIds.size());
while (productIdIter.hasNext()) {
    productId = productIdIter.next();
    product = delegator.findByPrimaryKeyCache("Product", UtilMisc.toMap("productId", productId));
    products.add(product);
}

productFeatureAndTypeDatas = new ArrayList(featureIdByType.size());
featureIdByTypeIter = featureIdByType.entrySet().iterator();
while (featureIdByTypeIter.hasNext()) {
    featureIdByTypeEntry = featureIdByTypeIter.next();
    productFeatureType = delegator.findByPrimaryKeyCache("ProductFeatureType", UtilMisc.toMap("productFeatureTypeId", featureIdByTypeEntry.getKey()));
    productFeature = delegator.findByPrimaryKeyCache("ProductFeature", UtilMisc.toMap("productFeatureId", featureIdByTypeEntry.getValue()));
    productFeatureAndTypeData = new HashMap();
    productFeatureAndTypeData.put("productFeatureType", productFeatureType);
    productFeatureAndTypeData.put("productFeature", productFeature);
    productFeatureAndTypeDatas.add(productFeatureAndTypeData);
}

context.put("productCategoryId", productCategoryId);
context.put("productCategory", productCategory);
context.put("productFeatureAndTypeDatas", productFeatureAndTypeDatas);
context.put("products", products);
