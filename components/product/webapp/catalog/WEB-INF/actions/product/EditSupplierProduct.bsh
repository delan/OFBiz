/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Rev$
 *@since      3.1
 */

import java.util.*;
import java.io.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.widget.html.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

if(security.hasEntityPermission("CATALOG", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}
productId = request.getParameter("productId");
context.put("productId", productId);

product = delegator.findByPrimaryKey("Product", UtilMisc.toMap("productId", productId));
context.put("product", product);

suppliers = delegator.findByAnd("SupplierProduct", UtilMisc.toMap("productId", productId));
context.put("productSuppliers", suppliers);

partyId = request.getParameter("partyId");
currencyUomId = request.getParameter("currencyUomId");
minimumOrderQuantityStr = request.getParameter("minimumOrderQuantity");
supplierProduct = null;
if (partyId != null && currencyUomId != null && minimumOrderQuantityStr != null) {
    minimumOrderQuantity = 0;
    try {
        minimumOrderQuantity = Double.parseDouble(minimumOrderQuantityStr);
    } catch(Exception exc) {}
    supplierProduct = delegator.findByPrimaryKey("SupplierProduct", UtilMisc.toMap("productId", productId, "partyId", partyId, "currencyUomId", currencyUomId, "minimumOrderQuantity", new Double(minimumOrderQuantity)));
}
context.put("supplierProduct", supplierProduct);

HtmlFormWrapper updateSupplierForm = new HtmlFormWrapper("/product/ProductForms.xml", "UpdateSupplierProduct", request, response);
context.put("updateSupplierProductForm", updateSupplierForm);
updateSupplierForm.putInContext("productSuppliers", suppliers);
updateSupplierForm.putInContext("uiLabelMap", request.getAttribute("uiLabelMap"));

HtmlFormWrapper addSupplierForm = new HtmlFormWrapper("/product/ProductForms.xml", "AddSupplierProduct", request, response);
context.put("addSupplierProductForm", addSupplierForm);
addSupplierForm.putInContext("productId", productId);
addSupplierForm.putInContext("supplierProduct", supplierProduct);
addSupplierForm.putInContext("defaultCurrencyUomId", "USD");
addSupplierForm.putInContext("uiLabelMap", request.getAttribute("uiLabelMap"));

