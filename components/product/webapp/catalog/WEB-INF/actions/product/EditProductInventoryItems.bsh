/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones
 *@author     Brad Steiner
 *@version    $Revision: 1.5 $
 *@since      2.2
 */

import java.util.*;
import java.io.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.content.widget.html.*;
import org.ofbiz.securityext.login.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

if(security.hasEntityPermission("CATALOG", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}

productId = request.getParameter("productId");

product = delegator.findByPrimaryKey("Product", UtilMisc.toMap("productId", productId));

productInventoryItems = delegator.findByAnd("InventoryItem", 
        UtilMisc.toMap("productId", productId), 
        UtilMisc.toList("facilityId", "-receivedDate", "inventoryItemId"));

// loop through the inventory items and get totals of ATP and QOH
totalAvailableToPromise = 0;
totalQuantityOnHand = 0;
productInventoryItemIter = productInventoryItems.iterator();
while (productInventoryItemIter.hasNext()) {
	productInventoryItem = productInventoryItemIter.next();
	if ("SERIALIZED_INV_ITEM".equals(productInventoryItem.getString("inventoryItemTypeId"))) {
		if ("INV_AVAILABLE".equals(productInventoryItem.getString("statusId"))) {
			totalQuantityOnHand += 1;
		} else if ("INV_PROMISED".equals(productInventoryItem.getString("statusId"))) {
			totalAvailableToPromise += 1;
		}
	} else if ("NON_SERIAL_INV_ITEM".equals(productInventoryItem.getString("inventoryItemTypeId"))) {
		if (productInventoryItem.get("availableToPromise") != null) {
			totalAvailableToPromise += productInventoryItem.getDouble("availableToPromise").doubleValue();
		}
		if (productInventoryItem.get("quantityOnHand") != null) {
			totalQuantityOnHand += productInventoryItem.getDouble("quantityOnHand").doubleValue();
		}
	}
}

showEmpty = "true".equals(request.getParameter("showEmpty"));

context.put("productId", productId);
context.put("product", product);
context.put("productInventoryItems", productInventoryItems);
context.put("totalAvailableToPromise", totalAvailableToPromise);
context.put("totalQuantityOnHand", totalQuantityOnHand);
context.put("showEmpty", showEmpty);

