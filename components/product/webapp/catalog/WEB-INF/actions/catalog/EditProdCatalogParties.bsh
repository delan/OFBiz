/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones
 *@version    $Revision: 1.1 $
 *@since      2.1
 */

import org.ofbiz.core.util.*;
import org.ofbiz.core.entity.*;
import org.ofbiz.core.widgetimpl.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

if(security.hasEntityPermission("CATALOG", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}

String prodCatalogId = request.getParameter("prodCatalogId");
GenericValue prodCatalog = delegator.findByPrimaryKey("ProdCatalog", UtilMisc.toMap("prodCatalogId", prodCatalogId));
List prodCatalogRoles = null;
List prodCatalogRoleDatas = new LinkedList();
if (prodCatalog != null) {
    prodCatalogRoles = prodCatalog.getRelated("ProdCatalogRole", null, UtilMisc.toList("sequenceNum", "partyId"));
    Iterator prodCatalogRoleIter = prodCatalogRoles.iterator();
    while (prodCatalogRoleIter.hasNext()) {
        GenericValue prodCatalogRole = (GenericValue) prodCatalogRoleIter.next();
        Map prodCatalogRoleData = new HashMap();
        prodCatalogRoleData.put("prodCatalogRole", prodCatalogRole);
        prodCatalogRoleData.put("person", prodCatalogRole.getRelatedOne("Person"));
        prodCatalogRoleData.put("partyGroup", prodCatalogRole.getRelatedOne("PartyGroup"));
        prodCatalogRoleData.put("roleType", prodCatalogRole.getRelatedOneCache("RoleType"));
        prodCatalogRoleDatas.add(prodCatalogRoleData);
    }
}

HtmlFormWrapper updateProdCatalogToPartyWrapper = new HtmlFormWrapper("/catalog/ProdCatalogForms.xml", "UpdateProdCatalogToParty", request, response);
updateProdCatalogToPartyWrapper.putInContext("prodCatalogRoleDatas", prodCatalogRoleDatas);

HtmlFormWrapper addProdCatalogToPartyWrapper = new HtmlFormWrapper("/catalog/ProdCatalogForms.xml", "AddProdCatalogToParty", request, response);
addProdCatalogToPartyWrapper.putInContext("prodCatalog", prodCatalog);

context.put("prodCatalogId", prodCatalogId);
context.put("prodCatalog", prodCatalog);
context.put("updateProdCatalogToPartyWrapper", updateProdCatalogToPartyWrapper);
context.put("addProdCatalogToPartyWrapper", addProdCatalogToPartyWrapper);
