/*
 *  Copyright (c) 2003-2004 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski
 *@author     David E. Jones
 *@version    $Revision: 1.7 $
 *@since      2.1
 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.service.*;
import org.ofbiz.product.product.ProductContentWrapper;
import org.ofbiz.product.catalog.*;
import org.ofbiz.product.store.*;

dispatcher = request.getAttribute("dispatcher");
delegator = request.getAttribute("delegator");

//either optProduct, optProductId or productId must be specified
product = request.getAttribute("optProduct");
optProductId = request.getAttribute("optProductId");
productId = request.getAttribute("productId");

webSiteId = CatalogWorker.getWebSiteId(request);
catalogId = CatalogWorker.getCurrentCatalogId(request);
productStore = ProductStoreWorker.getProductStore(request);
facilityId = productStore.getString("inventoryFacilityId");
autoUserLogin = session.getAttribute("autoUserLogin");
userLogin = session.getAttribute("userLogin");

context.put("nowTimestamp", UtilDateTime.nowTimestamp());
context.remove("daysToShip");
context.remove("averageRating");
context.remove("numRatings");

if (product != null) {
    productId = product.get("productId");
}
if (optProductId != null) {
    productId = optProductId;
}

// get the product entity
if (product == null && productId != null) {
    product = delegator.findByPrimaryKeyCache("Product", UtilMisc.toMap("productId", productId));
}
if (product != null) {
    request.setAttribute("product", product);
    
    productFacility = delegator.findByPrimaryKeyCache("ProductFacility", UtilMisc.toMap("productId", product.get("productId"), "facilityId", facilityId));
    if (productFacility != null && productFacility.get("daysToShip") != null) {
        context.put("daysToShip", productFacility.get("daysToShip"));
    }
    
    // make the productContentWrapper
    ProductContentWrapper productContentWrapper = new ProductContentWrapper(product, request);
    request.setAttribute("productContentWrapper", productContentWrapper);
}

categoryId = null;
if (product != null) {     
    categoryId = request.getParameter("category_id");
    if (categoryId == null) {
        categoryId = request.getAttribute("productCategoryId");
    }
    if (categoryId != null) {
        request.setAttribute("categoryId", categoryId);
    }

    // get the product price
    priceMap = dispatcher.runSync("calculateProductPrice", 
            UtilMisc.toMap("product", product, "prodCatalogId", catalogId, 
            "webSiteId", webSiteId, "currencyUomId", UtilHttp.getCurrencyUom(session), 
            "autoUserLogin", autoUserLogin, "userLogin", userLogin));
            
    request.setAttribute("priceMap", priceMap);
}

    // get the product review(s)
    reviews = product.getRelated("ProductReview", null, UtilMisc.toList("-postedDateTime"));
    context.put("productReviews", reviews);
    // get the average rating
    if (reviews != null && reviews.size() > 0) {
        reviewIter = reviews.iterator();
        double totalProductRating = 0;
        long numRatings = 0;
        while (reviewIter.hasNext()) {
            productReview = reviewIter.next();
            productRating = productReview.get("productRating");
            if (productRating != null) {
                totalProductRating += productRating;
                numRatings++;
            }
        }
        if (numRatings > 0) {
            context.put("averageRating", totalProductRating/numRatings);
            context.put("numRatings", numRatings);
        }
    }
