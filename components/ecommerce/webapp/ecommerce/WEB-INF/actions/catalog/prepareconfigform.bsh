/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski
 *@author     David E. Jones
 *@version    $Rev$
 *@since      2.1
 */

/*
 *  WARNING:
 *  the same copy of this file is used in the ecommerce 
 *  application (catalog/productdetail.bsh) and in the ordermgr 
 *  application (entry/catalog/productdetail.bsh).
 *
 *  For this reason this file should only contain code that is
 *  relevant for both the applications.
 *
 *  It's also very important to keep the two files synchronized in CVS.
 *
 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.service.*;
import org.ofbiz.content.webapp.taglib.*;
import org.ofbiz.product.product.ProductContentWrapper;
import org.ofbiz.product.product.ProductSearch;
import org.ofbiz.product.product.ProductSearchSession;
import org.ofbiz.product.product.ProductWorker;
import org.ofbiz.product.catalog.*;
import org.ofbiz.product.store.*;
import org.ofbiz.content.stats.VisitHandler;
import org.ofbiz.order.shoppingcart.*;

import org.ofbiz.product.config.ProductConfigWrapper;
import org.ofbiz.product.config.ProductConfigWrapper.ConfigOption;
import org.ofbiz.product.config.ProductConfigWrapper.ConfigItem;


catalogId = CatalogWorker.getCurrentCatalogId(request);
webSiteId = CatalogWorker.getWebSiteId(request);
autoUserLogin = request.getSession().getAttribute("autoUserLogin");
cart = ShoppingCartEvents.getCartObject(request);
currencyUomId = cart.getCurrency();

product = request.getAttribute("product");
if (product != null) {
    configWrapper = new ProductConfigWrapper(request.getAttribute("delegator"),
                                             request.getAttribute("dispatcher"),
                                             product.getString("productId"), catalogId, webSiteId, currencyUomId, autoUserLogin);

    //context.put("configform", configWrapper.renderWebForm());
    //configWrapper.setChoosenOptions(request);
    List questions = configWrapper.getQuestions();
    List options = configWrapper.getOptions();

    //---------- JavaScript --------------------
    jsBuf = new StringBuffer();
    jsBuf.append("<script language=\"JavaScript\">");
    jsBuf.append("var QUESTIONS = new Array(" + questions.size() + ");");
    for (int s = 0; s < questions.size(); s++) {
        List avalOptions = (List)options.get(s);
        jsBuf.append("var PRICES = new Array(" + avalOptions.size() + ");");
        for (int t = 0; t < avalOptions.size(); t++) {
            ConfigOption oneOption = (ConfigOption)avalOptions.get(t);
            jsBuf.append("PRICES[" + t + "] = " + oneOption.getPrice() + ";");
        }
        jsBuf.append("QUESTIONS[" + s + "] = PRICES;");
    }
    jsBuf.append("</script>");
    context.put("jsscript", jsBuf.toString());
    //------------------------------------------

    
    //---------- setChoosenOptions() --------------------
    for (int k = 0; k < questions.size(); k++) {
        List avalOptions = (List)options.get(k);
        String[] opts = request.getParameterValues("" + k);
        if (opts == null) {
            continue;
        }
        System.out.println("OPTIONS (" + k + "): " + opts);
        for (int h = 0; h < opts.length; h++) {
            int cnt = -1;
            try {
                cnt = Integer.parseInt(opts[h]);
            } catch(Exception exc) {
            }
            configWrapper.setSelected(k, cnt);
        }
    }
    //---------------------------------------------------
    if (!ProductStoreWorker.isStoreInventoryAvailable(request, configWrapper, 1.0)) {
        context.put("productNotAvailable", "Y");
    }
    //---------- renderWebForm() ------------------------
    StringBuffer sb = new StringBuffer();
    sb.append("<form target'control/product'>");
    sb.append("<input type='submit' value='send'>");
    sb.append("<input type='hidden' name='product_id' value='" + product.getString("productId") + "'>");
    sb.append("<table>");
    for (int i = 0; i < questions.size(); i++) {
        ConfigItem ci = (ConfigItem)questions.get(i);
        List avalOptions = (List)options.get(i);
        sb.append("<tr><th>");
        sb.append(ci.getConfigItem().getString("description"));
        sb.append("</th></tr>");
        sb.append("<tr><td>");
        if (ci.isStandard()) {
            for (int j = 0; j < avalOptions.size(); j++) {
            if (j > 0) {
                    sb.append(", ");
                }
                ConfigOption oneOption = (ConfigOption)avalOptions.get(j);
                sb.append(oneOption.getDescription() + " (" + oneOption.getPrice() + ")" + (oneOption.isAvailable()? "": " *"));
            }
        } else if (ci.isSingleChoice()) {
            sb.append("<tr><td>");
            sb.append("<select name='" + i + "' class='selectBox'>");
            if (!ci.isMandatory()) {
                sb.append("<option value=''>");
                sb.append("---");
                sb.append("</option>");
            }
            for (int j = 0; j < avalOptions.size(); j++) {
                ConfigOption oneOption = (ConfigOption)avalOptions.get(j);
                String selected = (oneOption.isSelected()? "selected": "");
                sb.append("<option value='" + j + "' " + selected + ">");
                sb.append(oneOption.getDescription() + " (" + oneOption.getPrice() + ")" + (oneOption.isAvailable()? "": " *"));
                sb.append("</option>");
            }
            sb.append("</select>");
            sb.append("</td></tr>");
        } else {
            // MULTI-CHOICE  question
            for (int j = 0; j < avalOptions.size(); j++) {
                sb.append("<tr><td>");
                ConfigOption oneOption = (ConfigOption)avalOptions.get(j);
                String selected = (oneOption.isSelected()? "checked": "");
                sb.append("<input type='CHECKBOX' name='" + i + "' value='" + j + "' " + selected + ">");
                sb.append(oneOption.getDescription() + " (" + oneOption.getPrice() + ")" + (oneOption.isAvailable()? "": " *"));
                sb.append("</td></tr>");
            }
        }
        sb.append("</td></tr>");
    }
    sb.append("</table>");
    sb.append("</form>");
    //---------------------------------------------------
    context.put("configwrapper", configWrapper);
    context.put("configform", sb.toString());
    context.put("totalPrice", configWrapper.getTotalPrice());
    if (!configWrapper.isCompleted()) {
        context.put("orderQuantityDisabled", "Y");
    }
} else {
    context.put("configform", "Product not available");
}

