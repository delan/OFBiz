/*
 * $Id: mruadd.bsh,v 1.1 2004/07/07 06:13:49 jonesde Exp $
 *
 * Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Revision: 1.1 $
 * @since      3.0

 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.content.widget.html.*;
import org.ofbiz.content.widget.form.*;
import org.ofbiz.content.ContentManagementWorker;
import org.ofbiz.content.content.ContentWorker;

import javax.servlet.*;
import javax.servlet.http.*;

GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");
entityName = page.getProperty("entityName");
lookupCaches = (Map)session.getAttribute("lookupCaches");
org.ofbiz.base.util.Debug.logInfo("entityName:" + entityName, "");
org.ofbiz.base.util.Debug.logInfo("in mruprep.bsh, lookupCaches:" + lookupCaches, "");
if(lookupCaches == null){
    lookupCaches	= new HashMap();
    session.setAttribute("lookupCaches", lookupCaches);
} 
cacheEntityName = entityName;
Debug.logInfo("cacheEntityName:" + cacheEntityName, "");
utilCache = (UtilCache)lookupCaches.get(cacheEntityName);
org.ofbiz.base.util.Debug.logInfo("utilCache:" + utilCache, "");
    if(utilCache == null){
        utilCache	= new UtilCache(cacheEntityName, 10, 0);
        lookupCaches.put(cacheEntityName, utilCache);
    }    

paramMap = UtilHttp.getParameterMap(request);
contentId = paramMap.get("contentId");
contentAssocDataResourceViewFrom = ContentWorker.getSubContentCache( delegator, null, null, contentId, null, null, null, null, null);
Debug.logInfo("in mruadd, contentAssocDataResourceViewFrom :" + contentAssocDataResourceViewFrom , "");
if (contentAssocDataResourceViewFrom != null) {
            session = request.getSession();
            lookupCaches = session.getAttribute("lookupCaches");
            viewPK = contentAssocDataResourceViewFrom.getPrimaryKey();
Debug.logInfo("in mruadd, viewPK :" + viewPK , "");
            if (viewPK != null) {
                ContentManagementWorker.mruAddByEntityName("ContentAssocDataResourceViewFrom", "", contentAssocDataResourceViewFrom, lookupCaches);
                Debug.logInfo("in mruadd, cache - contentAssocDataResourceViewFrom :" + lookupCaches.get("ContentAssocDataResourceViewFrom") , "");
            }

}
