/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Revision: 1.1 $
 *@since      3.0
 */
 
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.party.contact.*;

delegator = request.getAttribute("delegator");
orderId = request.getParameter("order_id");
context.put("orderId", orderId);

userLogin = session.getAttribute("userLogin");
party = userLogin.getRelatedOne("Party");
context.put("party", party);

returnTypes = delegator.findAll("ReturnType", UtilMisc.toList("sequenceId"));
context.put("returnTypes", returnTypes);

returnReasons = delegator.findAll("ReturnReason", UtilMisc.toList("sequenceId"));
context.put("returnReasons", returnReasons);

if (orderId != null) {
    fields = UtilMisc.toMap("orderId", orderId, "statusId", "ITEM_COMPLETED");
    orderItems = delegator.findByAnd("OrderItem", fields); 
    modifiedItems = new ArrayList();      
    if (orderItems != null) {
        oii = orderItems.iterator();        
        while (oii.hasNext()) {
            item = oii.next();
            returned = 0.00;
            returns = item.getRelated("ReturnItem");            
            if (returns != null) {
                rii = returns.iterator();
                while (rii.hasNext()) {
	                ritem = rii.next();
	                rh = ritem.getRelatedOne("ReturnHeader");
	                if (!rh.getString("statusId").equals("RETURN_CANCELLED")) {
	    	            returned += ritem.getDouble("returnQuantity");
	    	        }
    	        }
            }
            orderedQty = item.getDouble("quantity");
            item.set("quantity", (orderedQty - returned));
            modifiedItems.add(item);
        }        
    }     
    context.put("orderItems", modifiedItems);
}

context.put("shippingContactMechList", ContactHelper.getContactMech(party, "SHIPPING_LOCATION", "POSTAL_ADDRESS", false));   


