/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Rev:$
 *@since      3.1
 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;

delegator = request.getAttribute("delegator");
userLogin = session.getAttribute("userLogin");
partyId = userLogin.getString("partyId");

// indicator to display messages FROM this user
fromFlag = request.getParameter("showFromEvents");

// get the sort field
sortField = request.getParameter("sort");
if (sortField == null) sortField = "entryDate";
context.put("previousSort", sortField);

// previous sort field
previousSort = request.getParameter("previousSort");
if (previousSort != null && previousSort.equals(sortField)) {
    sortField = "-" + sortField;
}

// set the page parameters
viewIndex = 1;
try {
    viewIndex = Integer.valueOf((String) request.getParameter("VIEW_INDEX")).intValue();
} catch (Exception e) {
    viewIndex = 1;
}
context.put("viewIndex", viewIndex);

viewSize = 20;
try {
    viewSize = Integer.valueOf((String) request.getParameter("VIEW_SIZE")).intValue();
} catch (Exception e) {
    viewSize = 20;
}
context.put("viewSize", viewSize);

// get the logged in user's roles
partyRoles = delegator.findByAnd("PartyRole", UtilMisc.toMap("partyId", partyId));

// build the party role list
pri = partyRoles.iterator();
pRolesList = new ArrayList();
while (pri.hasNext()) {
    partyRole = (GenericValue) pri.next();
    if (!partyRole.getString("roleTypeId").equals("_NA_")) {
        pRolesList.add(new EntityExpr("roleTypeIdTo", EntityOperator.EQUALS, partyRole.getString("roleTypeId")));
    }
}

// add in events with no role attached
pRolesList.add(new EntityExpr("roleTypeIdTo", EntityOperator.EQUALS, null));

// limit to just this user's events, or those not attached to a user
partyList = new ArrayList();
partyList.add(new EntityExpr("partyIdTo", EntityOperator.EQUALS, null));
partyList.add(new EntityExpr("partyIdTo", EntityOperator.EQUALS, partyId));
if ("Y".equalsIgnoreCase(fromFlag)) {
    partyList.add(new EntityExpr("partyIdFrom", EntityOperator.EQUALS, null));
    partyList.add(new EntityExpr("partyIdFrom", EntityOperator.EQUALS, partyId));
}

// build the condition
expressions = new ArrayList();
expressions.add(new EntityConditionList(partyList, EntityOperator.OR));
expressions.add(new EntityConditionList(pRolesList, EntityOperator.OR));
condition = new EntityConditionList(expressions, EntityOperator.AND);

// specific fields to select
fieldsToSelect = null;

// sort order
orderBy = UtilMisc.toList(sortField);

// entity find options
findOpts = null;

// obtain the ELI
eli = delegator.findListIteratorByCondition("CommunicationEvent", condition, null, fieldsToSelect, orderBy, findOpts);

// get the entire list (todo move this to page by page)
events = eli.getCompleteList();
eli.close();
context.put("events", events);
