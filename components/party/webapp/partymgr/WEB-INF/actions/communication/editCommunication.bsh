/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Revision: 1.1 $
 *@since      2.2
 */

import org.ofbiz.core.util.*;
import org.ofbiz.core.entity.*;

delegator = request.getAttribute("delegator");
partyId = request.getParameter("party_id");
if (partyId == null) partyId = request.getParameter("partyId");
if (partyId == null) partyId = (String) request.getAttribute("partyId");
context.put("partyId", partyId);

party = delegator.findByPrimaryKey("Party", UtilMisc.toMap("partyId", partyId));
context.put("party", party);
context.put("lookupPerson", party.getRelatedOne("Person"));
context.put("lookupGroup", party.getRelatedOne("PartyGroup"));

eventId = request.getParameter("communicationEventId");
if (eventId != null) {
    event = delegator.findByPrimaryKey("CommunicationEvent", UtilMisc.toMap("communicationEventId", eventId));
    context.put("communicationEvent", event);
}

// get the event types
eventTypes = delegator.findAll("CommunicationEventType", UtilMisc.toList("description"));
context.put("eventTypes", eventTypes);

// get the event purposes types
purposeTypes = delegator.findAll("CommunicationEventPrpTyp", UtilMisc.toList("description"));
context.put("purposeTypes", purposeTypes);

// get status list
statuses = delegator.findByAnd("StatusItem", UtilMisc.toMap("statusTypeId", "COM_EVENT_STATUS"), UtilMisc.toList("sequenceId"));
context.put("statuses", statuses);

// get contact mech types
contactMechTypes = delegator.findAll("ContactMechType", UtilMisc.toList("description"));
context.put("contactMechTypes", contactMechTypes);

// get role types
roleTypes = delegator.findAll("RoleType", UtilMisc.toList("description"));
context.put("roleTypes", roleTypes);

