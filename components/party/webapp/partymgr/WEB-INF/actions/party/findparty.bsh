/*
 *  Copyright (c) 2001-2004 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Revision: 1.8 $
 *@since      3.0
 */

import java.util.*;
import java.sql.Timestamp;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;

delegator = request.getAttribute("delegator");
extraInfo = request.getParameter("extInfo");

externalLoginKey = LoginEvents.getExternalLoginKey(request);
externalKeyParam = externalLoginKey == null ? "" : "&externalLoginKey=" + externalLoginKey;
context.put("externalKeyParam",externalKeyParam);

// get the role types
roleTypes = delegator.findAll("RoleType", UtilMisc.toList("description"));
context.put("roleTypes", roleTypes);

// current role type
currentRoleTypeId = request.getParameter("roleTypeId");
if (currentRoleTypeId != null && currentRoleTypeId.length() > 0) {
    currentRole = delegator.findByPrimaryKeyCache("RoleType", UtilMisc.toMap("roleTypeId", currentRoleTypeId));
    context.put("currentRole", currentRole);
}

// current state
currentStateGeoId = request.getParameter("stateProvinceGeoId");
if (currentStateGeoId != null && currentStateGeoId.length() > 0) {
    currentStateGeo = delegator.findByPrimaryKeyCache("Geo", UtilMisc.toMap("geoId", currentStateGeoId));
    context.put("currentStateGeo", currentStateGeo);
}

// set the page parameters
viewIndex = 1;
try {
    viewIndex = Integer.valueOf((String) request.getParameter("VIEW_INDEX")).intValue();
} catch (Exception e) {
    viewIndex = 1;
}
context.put("viewIndex", viewIndex);

viewSize = 20;
try {
    viewSize = Integer.valueOf((String) request.getParameter("VIEW_SIZE")).intValue();
} catch (Exception e) {
    viewSize = 20;
}
context.put("viewSize", viewSize);

// get the lookup flag
lookupFlag = request.getParameter("lookupFlag");

// blank param list
paramList = "";

partyList = null;
partyListSize = 0;
lowIndex = 0;
highIndex = 0;

if (lookupFlag != null && lookupFlag.equalsIgnoreCase("Y")) {
    showAll = request.getParameter("showAll") != null ? request.getParameter("showAll") : "N";
    extInfo = request.getParameter("extInfo");
    paramList = paramList + "&lookupFlag=" + lookupFlag + "&showAll=" + showAll + "&extInfo=" + extInfo;

    // the lookup entity name
    entityName = "PartySearchView";
    lookupErrorMessage = null;

    // create the dynamic view entity
    dynamicView = new DynamicViewEntity();

    // default view settings
    dynamicView.addMemberEntity("PT", "Party");
    dynamicView.addMemberEntity("UL", "UserLogin");
    dynamicView.addAlias("PT", "partyId");
    dynamicView.addAlias("PT", "partyTypeId");
    dynamicView.addAlias("UL", "userLoginId");
    dynamicView.addViewLink("PT", "UL", Boolean.TRUE, ModelKeyMap.makeKeyMapList("partyId"));
    dynamicView.addRelation("one-nofk", "", "PartyType", ModelKeyMap.makeKeyMapList("partyTypeId"));

    // define the main condition & expression list
    andExprs = new ArrayList();
    mainCond = null;

    // check for a partyId (happens in some browsers)
    partyId = request.getParameter("partyId");
    if (partyId != null && partyId.length() > 0) {
        paramList = paramList + "&partyId=" + partyId;
        andExprs.add(new EntityExpr("partyId", EntityOperator.EQUALS, partyId));
    }

    // ----
    // UserLogin Fields
    // ----

    // filter on user login
    userLoginId = request.getParameter("userLoginId");
    if (userLoginId != null && userLoginId.length() > 0) {
        paramList = paramList + "&userLoginId=" + userLoginId;
        andExprs.add(new EntityExpr("userLoginId", true, EntityOperator.LIKE, "%"+userLoginId+"%", true));
    }

    // ----
    // PartyGroup Fields
    // ----

    // filter on groupName
    groupName = request.getParameter("groupName");
    if (groupName != null && groupName.length() > 0) {
        paramList = paramList + "&groupName=" + groupName;

        // modify the dynamic view
        dynamicView.addMemberEntity("PG", "PartyGroup");
        dynamicView.addAlias("PE", "firstName");
        dynamicView.addViewLink("PT", "PG", Boolean.FALSE, ModelKeyMap.makeKeyMapList("partyId"));

        // add the expr
        andExprs.add(new EntityExpr("groupName", true, EntityOperator.LIKE, "%"+groupName+"%", true));
    }

    // ----
    // Person Fields
    // ----

    // get the params
    firstName = request.getParameter("firstName");
    lastName = request.getParameter("lastName");

    // modify the dynamic view
    if ((firstName != null && firstName.length() > 0) || (lastName != null && lastName.lenght() > 0)) {
        dynamicView.addMemberEntity("PE", "Person");
        dynamicView.addAlias("PE", "firstName");
        dynamicView.addAlias("PE", "lastName");
        dynamicView.addViewLink("PT", "PE", Boolean.FALSE, ModelKeyMap.makeKeyMapList("partyId"));
    }

    // filter on firstName
    if (firstName != null && firstName.length() > 0) {
        paramList = paramList + "&firstName=" + firstName;
        andExprs.add(new EntityExpr("firstName", true, EntityOperator.LIKE, "%"+firstName+"%", true));
    }

    // filter on lastName
    if (lastName != null && lastName.length() > 0) {
        paramList = paramList + "&lastName=" + lastName;
        andExprs.add(new EntityExpr("lastName", true, EntityOperator.LIKE, "%"+lastName+"%", true));
    }

    // ----
    // RoleType Fields
    // ----

    // filter on role member
    roleType = request.getParameter("roleTypeId");
    if (roleType != null && !"ANY".equals(roleType)) {
        paramList = paramList + "&roleTypeId=" + roleType;
        andExprs.add(new EntityExpr("roleTypeId", EntityOperator.EQUALS, roleType));
    }

    // ----
    // PostalAddress fields
    // ----
    if (extraInfo != null && extraInfo.equals("P")) {
        // filter on address1
        address1 = request.getParameter("address1");
        if (address1 != null && address1.length() > 0) {
            paramList = paramList + "&address1=" + address1;
            andExprs.add(new EntityExpr("address1", true, EntityOperator.LIKE, "%"+address1+"%", true));
        }

        // filter on address2
        address2 = request.getParameter("address2");
        if (address2 != null && address2.length() > 0) {
            paramList = paramList + "&address2=" + address2;
            andExprs.add(new EntityExpr("address2", true, EntityOperator.LIKE, "%"+address2+"%", true));
        }

        // filter on city
        city = request.getParameter("city");
        if (city != null && city.length() > 0) {
            paramList = paramList + "&city=" + city;
            andExprs.add(new EntityExpr("city", true, EntityOperator.LIKE, "%"+city+"%", true));
        }

        // filter on state geo
        stateGeo = request.getParameter("stateProvinceGeoId");
        if (stateGeo != null && !"ANY".equals(stateGeo)) {
            paramList = paramList + "&stateGeo=" + stateGeo;
            andExprs.add(new EntityExpr("stateProvinceGeoId", EntityOperator.EQUALS, stateGeo));
        }

        // filter on postal code
        postalCode = request.getParameter("postalCode");
        if (postalCode != null && postalCode.length() > 0) {
            paramList = paramList + "&postalCode=" + postalCode;
            andExprs.add(new EntityExpr("postalCode", true, EntityOperator.LIKE, "%"+postalCode+"%", true));
        }
    }

    // ----
    // Generic CM Fields
    // ----
    if (extraInfo != null && extraInfo.equals("O")) {
        // filter on infoString
        infoString = request.getParameter("infoString");
        if (infoString != null && infoString.length() > 0) {
            paramList = paramList + "&infoString=" + infoString;
            andExprs.add(new EntityExpr("infoString", true, EntityOperator.LIKE, "%"+infoString+"%", true));
        }
    }

    // ----
    // TelecomNumber Fields
    // ----
    if (extraInfo != null && extraInfo.equals("T")) {
        // filter on countryCode
        countryCode = request.getParameter("countryCode");
        if (countryCode != null && countryCode.length() > 0) {
            paramList = paramList + "&countryCode=" + countryCode;
            andExprs.add(new EntityExpr("countryCode", true, EntityOperator.LIKE, "%"+countryCode+"%", true));
        }

        // filter on areaCode
        areaCode = request.getParameter("areaCode");
        if (areaCode != null && areaCode.length() > 0) {
            paramList = paramList + "&areaCode=" + areaCode;
            andExprs.add(new EntityExpr("areaCode", true, EntityOperator.LIKE, "%"+areaCode+"%", true));
        }

        // filter on contact number
        contactNumber = request.getParameter("contactNumber");
        if (contactNumber != null && contactNumber.length() > 0) {
            paramList = paramList + "&contactNumber=" + contactNumber;
            andExprs.add(new EntityExpr("contactNumber", true, EntityOperator.LIKE, "%"+contactNumber+"%", true));
        }
    }

    // ---- End of Dynamic View Creation

    // build the main condition
    if (andExprs.size() > 0 || showAll.equalsIgnoreCase("Y")) mainCond = new EntityConditionList(andExprs, EntityOperator.AND);

    // do the lookup
    if (lookupErrorMessage == null && mainCond != null) {
        // fields we need to select; will be used to set distinct
        List fieldsToSelect = new ArrayList();
        List orderBy = new ArrayList();
        fieldsToSelect.add("partyId");
        fieldsToSelect.add("partyTypeId");
        fieldsToSelect.add("userLoginId");

        // Person
        if ((firstName != null && firstName.length() > 0) || (lastName != null && lastName.length() > 0)) {
            fieldsToSelect.add("firstName");
            fieldsToSelect.add("lastName");
            orderBy.add("lastName");
            orderBy.add("firstName");
        }
        // PartyGroup
        if (groupName != null && groupName.length() > 0) {
            fieldsToSelect.add("groupName");
            orderBy.add("groupName");
        }
        // RoleType
        if (roleType != null && !"ANY".equals(roleType)) {
            fieldsToSelect.add("roleTypeId");
        }
        // PostalAddress
        if (extraInfo != null && extraInfo.equals("P")) {
            fieldsToSelect.add("postalCode");
        }
        // TelecomNumber
        if (extraInfo != null && extraInfo.equals("T")) {
            fieldsToSelect.add("areaCode");
        }
        // ContactMech
        if (extraInfo != null && extraInfo.equals("O")) {
            fieldsToSelect.add("infoString");
        }

        // set distinct on so we only get one row per order
        EntityFindOptions findOpts = new EntityFindOptions(true, EntityFindOptions.TYPE_SCROLL_INSENSITIVE, EntityFindOptions.CONCUR_READ_ONLY, true);

        // using list iterator
        EntityListIterator pli = delegator.findListIteratorByCondition(dynamicView, mainCond, null, fieldsToSelect, orderBy, findOpts);

        // get the indexes for the partial list
        lowIndex = (((viewIndex - 1) * viewSize) + 1);
        highIndex = viewIndex * viewSize;

        // get the partial list for this page
        partyList = pli.getPartialList(lowIndex, viewSize);
        if (partyList == null) {
            partyList = new ArrayList();
        }

        // attempt to get the full size
        pli.last();
        partyListSize = pli.currentIndex();
        if (highIndex > partyListSize) {
            highIndex = partyListSize;
        }

        // close the list iterator
        pli.close();
    } else {
        partyList = new ArrayList();
        partyListSize = 0;
    }

    context.put("partyList", partyList);
    context.put("partyListSize", partyListSize);

    if (lookupErrorMessage != null) {
        context.put("lookupErrorMessage", lookupErrorMessage);
    }
}

context.put("paramList", paramList);
context.put("highIndex", highIndex);
context.put("lowIndex", lowIndex);
