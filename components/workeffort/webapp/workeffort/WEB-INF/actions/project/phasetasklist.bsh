/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Rev:$
 *@since      2.2
 */
 
import java.util.*;
import org.ofbiz.security.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.base.util.*;
import org.ofbiz.service.*;
import org.ofbiz.workeffort.workeffort.*;
import org.ofbiz.workeffort.project.*;

delegator = request.getAttribute("delegator");
GenericValue userLogin = (GenericValue) context.getSession().getAttribute("userLogin");

String phaseWorkEffortId = context.getRequest().getParameter("phaseWorkEffortId");

// if there was no parameter, check the request attribute, this may be a newly created entity
if (phaseWorkEffortId == null)
    phaseWorkEffortId = (String) context.getRequest().getAttribute("phaseWorkEffortId");


Collection relatedPhaseWorkEfforts = null;
		
if (userLogin != null && userLogin.get("partyId") != null) {
    try {
        relatedPhaseWorkEfforts = delegator.findByAnd("WorkEffortAssoc",
                UtilMisc.toList(new EntityExpr("workEffortIdFrom", EntityOperator.EQUALS, phaseWorkEffortId),
                        new EntityExpr("workEffortAssocTypeId", EntityOperator.EQUALS, "WORK_EFF_BREAKDOWN")));
    } catch (GenericEntityException e) {
        Debug.log(e);
    }
}

Collection validPhaseWorkEfforts = new ArrayList();

if (relatedPhaseWorkEfforts != null) {
    Iterator relatedPhaseWorkEffortsIter = relatedPhaseWorkEfforts.iterator();

    try {
        while (relatedPhaseWorkEffortsIter.hasNext()) {
            GenericValue phaseWorkEffortAssoc = (GenericValue) relatedPhaseWorkEffortsIter.next();
            GenericValue phaseWorkEffort = phaseWorkEffortAssoc.getRelatedOne("ToWorkEffort");

            // only get phases
            if ("TASK".equals(phaseWorkEffort.getString("workEffortTypeId"))) {
                validPhaseWorkEfforts.add(phaseWorkEffort);
            }
        }
    } catch (GenericEntityException e) {
        Debug.log(e);
    }
}
context.put("tasks",validPhaseWorkEfforts);

// get workeffort for the current phase
String phaseWorkEffortId = request.getParameter("phaseWorkEffortId");
String projectWorkEffortId = null;
GenericValue phaseWorkEffortStatus = null;
GenericValue phaseWorkEffort = delegator.findByPrimaryKey("WorkEffort", UtilMisc.toMap("workEffortId", phaseWorkEffortId));
if (phaseWorkEffort != null) {
    phaseWorkEffortStatus = phaseWorkEffort.getRelatedOne("CurrentStatusItem");

    // get workeffort for current project - assume that the first project related to this phase is it
    Collection projectAssocColl = phaseWorkEffort.getRelated("ToWorkEffortAssoc");
    if (projectAssocColl.size() > 0) {
        GenericValue projectWorkEffortStatus = null;
        GenericValue projectWorkEffort = ((GenericValue)projectAssocColl.iterator().next()).getRelatedOne("FromWorkEffort");
        if (projectWorkEffort != null) {
            projectWorkEffortStatus = projectWorkEffort.getRelatedOne("CurrentStatusItem");
            projectWorkEffortId = projectWorkEffort.getString("workEffortId");
        }
        context.put("projectWorkEffort", projectWorkEffort);
        context.put("projectWorkEffortId", projectWorkEffortId);
        context.put("projectWorkEffortStatus", projectWorkEffortStatus);
    }
}

context.put("phaseWorkEffort", phaseWorkEffort);
context.put("phaseWorkEffortId", phaseWorkEffortId);
context.put("phaseWorkEffortStatus", phaseWorkEffortStatus);
