/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones
 *@author     Brad Steiner
 *@author     Jacopo Cappellato (tiz@sastau.it)
 *@version    $Revision: 1.3 $
 *@since      2.2
 */

import java.util.*;
import java.sql.*;
import java.io.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.content.widget.html.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

if(security.hasEntityPermission("MANUFACTURING", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}
nowDate = UtilDateTime.nowDate();
context.put("nowDate", nowDate);

String nowTimestampString = UtilDateTime.nowTimestamp().toString();
context.put("nowTimestampString", nowTimestampString);

boolean useValues = true;
if (request.getAttribute("_ERROR_MESSAGE_") != null) useValues = false;

String productId = request.getParameter("productId");
if (productId != null) context.put("productId", productId);

String productIdTo = request.getParameter("productIdTo");
String updateMode = request.getParameter("UPDATE_MODE");

if (productIdTo != null) context.put("productIdTo", productIdTo);

String productAssocTypeId = request.getParameter("productAssocTypeId");
if (productAssocTypeId != null) context.put("productAssocTypeId", productAssocTypeId);

String fromDateStr = request.getParameter("fromDate");

Timestamp fromDate = null;
if (fromDateStr != null && fromDateStr.length() > 0) fromDate = Timestamp.valueOf(fromDateStr);
if (fromDate == null) fromDate = (Timestamp)request.getAttribute("ProductAssocCreateFromDate");
if (fromDate != null) context.put("fromDate", fromDate);

GenericValue product = delegator.findByPrimaryKey("Product", UtilMisc.toMap("productId", productId));
if (product != null) context.put("product", product);

GenericValue productAssoc = delegator.findByPrimaryKey("ProductAssoc", UtilMisc.toMap("productId", productId, "productIdTo", productIdTo, "productAssocTypeId", productAssocTypeId, "fromDate", fromDate));
if (updateMode != null) {
    productAssoc = null;
    context.remove("productIdTo");
}
if (productAssoc != null) {
    context.put("productAssoc", productAssoc);
}

if("true".equalsIgnoreCase((String)request.getParameter("useValues"))) useValues = true;
if(productAssoc == null) useValues = false;

context.put("useValues", useValues);

Collection assocTypes = delegator.findByAnd("ProductAssocType", UtilMisc.toMap("parentTypeId", "PRODUCT_COMPONENT"), UtilMisc.toList("productAssocTypeId", "description"));
context.put("assocTypes", assocTypes);

if (product != null) {
    List assocFromProducts = product.getRelated("MainProductAssoc", (productAssocTypeId != null? UtilMisc.toMap("productAssocTypeId", productAssocTypeId): null), UtilMisc.toList("sequenceNum"));
    if (assocFromProducts != null) context.put("assocFromProducts", assocFromProducts);

    List assocToProducts = product.getRelatedByAnd("AssocProductAssoc", (productAssocTypeId != null? UtilMisc.toMap("productAssocTypeId", productAssocTypeId): null));
    if (assocTOProducts != null) context.put("assocToProducts", assocToProducts);
}

