/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Revision: 1.2 $
 *@since      2.2
*/

import java.util.*;
import java.sql.Timestamp;
import org.ofbiz.entity.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.base.util.*;


delegator = request.getAttribute("delegator");

// get the part types
partTypes = delegator.findByAnd("ProductType", UtilMisc.toMap("parentTypeId", "GOOD"), UtilMisc.toList("productTypeId", "description"));
context.put("partTypes", partTypes);

// get the lookup flag
lookupFlag = request.getParameter("lookupFlag");

// blank param list
paramList = "";
partList = null;
if (lookupFlag != null) {
    paramList = paramList + "&lookupFlag=" + lookupFlag;
    lookupErrorMessage = null;   
    andExprs = new ArrayList();
    entityName = "Product"; 

    // define the main condition
    mainCond = null;
    // now do the filtering
    if (lookupErrorMessage == null) {               
        partId = request.getParameter("partId");
        partType = request.getParameter("partType");
        if (partType == null) partType = "ANY";
        paramList = paramList + "&partType=" + partType;        
        if (partId != null && partId.length() > 0) {
            paramList = paramList + "&partId=" + partId;
            andExprs.add(new EntityExpr("productId", EntityOperator.EQUALS, partId));
        }
        if (!"ANY".equals(partType)) {            
            andExprs.add(new EntityExpr("productTypeId", EntityOperator.EQUALS, partType));
        }
        mainCond = new EntityConditionList(andExprs, EntityOperator.AND);        
    }
    if (lookupErrorMessage == null && mainCond != null) {
        // do the lookup
        partList = delegator.findByCondition(entityName, mainCond, null, null);            
    }

    context.put("partList", partList);
   
    if (lookupErrorMessage != null) {
        context.put("lookupErrorMessage", lookupErrorMessage);
    }
}

context.put("paramList", paramList);

// set the page parameters
viewIndex = 0;
try {
    viewIndex = Integer.valueOf((String) request.getParameter("VIEW_INDEX")).intValue();
} catch (Exception e) {
    viewIndex = 0;
}
viewSize = 20;
try {
    viewSize = Integer.valueOf((String) request.getParameter("VIEW_SIZE")).intValue();
} catch (Exception e) {
    viewSize = 20;
}
listSize = 0;
if (partList != null) {
    listSize = partList.size();
}
lowIndex = viewIndex * viewSize;
highIndex = (viewIndex + 1) * viewSize;
if (listSize < highIndex) {
    highIndex = listSize;
}
context.put("viewIndex", viewIndex);
context.put("listSize", listSize);
context.put("highIndex", highIndex);
context.put("lowIndex", lowIndex);
context.put("viewSize", viewSize);
