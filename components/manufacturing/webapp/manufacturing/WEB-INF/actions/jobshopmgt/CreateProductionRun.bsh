/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@author      Olivier.Heintz@nereide.biz
 *@version    $Revision: 1.2 $
 *@since      3.0
 */

import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;

// requestParams = UtilHttp.getParameterMap(request);
HashMap productionRunData= new HashMap();
productId = request.getParameter("productId");
if (productId != null) productionRunData.put("productId",productId);
quantity = request.getParameter("quantity");
if (quantity != null) productionRunData.put("quantity",quantity);
startDate = request.getParameter("startDate");
if (startDate != null) productionRunData.put("startDate",startDate);
routingId = request.getParameter("routingId");
if (routingId != null) productionRunData.put("routingId",routingId);
List msgResult = new LinkedList();
msgResult = request.getAttribute("msgResult");
// if (msgResult == null) { msgResult.add("truc"); }

/*UtilMisc.toMap("routing","crac") if (msgResult != null && ! msgResult.isEmpty()) {
	Iterator ite = msgResult.iterator();

delegator = request.getAttribute("delegator");
if (calendarId == null) {
    calendarId = request.getAttribute("calendarId");
}
if (calendarId != null) {
    techDataCalendar = delegator.findByPrimaryKey("TechDataCalendar", UtilMisc.toMap("calendarId", calendarId));
    context.put("techDataCalendar", techDataCalendar);
}
List allCalendarWeek = delegator.findAll("TechDataCalendarWeek");
context.put("calendarWeeks", allCalendarWeek);

calendarData = context.get("techDataCalendar");
if (!tryEntity) calendarData = requestParams;
if (calendarData == null) calendarData = new HashMap();
 */

tryEntity = true;
errorMessage = request.getAttribute("_ERROR_MESSAGE_");
if (errorMessage != null && errorMessage.length() > 0) {
    tryEntity = false;    
}

context.put("msgResult", msgResult);
context.put("productionRunData", productionRunData);


