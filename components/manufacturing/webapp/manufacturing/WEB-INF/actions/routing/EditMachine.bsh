/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Olivier.Heintz@nereide.biz
 *@version    $Revision: 1.1 $
 *@since      3.0
 */


import java.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.content.widget.html.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

if(security.hasEntityPermission("MANUFACTURING", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}
GenericValue techDataMachine = null;

/* List allMachines = delegator.findAll("TechDataMachine"); */
List allMachines = delegator.findByAnd("FixedAsset",UtilMisc.toMap("fixedAssetTypeId", "PRODUCTION_EQUIPMENT"));
List allMachineGroups = delegator.findByAnd("FixedAsset",UtilMisc.toMap("fixedAssetTypeId", "GROUP_EQUIPMENT"));
List machinesDatas = new LinkedList();
Iterator machinesIter = allMachines.iterator();
while (machinesIter.hasNext()) {
    GenericValue machine = (GenericValue) machinesIter.next();
    GenericValue machineGroup = machine.getRelatedOne("ParentFixedAsset");
    GenericValue calendar = machine.getRelatedOne("TechDataCalendar");
    machinesDatas.add(UtilMisc.toMap("machine", machine, "machineGroup", machineGroup,"calendar",calendar));
}

HtmlFormWrapper listMachineWrapper = new HtmlFormWrapper("/routing/MachineForms.xml", "ListMachine", request, response);
listMachineWrapper.putInContext("machinesDatas", machinesDatas);
listMachineWrapper.putInContext("uiLabelMap", request.getAttribute("uiLabelMap"));
context.put("listMachineWrapper",listMachineWrapper);
context.put("allMachines",allMachines);

String fixedAssetId = request.getParameter("fixedAssetId");
if (fixedAssetId == null)  fixedAssetId = request.getAttribute("fixedAssetId");
if (fixedAssetId != null) {
	techDataMachine = delegator.findByPrimaryKey("FixedAsset", UtilMisc.toMap("fixedAssetId", fixedAssetId));
	if (techDataMachine != null) { 
		machineGroup = techDataMachine.getRelatedOne("ParentFixedAsset");
		HtmlFormWrapper updateMachineWrapper = new HtmlFormWrapper("/routing/MachineForms.xml", "UpdateMachine", request, response);
		updateMachineWrapper.putInContext("machine", techDataMachine);
		updateMachineWrapper.putInContext("allMachineGroups", allMachineGroups);
		updateMachineWrapper.putInContext("uiLabelMap", request.getAttribute("uiLabelMap"));
		context.put("machine", techDataMachine);
		context.put("updateMachineWrapper", updateMachineWrapper);
	}
}

HtmlFormWrapper addMachineWrapper = new HtmlFormWrapper("/routing/MachineForms.xml", "AddMachine", request, response);
addMachineWrapper.putInContext("uiLabelMap", request.getAttribute("uiLabelMap"));
addMachineWrapper.putInContext("allMachineGroups", allMachineGroups);
context.put("addMachineWrapper", addMachineWrapper);



