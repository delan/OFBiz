/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Olivier.Heintz@nereide.biz
 *@version    $Revision: 1.3 $
 *@since      3.0
 */


import java.sql.Timestamp;
import java.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.content.widget.html.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

String workEffortIdFrom = request.getParameter("workEffortIdFrom");
String sequenceNum = request.getParameter("sequenceNum");
String workEffortIdTo = request.getParameter("workEffortIdTo");
String fromDateSt = request.getParameter("fromDate");
Timestamp fromDate = null;

try {fromDate = Timestamp.valueOf(fromDateSt);}
catch (IllegalArgumentException e){ fromDate=null; }
if (workEffortIdFrom == null)  workEffortIdFrom = request.getAttribute("workEffortIdFrom");
if (workEffortIdFrom != null) {
	List allRoutingTasks = delegator.findByAnd("WorkEffortAssocView",UtilMisc.toMap("workEffortIdFrom", workEffortIdFrom,"workEffortAssocTypeId", "ROUTING_COMPONENT"),UtilMisc.toList("sequenceNum", "fromDate"));
	if (workEffortIdTo != null && fromDate != null) {
		routingTaskAssoc = delegator.findByPrimaryKey("WorkEffortAssoc", UtilMisc.toMap("workEffortIdFrom", workEffortIdFrom,"workEffortIdTo", workEffortIdTo,"workEffortAssocTypeId", "ROUTING_COMPONENT","fromDate",fromDate));
		routingTask = delegator.findByPrimaryKey("WorkEffort", UtilMisc.toMap("workEffortId", workEffortIdTo));
		machineGroups = delegator.findByAnd("FixedAsset", UtilMisc.toMap("fixedAssetTypeId", "GROUP_EQUIPMENT"));
		allTaskPurposeTypes = delegator.findByLike("WorkEffortPurposeType", UtilMisc.toMap("workEffortPurposeTypeId", "ROU%"));
		HtmlFormWrapper updateRoutingTaskAssocWrapper = new HtmlFormWrapper("/routing/RoutingTaskForms.xml", "UpdateRoutingTaskAssoc", request, response);
		updateRoutingTaskAssocWrapper.putInContext("uiLabelMap", request.getAttribute("uiLabelMap"));
		updateRoutingTaskAssocWrapper.putInContext("routingTaskAssoc", routingTaskAssoc);
		updateRoutingTaskAssocWrapper.putInContext("routingTask", routingTask);
		context.put("updateRoutingTaskAssocWrapper",updateRoutingTaskAssocWrapper);
		context.put("routingTask",routingTask);
		context.put("machineGroups",machineGroups);
		context.put("allTaskPurposeTypes",allTaskPurposeTypes);
	}
//	List allRoutingTasks = new LinkedList();
//	Iterator routingTasksIter = routingWorkEffortAssoc.iterator();
//	while (routingTasksIter.hasNext()) {
//    	GenericValue routingTaskA = (GenericValue) routingTasksIter.next();
//    	GenericValue routingTask = routingTaskA.getRelatedOne("ToWorkEffort");
//    	routingTaskA.put("workEffortName",routingTask.get("workEffortName"));
//    	allRoutingTasks.add(routingTaskA);
//	}
	
	HtmlFormWrapper listRoutingTaskAssocWrapper = new HtmlFormWrapper("/routing/RoutingTaskForms.xml", "ListRoutingTaskAssoc", request, response);
	listRoutingTaskAssocWrapper.putInContext("uiLabelMap", request.getAttribute("uiLabelMap"));
	listRoutingTaskAssocWrapper.putInContext("allRoutingTasks", allRoutingTasks);
	context.put("allRoutingTasks",allRoutingTasks);
	context.put("listRoutingTaskAssocWrapper",listRoutingTaskAssocWrapper);
}



