<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  -->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
    <simple-method method-name="postBlogEntry" short-description="Post a new Blog Entry">
        <set field="contentAssocTypeId" from-field="parameters.contentAssocTypeId"/>
        <set field="ownerContentId" from-field="parameters.blogContentId"/>
        <set field="contentIdFrom" from-field="parameters.blogContentId"/>         
        <!-- determine of we need to create complex template structure or simple content structure -->
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="parameters._uploadedFile_fileName"/>
                    </not>
                    <not>
                        <if-empty field="parameters.textData"/>
                    </not>
                </and>
            </condition>
            <then>
                <!-- complex template structure (image & text) -->
                <set field="createMain.dataResourceId" from-field="parameters.dataResourceId"/>
                <set field="createMain.contentAssocTypeId"  from-field="contentAssocTypeId"/>
                <set field="createMain.contentName" from-field="parameters.contentName"/>
                <set field="createMain.description" from-field="parameters.description"/>
                <set field="createMain.statusId" from-field="parameters.statusId"/>
                <set field="createMain.contentIdFrom" from-field="contentIdFrom"/>                 
                <set field="createMain.partyId" from-field="userLogin.partyId"/>
                <set field="createMain.ownerContentId" from-field="ownerContentId"/>
                <set field="createMain.dataTemplateTypeId" value="SCREEN_COMBINED"/>
                <set field="createMain.mapKey" value="MAIN"/>
                <call-service service-name="createContent" in-map-name="createMain">
                    <result-to-field result-name="contentId" field="contentId"/>
                </call-service>
                <!-- reset contentIdFrom to new contentId -->
                <set field="contentAssocTypeId" value="SUB_CONTENT"/>
                <set field="contentIdFrom" from-field="contentId"/>                                
            </then>
        </if>
        
        <if>
            <condition>
                <not>
                    <if-empty field="parameters._uploadedFile_fileName"/>
                </not>
            </condition>
            <then>
                <!-- upload a picture -->
                <set field="createImage.dataResourceTypeId" value="LOCAL_FILE"/>
                <set field="createImage.dataTemplateTypeId" value="NONE"/>
                <set field="createImage.mapKey" value="IMAGE"/>
                <set field="createImage.ownerContentId" from-field="ownerContentId"/>
                <set field="createImage.contentName" from-field="parameters.contentName"/>
                <set field="createImage.description" from-field="parameters.description"/>
                <set field="createImage.statusId" from-field="parameters.statusId"/>
                <set field="createImage.contentAssocTypeId"  from-field="contentAssocTypeId"/>
                <set field="createImage.contentIdFrom" from-field="contentIdFrom"/>
                <set field="createImage.partyId" from-field="userLogin.partyId"/>
                <set field="createImage.isPublic" value="Y"/>
                <set field="createImage.uploadedFile" from-field="parameters.uploadedFile"/>
                <set field="createImage._uploadedFile_fileName" from-field="parameters._uploadedFile_fileName"/>
                <set field="createImage._uploadedFile_contentType" from-field="parameters._uploadedFile_contentType"/>
                <call-service service-name="createContentFromUploadedFile" in-map-name="createImage">
                    <result-to-field result-name="contentId" field="imageContentId"/>
                </call-service>
                <if-empty field="contentId">
                    <set field="contentIdFrom" from-field="imageContentId"/>
                    <set field="contentId" from-field="imageContentId"/>
                    <set field="contentAssocTypeId" value="SUB_CONTENT"/>
                </if-empty>
            </then>
        </if>
        
        <if>
            <condition>
                <not>
                    <if-empty field="parameters.textData"/>
                </not>
            </condition>
            <then>
                <!-- create text data -->
                <set field="createText.dataResourceTypeId" value="ELECTRONIC_TEXT"/>
                <set field="createText.contentPurposeTypeId" value="ARTICLE"/>
                <set field="createText.dataTemplateTypeId" value="NONE"/>
                <set field="createText.mapKey" value="MAIN"/>
                <set field="createText.ownerContentId" from-field="ownerContentId"/>
                <set field="createText.contentName" from-field="parameters.contentName"/>
                <set field="createText.description" from-field="parameters.description"/>
                <set field="createText.statusId" from-field="parameters.statusId"/>
                <set field="createText.contentAssocTypeId"  from-field="contentAssocTypeId"/>
                <set field="createText.textData" from-field="parameters.textData"/>
                <set field="createText.contentIdFrom" from-field="contentIdFrom"/>
                <set field="createText.partyId" from-field="userLogin.partyId"/>
                <log level="always" message="calling createTextContent with map: ${createText}"/>
                <call-service service-name="createTextContent" in-map-name="createText">
                    <result-to-field result-name="contentId" field="textContentId"/>
                </call-service>
                <if-empty field="contentId">
                    <set field="contentIdFrom" from-field="textContentId"/>
                    <set field="contentId" from-field="textContentId"/>
                    <set field="contentAssocTypeId" value="SUB_CONTENT"/>
                </if-empty>
            </then>
        </if>
        
        <!-- we should have a primary (at least) contentId -->
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="contentId"/>
                    </not>
                    <not>
                        <if-empty field="parameters.summaryData"/>
                    </not>
                </and>            
            </condition>
            <then>
                <!-- create the summary data -->
                <set field="createSummary.dataResourceTypeId" value="ELECTRONIC_TEXT"/>
                <set field="createSummary.contentPurposeTypeId" value="ARTICLE"/>
                <set field="createSummary.dataTemplateTypeId" value="NONE"/>
                <set field="createSummary.mapKey" value="SUMMARY"/>
                <set field="createSummary.ownerContentId" from-field="ownerContentId"/>
                <set field="createSummary.contentName" from-field="parameters.contentName"/>
                <set field="createSummary.description" from-field="parameters.description"/>
                <set field="createSummary.statusId" from-field="parameters.statusId"/>
                <set field="createSummary.contentAssocTypeId"  from-field="contentAssocTypeId"/>
                <set field="createSummary.textData" from-field="parameters.summaryData"/>
                <set field="createSummary.contentIdFrom" from-field="contentIdFrom"/>
                <set field="createSummary.partyId" from-field="userLogin.partyId"/>
                <call-service service-name="createTextContent" in-map-name="createSummary"/>
            </then>
        </if>
        <field-to-result field="contentId"/>
    </simple-method>
    
    <simple-method method-name="getOwnedOrPublishedBlogEntries" short-description="Get blog entries that the user owns or are published">
        <entity-condition entity-name="ContentAssocViewTo" use-cache="false" list="unfilteredList">
            <condition-list combine="and">
                <condition-expr field-name="contentIdStart" operator="equals" from-field="parameters.contentId"/>
                <condition-expr field-name="caContentAssocTypeId" operator="equals" value="PUBLISH_LINK"/>
                <condition-expr field-name="caThruDate" operator="equals" value=""/>
            </condition-list>
            <order-by field-name="caFromDate DESC"/>
        </entity-condition>
        <set field="blogList[]"/>
        <iterate entry="view" list="unfilteredList">
            <set-service-fields service-name="genericContentPermission" map="view" to-map="mapIn"/>
            <set field="mapIn.mainAction" value="VIEW"/>
            <call-service service-name="genericContentPermission" in-map-name="mapIn">
                <result-to-field result-name="hasPermission" field="hasPermission"/>
            </call-service>
            <if-compare operator="equals" field="hasPermission" value="true" type="Boolean">
                <set field="blogList[]" from-field="view"/>
                <else>
                    <set field="mapIn.mainAction" value="UPDATE"/>
                    <call-service service-name="genericContentPermission" in-map-name="mapIn">
                        <result-to-field result-name="hasPermission" field="hasPermission"/>
                    </call-service>
                    <if-compare operator="equals" field="hasPermission" value="true" type="Boolean">
                        <set field="blogList[]" from-field="view"/>
                    </if-compare>                        
                </else>
            </if-compare>
        </iterate>
        <field-to-result field="blogList" result-name="blogList"/>
    </simple-method>

    <simple-method method-name="getBlogEntry" short-description="Get all the info for a blog article">
        <entity-one entity-name="Content" value-field="content"/>
        <field-to-result field="content.contentId" result-name="contentId"/>
        <field-to-result field="content.contentName" result-name="contentName"/>
        <field-to-result field="content.description" result-name="description"/>
        <field-to-result field="content.statusId" result-name="statusId"/>
        <field-to-result field="content.datResourceId" result-name="templateDataResourceId"/>
        <get-related value-field="Content" relation-name="ContentAssoc" list="rawAssocs"/>
        <filter-list-by-date list="rawAssocs" to-list="assocs"/>
        <iterate entry="assoc" list="assocs">
            <if-compare field="assoc.mapKey" value="MAIN" operator="equals">
                <get-related-one value-field="assoc" relation-name="Content" to-value-field="content"/>
                <get-related-one value-field="content" relation-name="DataResource" to-value-field="dataResource"/>
                <get-related-one value-field="dataResource" relation-name="ElectronicText" to-value-field="text"/>
                <field-to-result field="text.textData" result-name="article"/>
            </if-compare>
            <if-compare field="assoc.mapKey" value="SUMMARY" operator="equals">
                <get-related-one value-field="assoc" relation-name="Content" to-value-field="content"/>
                <get-related-one value-field="content" relation-name="DataResource" to-value-field="dataResource"/>
                <get-related-one value-field="dataResource" relation-name="ElectronicText" to-value-field="text"/>
                <field-to-result field="text.textData" result-name="summary"/>
            </if-compare>
            <if-compare field="assoc.mapKey" value="IMAGE" operator="equals">
                <get-related-one value-field="assoc" relation-name="Content" to-value-field="content"/>
                <get-related-one value-field="content" relation-name="DataResource" to-value-field="dataResource"/>
                <field-to-result field="dataResource.dataResourceId" result-name="imageDataResourceId"/>
            </if-compare>
        </iterate>
    </simple-method>

</simple-methods>
