<?xml version="1.0" encoding="UTF-8" ?>
<!--
 * Copyright (c) 2001-2004 The Open For Business Project and repective authors.
 * Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @author <a href="mailto:jabster@juno.com">Jim Byers</a>
 * @version 0
 * Created on Jan 2, 2006
 -->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">


    <!-- Methods for ContentApproval -->
    
    <simple-method method-name="createContentApproval" short-description="Create ContentApproval">
        <log level="always" message="got into createContentApproval(4)"></log>
        <check-permission action="_CREATE" permission="CONTENTMGR">
            <fail-message message="Security Error: to run createContentApproval you must have the CONTENTMGR_CREATE or CONTENTMGR_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        <make-value entity-name="ContentApproval" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateContentApproval" short-description="Update ContentApproval">
        <log level="always" message="got into updateContentApproval(4)"></log>
        <check-permission action="_UPDATE" permission="CONTENTMGR">
            <fail-message message="Security Error: to run updateContentApproval you must have the CONTENTMGR_UPDATE or CONTENTMGR_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        <make-value entity-name="ContentApproval" value-name="lookupKeyValue"/>
        <set-pk-fields map-name="parameters" value-name="lookupKeyValue"/>
        <find-by-primary-key entity-name="ContentApproval" map-name="lookupKeyValue" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="removeContentApproval" short-description="Remove ContentApproval">
        <check-permission action="_DELETE" permission="CONTENTMGR">
            <fail-message message="Security Error: to run removeContentApproval you must have the CONTENTMGR_DELETE or CONTENTMGR_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        <make-value entity-name="ContentApproval" value-name="lookupKeyValue"/>
        <set-pk-fields map-name="parameters" value-name="lookupKeyValue"/>
        <find-by-primary-key entity-name="ContentApproval" map-name="lookupKeyValue" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- Methods for ContentRevision -->
    <simple-method method-name="createContentRevision" short-description="Create ContentRevision">
        <check-permission action="_CREATE" permission="CONTENTMGR">
            <fail-message message="Security Error: to run createContentRevision you must have the CONTENTMGR_CREATE or CONTENTMGR_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        <make-value entity-name="ContentRevision" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateContentRevision" short-description="Update ContentRevision">
        <check-permission action="_UPDATE" permission="CONTENTMGR">
            <fail-message message="Security Error: to run updateContentRevision you must have the CONTENTMGR_UPDATE or CONTENTMGR_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        <make-value entity-name="ContentRevision" value-name="lookupKeyValue"/>
        <set-pk-fields map-name="parameters" value-name="lookupKeyValue"/>
        <find-by-primary-key entity-name="ContentRevision" map-name="lookupKeyValue" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="removeContentRevision" short-description="Remove ContentRevision">
        <check-permission action="_DELETE" permission="CONTENTMGR">
            <fail-message message="Security Error: to run removeContentRevision you must have the CONTENTMGR_DELETE or CONTENTMGR_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        <make-value entity-name="ContentRevision" value-name="lookupKeyValue"/>
        <set-pk-fields map-name="parameters" value-name="lookupKeyValue"/>
        <find-by-primary-key entity-name="ContentRevision" map-name="lookupKeyValue" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- Methods for ContentRevisionItem -->
    <simple-method method-name="createContentRevisionItem" short-description="Create ContentRevisionItem">
        <check-permission action="_CREATE" permission="CONTENTMGR">
            <fail-message message="Security Error: to run createContentRevisionItem you must have the CONTENTMGR_CREATE or CONTENTMGR_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        <make-value entity-name="ContentRevisionItem" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateContentRevisionItem" short-description="Update ContentRevisionItem">
        <check-permission action="_UPDATE" permission="CONTENTMGR">
            <fail-message message="Security Error: to run updateContentRevisionItem you must have the CONTENTMGR_UPDATE or CONTENTMGR_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        <make-value entity-name="ContentRevisionItem" value-name="lookupKeyValue"/>
        <set-pk-fields map-name="parameters" value-name="lookupKeyValue"/>
        <find-by-primary-key entity-name="ContentRevisionItem" map-name="lookupKeyValue" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    
    <simple-method method-name="removeContentRevisionItem" short-description="Remove ContentRevisionItem">
        <check-permission action="_DELETE" permission="CONTENTMGR">
            <fail-message message="Security Error: to run removeContentRevisionItem you must have the CONTENTMGR_DELETE or CONTENTMGR_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        <make-value entity-name="ContentRevisionItem" value-name="lookupKeyValue"/>
        <set-pk-fields map-name="parameters" value-name="lookupKeyValue"/>
        <find-by-primary-key entity-name="ContentRevisionItem" map-name="lookupKeyValue" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    

    <!-- Methods for ContentRevision and ContentRevisionItem -->
    <simple-method method-name="persistContentRevisionAndItem" short-description="Update ContentRevision and ContentRevisionItem">
        <entity-condition entity-name="ContentRevision" list-name="contentRevisionList">
            <condition-expr field-name="contentId" operator="equals" env-name="parameters.contentId"/>
            <order-by field-name="contentRevisionSeqId DESC"/>
        </entity-condition>
        <log level="info" message="contentRevisionList: ${contentRevisionList}"/>
        <if-not-empty field-name="contentRevisionList">
            <set field="newEntity" from-field="contentRevisionList[0]" />
            <set field="incrementedSeq" from-field="newEntity.contentRevisionSeqId"/>
        <else>
            <make-value entity-name="ContentRevision" value-name="newEntity"/>
        </else>
        </if-not-empty>
        <log level="info" message="incrementedSeq(0): ${incrementedSeq}"/>
        <log level="info" message="ContentRevision(0): ${newEntity}"/>
        <if-not-empty field-name="incrementedSeq">
            <calculate field-name="incrementedSeq" type="Long">
                <calcop operator="add">
                    <calcop operator="get" field-name="incrementedSeq"/>
                    <number value="1"/>
                </calcop>
            </calculate>
        <else>
            <set field="incrementedSeq" value="1" type="Long"/>
        </else>
        </if-not-empty>
        <calculate field-name="numericPadding" type="Integer">
            <number value="6"/>
        </calculate>
        <call-class-method method-name="padNumberWithLeadingZeros" class-name="org.ofbiz.content.compdoc.CompDocEvents"
                    ret-field-name="paddedSeqId">
            <field field-name="incrementedSeq" type="Long"/>
            <field field-name="numericPadding" type="Integer"/>
        </call-class-method>
        <log level="info" message="incrementedSeq(1): ${incrementedSeq}"/>
        <log level="info" message="numericPadding(1): ${numericPadding}"/>
        <log level="info" message="paddedSeqId: ${paddedSeqId}"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set field="newEntity.contentRevisionSeqId" from-field="paddedSeqId"/>
        <log level="info" message="ContentRevision(1): ${newEntity}"/>
        <create-value value-name="newEntity"/>
        
        <make-value entity-name="ContentRevisionItem" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set field="newEntity.contentRevisionSeqId" from-field="paddedSeqId"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
        <log level="info" message="ContentRevisionItem(1): ${newEntity}"/>
        <field-to-result field-name="paddedSeqId" result-name="contentRevisionSeqId"/>
    </simple-method>
    
    <simple-method method-name="getRevisionDataResource" short-description="Get version of DataResource that fits overall revision">
        <entity-condition entity-name="ContentRevisionItem" list-name="contentRevisionItems" use-cache="true">
            <condition-list combine="and">
                <condition-expr field-name="contentId" env-name="parameters.contentId" operator="equals"/>
                <condition-expr field-name="itemContentId" env-name="parameters.itemContentId" operator="equals"/>
                <condition-expr field-name="contentRevisionSeqId" env-name="parameters.contentRevisionSeqId" operator="less-equals"/>
            </condition-list>
            <order-by field-name="-contentRevisionSeqId"/>
        </entity-condition>
        <if-not-empty field-name="contentRevisionItems">
            <set field="contentRevisionItem" from-field="contentRevisionItems[0]"/>
            <entity-one entity-name="Content" value-name="content" use-cache="true">
                <field-map field-name="contentId" env-name="contentRevisionItem.itemContentId"/>
            </entity-one>
            <if-not-empty field-name="content">
                <entity-one entity-name="DataResource" value-name="dataResource" use-cache="true">
                    <field-map field-name="dataResourceId" env-name="content.dataResourceId"/>
                </entity-one>
                <field-to-result field-name="dataResource" result-name="dataResource"/>
            </if-not-empty>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="getRevisionItemDataResource" short-description="Get version of DataResource that fits overall revision">
        <entity-one entity-name="ContentRevisionItem" value-name="contentRevisionItem" use-cache="true">
                <field-map field-name="contentId" env-name="parameters.contentId"/>
                <field-map field-name="itemContentId" env-name="parameters.itemContentId"/>
                <field-map field-name="contentRevisionSeqId" env-name="parameters.contentRevisionSeqId"/>
        </entity-one>
        <entity-one entity-name="Content" value-name="content" use-cache="true">
                <field-map field-name="contentId" env-name="contentRevisionItem.itemContentId"/>
        </entity-one>
        <if-not-empty field-name="content">
                <entity-one entity-name="DataResource" value-name="dataResource" use-cache="true">
                    <field-map field-name="dataResourceId" env-name="content.dataResourceId"/>
                </entity-one>
                <field-to-result field-name="dataResource" result-name="dataResource"/>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="getApprovalsWithPermissions" short-description="Get ContentApprovals for approval process">
        
        <entity-and entity-name="ContentApproval" list-name="instanceApprovalList" use-cache="true">
            <field-map field-name="contentId" env-name="parameters.rootContentId"/>
            <field-map field-name="contentRevisionSeqId" env-name="parameters.contentRevisionSeqId"/>
        </entity-and>
        <log level="info" message="instanceApprovalList: ${instanceApprovalList}"/>
        <log level="info" message="rootContentId: ${parameters.rootContentId}"/>
        <log level="info" message="contentRevisionSeqId: ${parameters.contentRevisionSeqId}"/>
        <set field="inMap2.userLogin" from-field="userLogin"/>
        <iterate list-name="instanceApprovalList" entry-name="contentApproval">
            <set field="inMap2.contentApprovalId" from-field="contentApproval.contentApprovalId"/>
            <call-service  service-name="hasApprovalPermission" in-map-name="inMap2">
                <result-to-field result-name="approvalPermExists"/>
            </call-service>
            <set field="gvAndPerm" from-field="contentApproval"/>
            <set field="gvAndPerm.permission" from-field="openApprovalExists"/>
            <set field="contentApprovalList[]" from-field="gvAndPerm"/>
        </iterate>
        <field-to-result field-name="contentApprovalList"/>
</simple-method>
    
    <simple-method method-name="hasApprovalPermission" short-description="Determine ContentApproval permission from passed value">
        <make-value  entity-name="ContentApproval" value-name="contentApprovalPK"/>
        <set field="contentApprovalPK.contentApprovalId" from-field="parameters.contentApprovalId"/>
        <find-by-primary-key entity-name="ContentApproval" value-name="contentApproval" map-name="contentApprovalPK" use-cache="true"/>
        <set field="partyId" from-field="parameters.userLogin.partyId"/>
        <log level="info" message="contentApproval: ${contentApproval}"/>
        <if-compare field-name="contentApproval.partyId" value="${partyId}" operator="equals">
            <set field="approvalPermExists" value="true"/>
        <log level="info" message="approvalPermExists: ${approvalPermExists}"/>
            <field-to-result result-name="approvalPermExists" field-name="approvalPermExists"/>
            <return/>
        </if-compare>
        <if-not-empty field-name="contentApproval.roleTypeId">
            <now-timestamp-to-env env-name="nowTimestamp"/>
            <entity-condition entity-name="ContentRole" list-name="contentRoleList">
                <condition-list combine="and">
                    <condition-expr field-name="contentId" env-name="contentId" operator="equals"/>
                    <condition-expr field-name="partyId" env-name="partyId" operator="equals"/>
                    <condition-expr field-name="fromDate" env-name="nowTimestamp" operator="less-equals"/>
                    <condition-list combine="or">
                        <condition-expr field-name="thruDate" env-name="nowTimestamp" operator="greater"/>
                        <condition-expr field-name="thruDate" value="" operator="equals"/>
                    </condition-list>
                </condition-list>
            </entity-condition>
            <if-not-empty field-name="contentRoleList">
                <set field="approvalPermExists" value="true"/>
                <field-to-result result-name="approvalPermExists"/>
                <return/>
            </if-not-empty>
        </if-not-empty>
        <set field="approvalPermExists" value="false"/>
        <field-to-result result-name="approvalPermExists"/>
        <return/>
    </simple-method>

    <simple-method method-name="prepForApproval" short-description="Set ContentApprovals for approval process">
        <log level="info" message="got into prepForApproval"></log>
        <set field="rootTemplateContentId"  from-field="parameters.rootTemplateContentId" />
        <check-permission action="_CREATE" permission="CONTENTMGR">
            <fail-message message="Security Error: to run prepForApproval you must have the CONTENTMGR_CREATE or CONTENTMGR_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        
        <set field="context.rootTemplateContentId"  from-field="parameters.rootTemplateContentId" />
        
        <!--  check for open approvals -->
        <call-service service-name="checkForOpenApprovals" in-map-name="context">
        </call-service>
        
        <!--  bump CDT/I up one for new approval -->
        <!-- 
        <set field="context2.contentId"  from-field="parameters.rootTemplateContentId" />
        <set field="context2.itemContentId"  from-field="parameters.rootTemplateContentId" />
        <call-service service-name="persistContentRevisionAndItem" in-map-name="context2">
            <result-to-field result-name="contentRevisionSeqId" field-name="templateContentRevisionSeqId"/>
            <result-to-result result-name="contentRevisionSeqId" service-result-name="templateContentRevisionSeqId"/>
        </call-service>
        
        <entity-condition entity-name="Content" list-name="contentList">
            <condition-expr field-name="instanceOfContentId" operator="equals" env-name="parameters.rootTemplateContentId"/>
        </entity-condition>
        <if-not-empty field-name="contentList">
            <set field="newEntity" from-field="contentList[0]" />
            <set field="context3.contentId" from-field="newEntity.contentId"/>
            <set field="rootInstanceContentId" from-field="newEntity.contentId"/>
        <else>
            <add-error>
                <fail-message message="No ContentRevision entity for CDI related to CDT with contentId: ${parameters.rootTemplateContentId}"/>
            </add-error>
            <check-errors/>
        </else>
        </if-not-empty>
        -->

        <call-service service-name="persistContentRevisionAndItem" in-map-name="context3">
            <result-to-field result-name="contentRevisionSeqId" field-name="instanceContentRevisionSeqId"/>
            <result-to-result result-name="contentRevisionSeqId" service-result-name="instanceContentRevisionSeqId"/>
        </call-service>
        
        <!--  create instance approval records for current CDI -->
        <entity-condition entity-name="ContentApproval" list-name="contentApprovalList">
            <condition-expr field-name="contentId" operator="equals" env-name="parameters.rootTemplateContentId"/>
            <order-by field-name="sequenceNum DESC"/>
        </entity-condition>
        <if-not-empty field-name="contentApprovalList">
            <field-to-result field-name="contentApprovalList" result-name="templateApprovalList"/>
            <iterate list-name="contentApprovalList" entry-name="templateContentApproval">
                <make-value entity-name="ContentApproval" value-name="contentApproval"/>
                <make-next-seq-id seq-field-name="contentApprovalId" value-name="contentApproval"/>
                <set field="contentApproval.contentId" from-field="rootInstanceContentId"/>
                <set field="contentApproval.contentRevisionSeqId" from-field="instanceContentRevisionSeqId"/>
                <set field="contentApproval.approvalStatusId" value="CNTAP_READY"/>
                <set field="contentApproval.partyId" from-field="templateContentApproval.partyId" />
                <set field="contentApproval.roleTypeId" from-field="templateContentApproval.roleTypeId" />
                <create-value value-name="contentApproval"/>
                <set field="instanceApprovalList[]" from-field="contentApproval"/>
            </iterate>
            <field-to-result field-name="instanceApprovalList" result-name="instanceApprovalList"/>
        <else>
            <add-error>
                <fail-message message="No ContentApproval entities for CDI related to CDT with contentId: ${parameters.rootTemplateContentId}"/>
            </add-error>
            <check-errors/>
        </else>
        </if-not-empty>
        
    </simple-method>
    
    <simple-method method-name="checkForOpenApprovals" short-description="Check to see if any open approval conditions exist">
    
        <!-- Find CDI tied to root CDT -->
        <set field="rootTemplateContentId"  from-field="parameters.rootTemplateContentId" />
        <entity-condition entity-name="Content" list-name="contentList">
            <condition-expr field-name="instanceOfContentId" operator="equals" env-name="parameters.rootTemplateContentId"/>
        </entity-condition>
        <if-not-empty field-name="contentList">
            <set field="rootInstanceContentId" from-field="contentList[0].contentId"/>
        <else>
            <add-error>
                <fail-message message="No ContentRevision entity for CDI related to CDT with contentId: ${parameters.rootTemplateContentId}"/>
            </add-error>
            <check-errors/>
        </else>
        </if-not-empty>
        
        <!-- Look for most recent ContentApproval tied to CDI -->
        <entity-condition entity-name="ContentApproval" list-name="contentApprovalList">
            <condition-expr field-name="contentId" operator="equals" env-name="rootInstanceContentId"/>
            <order-by field-name="contentRevisionSeqId DESC"/>
            <order-by field-name="sequenceNum DESC"/>
        </entity-condition>
        <if-not-empty field-name="contentApprovalList">
            <string-to-field string="true" field-name="openApprovalExists"/>
            <field-to-result  field-name="openApprovalExists" result-name="openApprovalExists"/>
            <set field="targetContentRevisionSeqId" from-field="contentApprovalList[0].contentRevisionSeqId"/>
            <iterate list-name="contentApprovalList" entry-name="contentApproval">
                <if-compare field-name="contentApproval.contentRevisionSeqId" operator="equals" value="${targetContentRevisionSeqId}">
                    <if>
                        <condition>
                            <or>
                                <if-compare field-name="contentApproval.approvalStatusId" operator="equals" value="CNTAP_SOFT_REJ"/>
                                <if-compare field-name="contentApproval.approvalStatusId" operator="equals" value="CNTAP_REJECTED"/>
                            </or>
                        </condition>
                        <then>
                            <string-to-field string="false" field-name="openApprovalExists"/>
                            <field-to-result  field-name="openApprovalExists" result-name="openApprovalExists"/>
                        </then>
                    </if>
                </if-compare>
            </iterate>
        <else>
            <add-error>
                <fail-message message="No ContentApprovals entities for  contentId: ${rootInstanceContentId}"/>
            </add-error>
            <check-errors/>
        </else>
        </if-not-empty>
     </simple-method>
    
</simple-methods>
