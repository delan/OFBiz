/*
 * $Id: featureprep.bsh 5462 2005-08-05 18:35:48Z jonesde $
 *
 * Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Revision$
 * @since      3.0

 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.content.data.DataResourceWorker;
import org.ofbiz.webapp.ftl.FreeMarkerViewHandler;
import org.ofbiz.content.content.ContentWorker;
import org.ofbiz.content.ContentManagementWorker;

import java.io.StringWriter;
import freemarker.ext.beans.BeansWrapper;
import freemarker.template.SimpleHash;
import freemarker.template.WrappingTemplateModel;


import javax.servlet.*;
import javax.servlet.http.*;


delegator = (GenericDelegator) request.getAttribute("delegator");
paramMap = UtilHttp.getParameterMap(request);

contentId=context.get("contentId");
dataResourceId=context.get("dataResourceId");

productFeatureList = delegator.findAllCache("ProductFeature");
featureList = new ArrayList();
if (UtilValidate.isNotEmpty(dataResourceId)) {
    iter = productFeatureList.iterator();
    while (iter.hasNext()) {
        productFeature = iter.next();
        productFeatureId = productFeature.get("productFeatureId");
        description = productFeature.get("description");
        productFeatureDataResource = delegator.findByPrimaryKeyCache("ProductFeatureDataResource", UtilMisc.toMap("productFeatureId", productFeatureId, "dataResourceId", dataResourceId));
        if (productFeatureDataResource != null) {
            // action = productFeatureDataResource != null ? "Y" : "N";
            feature = new HashMap();
            feature.put("productFeatureId", productFeatureId );
            feature.put("dataResourceId", dataResourceId);
            feature.put("action", "Y");
            feature.put("description", description);
            featureList.add(feature);
        }
    }
    context.put("featureList", featureList);
}
