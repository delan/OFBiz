/*
 * Copyright 2001-2006 The Apache Software Foundation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      3.0

 * Does either a "simple" (does entity perm check) or complex
 * (uses EntityPurpose/Operation/etc. tables) to check by roles.
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;

import javax.servlet.*;
import javax.servlet.http.*;

String module = "permprep.bsh";

dispatcher = request.getAttribute("dispatcher");
delegator = request.getAttribute("delegator");
    
security = request.getAttribute("security");
// Get permission from pagedef config file
permission = page.getProperty("permission");
permissionType = page.getProperty("permissionType");
if (permissionType == null) permissionType = "simple";
entityName = page.getProperty("entityName");
entityOperation = page.getProperty("entityOperation");
if (entityOperation == null) entityOperation = "_ADMIN";
targetOperation = page.getProperty("targetOperation");
if (targetOperation == null) targetOperation = "CREATE_CONTENT";

if (permissionType.equals("complex")) {
    mapIn = new HashMap();
    userLogin = session.getAttribute("userLogin");
    mapIn.put("userLogin", userLogin);
    mapIn.put("entityOperation", entityOperation);
    
    currentValue = request.getAttribute("currentValue");

    if (currentValue == null || !currentValue.getEntityName().equals("Content")) {
        currentEntityMap = session.getAttribute("currentEntityMap");
        if (currentEntityMap == null) {
            currentEntityMap = new HashMap();
            session.setAttribute("currentEntityMap", currentEntityMap);
        }
        cachedPK = currentEntityMap.get("Content");
        if (cachedPK != null)
            currentValue = delegator.findByPrimaryKey(cachedPK);
    }
    if (currentValue != null && currentValue.getEntityName().equals("Content")) {
        mapIn.put("currentContent", currentValue);
    }
    List targetOperationList = UtilMisc.toList(targetOperation);
    mapIn.put("targetOperationList", targetOperationList );

    result = dispatcher.runSync("checkContentPermission", mapIn);
    permissionStatus = result.get("permissionStatus");
    if (Debug.verboseOn()) Debug.logVerbose("permissionStatus:" + permissionStatus, module);
    if (permissionStatus != null && permissionStatus.equals("granted")) {
        context.put("hasPermission", Boolean.TRUE);
        request.setAttribute("hasPermission", Boolean.TRUE);
        request.setAttribute("permissionStatus", "granted");
    } else {
        context.put("hasPermission", false);
        request.setAttribute("hasPermission", false);
        request.setAttribute("permissionStatus", "");
    }
} else {
        
    if (Debug.verboseOn()) Debug.logVerbose("permission:" + permission , module);
    if (Debug.verboseOn()) Debug.logVerbose("entityOperation:" + entityOperation , module);
    if(security.hasEntityPermission(permission, entityOperation, session)) {
    if (Debug.verboseOn()) Debug.logVerbose("hasEntityPermission is true:" , module);
    	context.put("hasPermission", Boolean.TRUE);
        request.setAttribute("hasPermission", Boolean.TRUE);
        request.setAttribute("permissionStatus", "granted");
    } else {
    if (Debug.verboseOn()) Debug.logVerbose("hasEntityPermission is false:" , module);
    	context.put("hasPermission", Boolean.FALSE);
        request.setAttribute("hasPermission", Boolean.FALSE);
        request.setAttribute("permissionStatus", "");
    }
}
