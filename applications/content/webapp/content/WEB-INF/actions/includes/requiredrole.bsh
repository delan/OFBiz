/*
 * $Id: requiredrole.bsh 5462 2005-08-05 18:35:48Z jonesde $
 *
 * Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      3.0

 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;


import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;



import javax.servlet.*;
import javax.servlet.http.*;

dispatcher	= (LocalDispatcher)request.getAttribute("dispatcher");
delegator = (GenericDelegator) request.getAttribute("delegator");
security = request.getAttribute("security");
    
paramMap = UtilHttp.getParameterMap(request);
security			= request.getAttribute("security");
// Get permission from pagedef config file
requiredRoles		= page.getProperty("requiredRoles");
entityOperation		= page.getProperty("entityOperation");
if (UtilValidate.isEmpty(entityOperation))
    entityOperation = "_CREATE";
requiredRoleList = StringUtil.split(requiredRoles, "|");
if (Debug.infoOn()) Debug.logInfo("in requiredrole, requiredRoleList:" + requiredRoleList, "");
hasPermission=Boolean.FALSE;
permissionStatus="";

userLogin = session.getAttribute("userLogin");
if (userLogin == null) {
        context.put("hasPermission", Boolean.FALSE);
        request.setAttribute("hasPermission", Boolean.FALSE);
        request.setAttribute("permissionStatus", "");
    return;
}

if (security.hasEntityPermission("CONTENTMGR", entityOperation, session)) {
    context.put("hasPermission", Boolean.TRUE);
    request.setAttribute("hasPermission", Boolean.TRUE);
    request.setAttribute("permissionStatus", Boolean.TRUE);
} else {

    partyId = userLogin.get("partyId");
    partyRoleValues = delegator.findByAndCache("PartyRole", UtilMisc.toMap("partyId", partyId));
    iter = partyRoleValues.iterator();
    while (iter.hasNext()) {
        value = iter.next();
        role = value.get("roleTypeId");
        if (Debug.infoOn()) Debug.logInfo("in requiredrole, PartyRole.roleTypeId:" + role, "");
        if (requiredRoleList.contains(role)) {
            hasPermission=Boolean.TRUE;
            permissionStatus="granted";
            break;
        }
    }
        if (Debug.infoOn()) Debug.logInfo("in requiredrole, permissionStatus:" + permissionStatus, "");
    context.put("hasPermission", hasPermission);
    request.setAttribute("hasPermission", hasPermission);
    request.setAttribute("permissionStatus", permissionStatus);
}
