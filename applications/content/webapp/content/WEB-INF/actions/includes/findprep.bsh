/*
 * Copyright 2001-2006 The Apache Software Foundation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      2.1

 * Calls performFind service to return an EntityListIterator of the
 * entities found from the parameter map selection criteria.
 * Also builds a query form wrapper.
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.base.util.BshUtil;
import bsh.EvalError;


import java.util.ListIterator;
import javax.servlet.*;
import javax.servlet.http.*;

LocalDispatcher dispatcher    = (LocalDispatcher)request.getAttribute("dispatcher");

inputFields    	= UtilHttp.getParameterMap(request);
entityName    	= page.getProperty("entityName");
formDefFile		= page.getProperty("formDefFile");
singleFormName		= page.getProperty("singleFormName");

HashMap inMap    		= new HashMap();
inMap.put("entityName", entityName);

//preload the query 
staticConditionsStr = page.getProperty("staticConditions");
if (staticConditionsStr != null && staticConditionsStr.length() > 0) {
    String [] staticConditions = BshUtil.eval("String [] cond=" 
                      + staticConditionsStr + "; return cond;",new HashMap());
    for(int i=0; i < staticConditions.length; i += 2) {
        inputFields.put(staticConditions[i], staticConditions[i+1]);
    }
}
Debug.logInfo("inputFields:"+ inputFields, "");
inMap.put("inputFields", inputFields);
Map result    		= null;
try {
           result = dispatcher.runSync("performFind", inMap);
} catch (GenericServiceException e) {
    request.setAttribute("_ERROR_MESSAGE_", "ERROR: Error in findLookup service. "  + e.getMessage() + ")");
            Debug.log(e, "findprep.bsh");
            return "error";
}

listIt = (ListIterator)result.get("listIt");
request.setAttribute("listIt", listIt);

String queryString = UtilHttp.urlEncodeArgs(inputFields);
context.put("queryString", queryString);
context.put("entityName", entityName);

HtmlFormWrapper queryWrapper = new HtmlFormWrapper(formDefFile,
                        singleFormName, request, response);
context.put("queryWrapper", queryWrapper);

