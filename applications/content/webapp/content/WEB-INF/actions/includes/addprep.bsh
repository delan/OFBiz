/*
 * Copyright 2001-2006 The Apache Software Foundation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;


import javax.servlet.*;
import javax.servlet.http.*;
/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      2.2

 */

security			= request.getAttribute("security");
// Get permission from pagedef config file
String permission		= page.getProperty("permission");
String formDefFile		= page.getProperty("formDefFile");
String singleFormName		= page.getProperty("singleFormName");
String entityName		= page.getProperty("entityName");
String priKeyName		= page.getProperty("priKeyName");
String defaultMapName		= page.getProperty("defaultMapName");
if( defaultMapName == null) defaultMapName	= "currentValue";
String entityOperation		= page.getProperty("entityOperation");
if( entityOperation == null) entityOperation	= "_ADMIN";

dispatcher      = (LocalDispatcher)request.getAttribute("dispatcher");
delegator = (GenericDelegator) request.getAttribute("delegator");

mapIn = new HashMap();
userLogin = session.getAttribute("userLogin");
mapIn.put("userLogin", userLogin);
mapIn.put("entityOperation", entityOperation);

// Since we don't know the purpose for the Content to be entered, at least
// check that the user has permission to enter some Content
lst = delegator.findAllCache("ContentPurposeType");
iter = lst.iterator();
contentPurposeList = new ArrayList();
while (iter.hasNext()) {
    purpose = (GenericValue)iter.next();
    contentPurposeTypeId = (String)purpose.get( "contentPurposeTypeId");
    contentPurposeList.add(contentPurposeTypeId);
}
mapIn.put("contentPurposeList", contentPurposeList);
//contentPropertiesUrl = application.getResource("content.properties");

ownerContentId = UtilProperties.getPropertyValue("content.properties", "owner.content.id");
org.ofbiz.base.util.Debug.logInfo("ownerContentId:" + ownerContentId, null);
genericValue = delegator.makeValue(entityName, null);
genericValue.put("ownerContentId", ownerContentId);
mapIn.put("currentContent", genericValue);

List targetOperationList = UtilMisc.toList("CREATE_CONTENT");
mapIn.put("targetOperationList", targetOperationList );

org.ofbiz.base.util.Debug.logInfo("before runSync, mapIn:" + mapIn, null);
result = dispatcher.runSync("checkContentPermission", mapIn);
org.ofbiz.base.util.Debug.logInfo("result:" + result, null);
permissionStatus = result.get("permissionStatus");
org.ofbiz.base.util.Debug.logInfo("permissionStatus:" + permissionStatus, null);
if (permissionStatus != null && permissionStatus.equals("granted")) {
        context.put("hasPermission", Boolean.TRUE);
} else {
        context.put("hasPermission", Boolean.FALSE);
}
    


HtmlFormWrapper addWrapper = new HtmlFormWrapper(formDefFile, 
				singleFormName, request, response);

addWrapper.putInContext(defaultMapName, genericValue);
// The idea here is that by setting the map name here, dependency on the 
        // widget-form config file could be eliminated.
ModelForm modelForm	= addWrapper.getModelForm();
modelForm.setDefaultMapName(defaultMapName);

roles = result.get("roleTypeList");
allowedPurposes = new ArrayList();
pIter = contentPurposeList.iterator();
while ( pIter.hasNext() ) {
    purpose = (String)pIter.next();
    purposeList = new ArrayList();
    purposeList.add(purpose);
    mapIn.put("contentPurposeList", purposeList);
    resultPurpose = dispatcher.runSync("checkContentPermission", mapIn);
    org.ofbiz.base.util.Debug.logInfo("resultPurpose:" + resultPurpose, null);
    permissionStatus = resultPurpose.get("permissionStatus");
    org.ofbiz.base.util.Debug.logInfo("permissionStatus:" + permissionStatus, null);
    if (permissionStatus != null && permissionStatus.equals("granted")) {
        purposeValue = delegator.findByPrimaryKey("ContentPurposeType", 
                                   UtilMisc.toMap("contentPurposeTypeId", purpose));
        allowedPurposes.add(purposeValue);
    }
}

addWrapper.putInContext("allowedPurposes", allowedPurposes);
context.put("editWrapper", addWrapper);

