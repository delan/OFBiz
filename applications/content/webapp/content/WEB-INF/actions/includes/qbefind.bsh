/*
 * Copyright 2001-2006 The Apache Software Foundation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
/**
 * Does a dynamic "find" using an EntityCondition obtained by doing an "eval"
 * on the contents of the "qbeExpr" property in the pagedef config file.
 * Generates an EntityListIterator object, "listIt", to be used by pagelistprep.bsh.
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.base.util.BshUtil;
import bsh.EvalError;

import java.util.ListIterator;
import javax.servlet.*;
import javax.servlet.http.*;

dispatcher    = (LocalDispatcher)request.getAttribute("dispatcher");
delegator = (GenericDelegator) request.getAttribute("delegator");

    
inputFields    	= UtilHttp.getParameterMap(request);
entityName    	= page.getProperty("entityName");
Debug.logInfo(" qbeprep, entityName: " + entityName, "FINDPREP");
// Can override the listName of "entityList" in the pagedef config file.
//if (listName == null) listName   = "entityList";
title    	= page.getProperty("title");
qbeExpr    	= page.getProperty("qbeExpr");
Debug.logInfo(" qbeprep, qbeExpr: " + qbeExpr, "FINDPREP");

if (qbeExpr != null && qbeExpr.length() > 0) {

    try {
        //expr = (EntityCondition)eval(qbeExpr,inputFields);
        importCondStr = "import org.ofbiz.entity.condition.*; ";
        expr = (EntityCondition)BshUtil.eval(importCondStr + qbeExpr,inputFields);
    } catch(EvalError e) {
        request.setAttribute("_ERROR_MESSAGE_", 
                       "Error in evaluating :" +  " : " + e.getMessage());
        Debug.logError("Error in evaluating :" +  " : " + e.getMessage(), null);
        //return "error";
    } catch(Exception e2) {
        Debug.logError("Exception in evaluating :" +  " : " + e2.getMessage(), null);
    }
Debug.logInfo(" qbeprep, expr: " + expr, "FINDPREP");


    if (expr != null && expr != void) {
        try {
            listIt = delegator.findListIteratorByCondition(entityName, expr, null, null, null, 
            new EntityFindOptions(true, EntityFindOptions.TYPE_SCROLL_INSENSITIVE, 
                          EntityFindOptions.CONCUR_READ_ONLY, true));
            request.setAttribute("listIt", listIt);
    
        } catch (GenericEntityException e) {
                request.setAttribute("_ERROR_MESSAGE_", 
                        "ERROR: Error in findLookup service. "  + e.getMessage() + ")");
                Debug.log(e, "findprep.bsh");
                return "error";
        } catch(Exception e2) {
            Debug.logError("Exception in evaluating :" +  " : " + e2.getMessage(), null);
        }
    }
}



