/*
 * Copyright 2001-2006 The Apache Software Foundation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */



import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;

import javax.servlet.*;
import javax.servlet.http.*;

import java.sql.Timestamp;

LocalDispatcher dispatcher = (LocalDispatcher)request.getAttribute("dispatcher");
GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

// Get permission from pagedef config file
String permission = page.getProperty("permission");
String entityName = page.getProperty("entityName");
String currentEntityName = page.getProperty("currentEntityName");
String formDefFile = page.getProperty("formDefFile");
String defaultMapName = page.getProperty("defaultMapName");
if( defaultMapName == null) defaultMapName = "valueObject";

security = request.getAttribute("security");
if(security.hasEntityPermission(permission, "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}

HtmlFormWrapper editWrapper	= null;
HtmlFormWrapper addWrapper	= null;
HtmlFormWrapper listWrapper	= null;
GenericValue relatedOne = null;

HashMap currentEntityMap = (HashMap)session.getAttribute("currentEntityMap");
if(currentEntityMap == null){
    currentEntityMap     = new HashMap();
    session.setAttribute("currentEntityMap", currentEntityMap);
}

GenericPK currentPK = currentEntityMap.get(currentEntityName);
GenericValue currentValue = delegator.findByPrimaryKey(currentPK);


if(currentValue != null) {
    Map paramMap	= UtilHttp.getParameterMap(request);
    GenericValue v = delegator.makeValue(entityName, null);
    v.setPKFields(paramMap);
    GenericPK pk = v.getPrimaryKey();
    relatedOne = delegator.findByPrimaryKey(pk);
    if(relatedOne != null) {
        editWrapper = new HtmlFormWrapper(formDefFile, 
					"Edit" + entityName, request, response);
        ModelForm modelForm	= editWrapper.getModelForm();
        modelForm.setDefaultMapName(defaultMapName);
        editWrapper.putInContext(defaultMapName, relatedOne);
        context.put("singleTitle", "Edit");
        context.put("editWrapper", editWrapper);
    } 
}

if(currentValue != null) {

    addWrapper = new HtmlFormWrapper(formDefFile, 
					"Add" + entityName, request, response);
    context.put("singleTitle", "Create New");
    keyColl = currentValue.getPrimaryKey().getAllKeys();
    keyIt = keyColl.iterator();
    while(keyIt.hasNext()) {
            String ky = (String)keyIt.next();
            addWrapper.putInContext(ky, currentValue.get(ky));
    }

    List contentList =  currentValue.getRelated(entityName);
    listWrapper = new HtmlFormWrapper(formDefFile, "List" + entityName, request, response);
    listWrapper.putInContext("contentList", contentList);
    context.put("listWrapper", listWrapper);
} else {
        context.put("singleTitle", "Create New");
         addWrapper = new HtmlFormWrapper(formDefFile, 
					"Add" + entityName, request, response);
}

context.put("addWrapper", addWrapper);

