/*
 * $Id: dataresourcepagelist.bsh 5462 2005-08-05 18:35:48Z jonesde $
 *
 * Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;


import java.util.ListIterator;
import javax.servlet.*;
import javax.servlet.http.*;
/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      3.0
 *
 * This script is a special version of includes/pagelistprep that
 * gets the ElectronicText associated with a DataResource and puts it in
 * a Map (electronicTextMap) in the context so that a custom .ftl 
 * (does not use widget-form like pagelistprep) can render it.
 */

dispatcher    = (LocalDispatcher)request.getAttribute("dispatcher");
delegator = (GenericDelegator) request.getAttribute("delegator");

    
formDefFile    	= page.getProperty("formDefFile");
listFormName    	= page.getProperty("listFormName");
entityName    	= page.getProperty("entityName");

inputFields    	= UtilHttp.getParameterMap(request);
Debug.logInfo(" findprep, entityName: " + entityName, "FINDPREP");
listName    		= "entityList";
//listName    		= page.getProperty("listName");
//if (listName == null) listName   = "entityList";

listIt = (EntityListIterator)request.getAttribute("listIt");

//listIt = dataResourceList.listIterator();
// This was pretty much hacked from somewhere else in OFBiz
int viewIndex    = -1;
try {
       	viewIndex = Integer.valueOf((String) request.getParameter("VIEW_INDEX")).intValue();
} catch (Exception e) {
        	 viewIndex	= 0;
}

int viewSize    = -1;
int listSize    = -1;
try {
    viewSize = Integer.valueOf((String) request.getParameter("VIEW_SIZE")).intValue();
} catch (Exception e) {
    try {
    	// If view size is not in page, get it from pagedef .xml file
    	String viewSizePage	= page.getProperty("viewSize");
       	viewSize = Integer.valueOf(viewSizePage).intValue();
    } catch (Exception e2){
    	viewSize	= 10; // Not good to have a magic number here
    }
}


int lowIndex = viewIndex * viewSize;
int highIndex = (viewIndex + 1) * viewSize;

List entityList    = new ArrayList();
Map eTextMap = new HashMap();
    // attempt to get the full size
Debug.logInfo(" dataresourcepagelist, listIt: " + listIt,  "FINDPREP");
if (listIt != null && listIt != void ) {
    	try {

             listIt.last();
             listSize = listIt.currentIndex(); 
Debug.logInfo(" dataresourcepagelist, listSize: " + listSize,  "FINDPREP");


             if (listSize < highIndex) {
                 highIndex = listSize;
             }
             if (listSize > 0) {
                 listIt.first();
                 entityList = listIt.getPartialList(lowIndex + 1, viewSize );
                 listIt.close();

                 entityIt = entityList.iterator();
                 while (entityIt.hasNext()) {
                     dataResource = (GenericEntity)entityIt.next();
                     dataCategoryId = (String)dataResource.get("dataCategoryId");
                     dataResourceTypeId = (String)dataResource.get("dataResourceTypeId");
                     if (dataResourceTypeId != null && dataResourceTypeId.equals("ELECTRONIC_TEXT")) {
                         eText = dataResource.getRelatedOne("ElectronicText");
                         shortTextData = "";
                         if (eText != null) {
                             textData = (String)eText.get("textData");
                             if (textData != null) {
                                 len = textData.length();
                                 subLen = (len < 240) ? len : 240;
                                 shortTextData = textData.substring(0, subLen);
                             }
                             eTextMap.put((String)eText.get("dataResourceId"), shortTextData);
                         }
                     }
                 }
             }
    	} catch (GenericEntityException e) { 
                           	request.setAttribute("_ERROR_MESSAGE_", e.getMessage());
    		return "error";
    	}
        context.put("electronicTextMap", eTextMap);
        if (entityList != null) {
     	    context.put(listName, entityList);
    	    // request.setAttribute(listName, entityList);
     	    request.setAttribute("listName", listName);
        }

}

inputFields.remove("VIEW_INDEX");


context.put("listSize", new Integer(listSize));
context.put("highIndex", new Integer(highIndex));
context.put("lowIndex", new Integer(lowIndex));
context.put("viewSize", new Integer(viewSize));
context.put("viewIndex", new Integer(viewIndex));


