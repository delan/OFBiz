/*
 * $Id: editsubcontentprep.bsh 5462 2005-08-05 18:35:48Z jonesde $
 *
 * Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      3.0

 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.content.data.DataResourceWorker;
import org.ofbiz.webapp.ftl.FreeMarkerViewHandler;

import java.io.StringWriter;
import freemarker.ext.beans.BeansWrapper;
import freemarker.template.WrappingTemplateModel;

import javax.servlet.*;
import javax.servlet.http.*;

// load edit or create Content form
dispatcher    = (LocalDispatcher)request.getAttribute("dispatcher");
delegator = (GenericDelegator) request.getAttribute("delegator");

formDefFile = page.getProperty("formDefFile");
addFormName = page.getProperty("addFormName");
editFormName = page.getProperty("editFormName");
listFormName = page.getProperty("listFormName");
mruFormName = page.getProperty("mruFormName");
entityName = page.getProperty("entityName");
paramMap = UtilHttp.getParameterMap(request);
contentIdTo = (String)paramMap.get("contentIdTo");
//Debug.logInfo("in editsubcontentprep, contentIdTo:" + contentIdTo, "");
//String defaultMapName = page.getProperty("defaultMapName");
//if( defaultMapName == null) defaultMapName = "currentValue";
defaultMapName	= "currentValue";
GenericValue currentValue = (GenericValue)request.getAttribute("currentValue");
//Debug.logInfo("in editsubcontentprep, currentValue:" + currentValue, "");
mode = (String)request.getParameter("mode");
if (mode == null || mode.length() == 0) {
    mode = (String)request.getAttribute("mode");
}
//Debug.logInfo("in editsubcontentprep, mode:" + mode, "");
Locale locale = UtilHttp.getLocale(request);
if (currentValue == null || (mode != null && mode.equalsIgnoreCase("add"))) {
    view = delegator.makeValue("SubContentDataResourceView", null);
    view.put("localeString", locale.toString());
    singleWrapper = new HtmlFormWrapper(formDefFile, addFormName, request, response);
    currentMap = new HashMap(view);
    currentMap.put("textData", "");
    singleWrapper.putInContext("currentValue", currentMap);
} else {
    singleWrapper = new HtmlFormWrapper(formDefFile, editFormName, request, response);
    dataResourceId = (String)currentValue.get("drDataResourceId");
    dataResourceTypeId =  (String)currentValue.get("drDataResourceTypeId");
    //Debug.logInfo("in editsubcontentprep, dataResourceId:" + dataResourceId, "");
    //Debug.logInfo("in editsubcontentprep, dataResourceTypeId:" + dataResourceTypeId, "");
    currentMap = new HashMap(currentValue);
    if (UtilValidate.isNotEmpty(dataResourceTypeId)) {
        mimeTypeId =  (String)currentValue.get("drMimeTypeId");
        rootDir = request.getSession().getServletContext().getRealPath("/");
        wrapper = BeansWrapper.getDefaultInstance();
        WrappingTemplateModel.setDefaultObjectWrapper(wrapper);
        templateRoot = new HashMap();
        FreeMarkerViewHandler.prepOfbizRoot(templateRoot, request, response);
        ctx = new HashMap();
        ctx.put("rootDir", rootDir);
        // webSiteId and https need to go here, too
        templateRoot.put("context", ctx);
        out = new StringWriter();
        currentValue.set("drDataTemplateTypeId", "NONE");
        DataResourceWorker.renderDataResourceAsText(delegator, dataResourceId, out, templateRoot, currentValue, locale, mimeTypeId);
        textData = out.toString();
        //Debug.logInfo("in editsubcontentprep, textData:" + textData, "");
        //Debug.logInfo("in editsubcontentprep, contentIdTo:" + contentIdTo, "");
        currentMap.put("textData", textData);
    }
    singleWrapper.putInContext("currentValue", currentMap);
}

//if (!contentIdTo.equals("TEMPLATE_MASTER")) {
//Debug.logInfo("in editsubcontentprep(2), contentIdTo:" + contentIdTo, "");
    //context.put("dynamicPrimaryHTMLField", "textData");
//}

singleWrapper.putInContext("contentIdTo", contentIdTo);
mapKey = (String)paramMap.get("mapKey");
Debug.logInfo("in editsubcontentprep, mapKey:" + mapKey, "");
singleWrapper.putInContext("mapKey", mapKey);
context.put("singleWrapper", singleWrapper);

