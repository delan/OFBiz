/*
 * Copyright 2001-2006 The Apache Software Foundation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.content.ContentManagementWorker;

import freemarker.template.SimpleHash;
import freemarker.template.SimpleSequence;

import javax.servlet.*;
import javax.servlet.http.*;
/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      2.1

 */

dispatcher      = (LocalDispatcher)request.getAttribute("dispatcher");
delegator = (GenericDelegator) request.getAttribute("delegator");
paramMap = UtilHttp.getParameterMap(request);

ServletContext servletContext = session.getServletContext();
webSitePublishPoint = ContentManagementWorker.getFromSomewhere("webSitePublishPoint", paramMap, request, context);
if (UtilValidate.isEmpty(webSitePublishPoint)) {
    webSitePublishPoint = (String) servletContext.getAttribute("webSiteId");
}

blogRoles = delegator.findByAndCache("RoleType", UtilMisc.toMap("parentTypeId", "BLOG"));

partyId = ContentManagementWorker.getFromSomewhere("partyId", paramMap, request, context);
userLoginId = ContentManagementWorker.getFromSomewhere("userLoginId", paramMap, request, context);

if (UtilValidate.isNotEmpty(partyId)) {
    HashMap inMap               = new HashMap();
    inMap.put("assocTypes", UtilMisc.toList("SUBSITE"));
    inMap.put("contentId", webSitePublishPoint);
    inMap.put("direction", "FROM");

    //Debug.logInfo("in siteprep, inMap:" + inMap,"");
    Map result                  = null;
    try {
               result = dispatcher.runSync("getAssocAndContentAndDataResourceCache", inMap    );
    } catch (GenericServiceException e) {
        request.setAttribute("_ERROR_MESSAGE_", "ERROR: Error in  getAssocAndContentAndDataResourceservice. "
                     + e.getMessage() + ")");
                Debug.log(e, "findprep.bsh");
                return "error";
    }

    entityList = (List)result.get("entityList");
    //Debug.logInfo("in siteprep(1), entityList:" + entityList,"");

    siteList = new ArrayList();
    it = entityList.iterator();
    while (it.hasNext()) {
        subContent = it.next();
        contentId = subContent.get("contentId");
        content = delegator.findByPrimaryKeyCache("Content", UtilMisc.toMap("contentId", contentId));
        contentName = content.get("contentName");
        siteRoleMap = new HashMap();
        siteRoleMap.put("partyId", partyId);
        siteRoleMap.put("contentId", contentId);
        siteRoleMap.put("contentName", contentName);
        for (int i=0; i < blogRoles.size; i++) {
            roleType = blogRoles.get(i);
            roleTypeId = roleType.getString("roleTypeId");
            contentRoleList = delegator.findByAnd("ContentRole", UtilMisc.toMap("contentId", contentId, "partyId", partyId, "roleTypeId", roleTypeId));
            filteredRoleList = EntityUtil.filterByDate(contentRoleList);
            Debug.logInfo("in siteprep(1), filteredRoleList:" + filteredRoleList,"");
            cappedBlogRoleName = ModelUtil.dbNameToVarName(roleTypeId);
            Debug.logInfo("in siteprep(1), cappedBlogRoleName:" + cappedBlogRoleName,"");

            
            if (filteredRoleList.size() > 0) {
                contentRole = contentRoleList.get(0);
                siteRoleMap.put( cappedBlogRoleName, "Y");
            } else {
                siteRoleMap.put( cappedBlogRoleName, "N");
            }
        }
        siteList.add(siteRoleMap);
    }
    //Debug.logInfo("in siteprep(1), siteList:" + siteList,"");
    context.put("siteList", siteList);
    context.put("partyId", partyId);
    context.put("userLoginId", userLoginId);
    if (UtilValidate.isNotEmpty(userLoginId)) {
        partyAndUserLoginAndPerson = delegator.findByPrimaryKeyCache("PartyAndUserLoginAndPerson", UtilMisc.toMap("partyId", partyId, "userLoginId", userLoginId));
        context.put("partyAndUserLoginAndPerson", partyAndUserLoginAndPerson);
            Debug.logInfo("in siteprep(1), partyAndUserLoginAndPerson:" + partyAndUserLoginAndPerson,"");
    }
            Debug.logInfo("in siteprep(1), webSitePublishPoint:" + webSitePublishPoint,"");
    context.put("rowCount", siteList.size());
}
    blogRoleIter = blogRoles.iterator();
    blogRoleList = new ArrayList();
    while (blogRoleIter.hasNext()) {
        roleType = blogRoleIter.next();
        blogRoleList.add(roleType.get("roleTypeId"));
    }
    context.put("blogRoleIdList", blogRoleList);
    context.put("webSitePublishPoint", webSitePublishPoint);
