/*
 * Copyright 2001-2006 The Apache Software Foundation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.sql.Timestamp;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;


import javax.servlet.*;
import javax.servlet.http.*;
/**
 * A special "formprep"-like script for ContentAssoc which has two (from/to)
 * lists to retrieve.
 */

userLogin = session.getAttribute("userLogin");
Timestamp now = UtilDateTime.nowTimestamp();
    
formDefFile		= page.getProperty("formDefFile");
entityName		= page.getProperty("entityName");

GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

currentEntityMap = session.getAttribute("currentEntityMap");
if(currentEntityMap == null){
    currentEntityMap     = new HashMap();
    session.setAttribute("currentEntityMap", currentEntityMap);
}

cachedPK = currentEntityMap.get("ContentAssoc");
if (cachedPK != null)
    contentAssocValue = delegator.findByPrimaryKey(cachedPK.getPrimaryKey()); 

contentValue = (GenericValue)request.getAttribute("currentValue");

	context.put("contentValue", contentValue);
	toList = contentValue.getRelatedCache("FromContentAssoc");
	context.put("toList", toList);
	fromList = contentValue.getRelatedCache("ToContentAssoc");
	context.put("fromList", fromList);

        contentId = request.getParameter("contentId");
        contentIdTo = request.getParameter("contentIdTo");
        contentAssocTypeId = request.getParameter("contentAssocTypeId");
        fromDate = request.getParameter("fromDate");
        try {
            contentAssocValue = delegator.findByPrimaryKey("ContentAssoc",
                     UtilMisc.toMap("contentId", contentId, "contentIdTo", contentIdTo,
                        "contentAssocTypeId", contentAssocTypeId, "fromDate", fromDate)); 
            if (contentAssocValue != null) 
                currentEntityMap.put("ContentAssoc", contentAssocValue);
        } catch(GenericEntityException e) {
               request.setAttribute("_ERROR_MESSAGE_", e.getMessage());
        }
	HtmlFormWrapper editWrapper = new HtmlFormWrapper(formDefFile, 
					"EditContentAssoc", request, response);
        // Don't this this is ever set
	context.put("contentAssocValue", contentAssocValue);
	editWrapper.putInContext("contentAssocValue", contentAssocValue);

	context.put("editWrapper", editWrapper);

	HtmlFormWrapper addWrapper = new HtmlFormWrapper(formDefFile, 
					"AddContentAssoc", request, response);
	addWrapper.putInContext("contentId", contentValue.get("contentId"));
	addWrapper.putInContext("fromDate", now);
	addWrapper.putInContext("createdDate", now);
	addWrapper.putInContext("lastModifiedDate", now);
	addWrapper.putInContext("createdByUserLogin", userLogin.get("userLoginId"));
	addWrapper.putInContext("lastModifiedByUserLogin", userLogin.get("userLoginId"));
	context.put("addWrapper", addWrapper);

	HtmlFormWrapper listToWrapper = new HtmlFormWrapper(formDefFile, 
					"ListContentAssocTo", request, response);
	listToWrapper.putInContext("toList", toList);
	context.put("listToWrapper", listToWrapper);

	HtmlFormWrapper listFromWrapper = new HtmlFormWrapper(formDefFile, 
					"ListContentAssocFrom", request, response);
	listFromWrapper.putInContext("fromList", fromList);
	context.put("listFromWrapper", listFromWrapper);

