/*
 * $Id: contentassocprep.bsh 5462 2005-08-05 18:35:48Z jonesde $
 *
 * Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.sql.Timestamp;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;


import javax.servlet.*;
import javax.servlet.http.*;
/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      3.0

 * A special "formprep"-like script for ContentAssoc which has two (from/to)
 * lists to retrieve.
 */

userLogin = session.getAttribute("userLogin");
Timestamp now = UtilDateTime.nowTimestamp();
    
formDefFile		= page.getProperty("formDefFile");
entityName		= page.getProperty("entityName");

GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

currentEntityMap = session.getAttribute("currentEntityMap");
if(currentEntityMap == null){
    currentEntityMap     = new HashMap();
    session.setAttribute("currentEntityMap", currentEntityMap);
}

cachedPK = currentEntityMap.get("ContentAssoc");
if (cachedPK != null)
    contentAssocValue = delegator.findByPrimaryKey(cachedPK.getPrimaryKey()); 

contentValue = (GenericValue)request.getAttribute("currentValue");

	context.put("contentValue", contentValue);
	toList = contentValue.getRelatedCache("FromContentAssoc");
	context.put("toList", toList);
	fromList = contentValue.getRelatedCache("ToContentAssoc");
	context.put("fromList", fromList);

        contentId = request.getParameter("contentId");
        contentIdTo = request.getParameter("contentIdTo");
        contentAssocTypeId = request.getParameter("contentAssocTypeId");
        fromDate = request.getParameter("fromDate");
        try {
            contentAssocValue = delegator.findByPrimaryKey("ContentAssoc",
                     UtilMisc.toMap("contentId", contentId, "contentIdTo", contentIdTo,
                        "contentAssocTypeId", contentAssocTypeId, "fromDate", fromDate)); 
            if (contentAssocValue != null) 
                currentEntityMap.put("ContentAssoc", contentAssocValue);
        } catch(GenericEntityException e) {
               request.setAttribute("_ERROR_MESSAGE_", e.getMessage());
        }
	HtmlFormWrapper editWrapper = new HtmlFormWrapper(formDefFile, 
					"EditContentAssoc", request, response);
        // Don't this this is ever set
	context.put("contentAssocValue", contentAssocValue);
	editWrapper.putInContext("contentAssocValue", contentAssocValue);

	context.put("editWrapper", editWrapper);

	HtmlFormWrapper addWrapper = new HtmlFormWrapper(formDefFile, 
					"AddContentAssoc", request, response);
	addWrapper.putInContext("contentId", contentValue.get("contentId"));
	addWrapper.putInContext("fromDate", now);
	addWrapper.putInContext("createdDate", now);
	addWrapper.putInContext("lastModifiedDate", now);
	addWrapper.putInContext("createdByUserLogin", userLogin.get("userLoginId"));
	addWrapper.putInContext("lastModifiedByUserLogin", userLogin.get("userLoginId"));
	context.put("addWrapper", addWrapper);

	HtmlFormWrapper listToWrapper = new HtmlFormWrapper(formDefFile, 
					"ListContentAssocTo", request, response);
	listToWrapper.putInContext("toList", toList);
	context.put("listToWrapper", listToWrapper);

	HtmlFormWrapper listFromWrapper = new HtmlFormWrapper(formDefFile, 
					"ListContentAssocFrom", request, response);
	listFromWrapper.putInContext("fromList", fromList);
	context.put("listFromWrapper", listFromWrapper);

