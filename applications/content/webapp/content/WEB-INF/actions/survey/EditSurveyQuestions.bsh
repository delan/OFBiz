/*
 *  Copyright (c) 2003-2006 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones (jonesde@ofbiz.org)
 *@author     Patrick Lykins (patrick.lykins@gabes.net)
 *@version    $Rev$
 *@since      3.0
 */

import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.widget.html.*;

surveyQuestionId = parameters.get("surveyQuestionId");
context.put("surveyQuestionId", surveyQuestionId);

surveyQuestion = delegator.findByPrimaryKey("SurveyQuestion", UtilMisc.toMap("surveyQuestionId", surveyQuestionId));

surveyQuestionAndApplList = delegator.findByAnd("SurveyQuestionAndAppl", UtilMisc.toMap("surveyId", surveyId), UtilMisc.toList("sequenceNum"));
surveyPageList = delegator.findByAnd("SurveyPage", UtilMisc.toMap("surveyId", surveyId), UtilMisc.toList("sequenceNum"));
surveyMultiRespList = delegator.findByAnd("SurveyMultiResp", UtilMisc.toMap("surveyId", surveyId), UtilMisc.toList("multiRespTitle"));

HtmlFormWrapper createSurveyQuestionWrapper = new HtmlFormWrapper("/survey/SurveyForms.xml", "CreateSurveyQuestion", request, response);
createSurveyQuestionWrapper.putInContext("surveyId", surveyId);
createSurveyQuestionWrapper.putInContext("surveyQuestion", surveyQuestion);

HtmlFormWrapper createSurveyQuestionCategoryWrapper = new HtmlFormWrapper("/survey/SurveyForms.xml", "CreateSurveyQuestionCategory", request, response);
createSurveyQuestionCategoryWrapper.putInContext("surveyId", surveyId);

if (surveyQuestion != null && surveyQuestion.get("surveyQuestionTypeId") != null && "OPTION".equals(surveyQuestion.getString("surveyQuestionTypeId"))) {
    // get the options
    questionOptions = delegator.findByAnd("SurveyQuestionOption", UtilMisc.toMap("surveyQuestionId", surveyQuestionId), UtilMisc.toList("sequenceNum"));
    context.put("questionOptions", questionOptions);

    HtmlFormWrapper createSurveyOptionWrapper = new HtmlFormWrapper("/survey/SurveyForms.xml", "CreateSurveyQuestionOption", request, response);

    // survey question option
    optionSeqId = parameters.get("surveyOptionSeqId");
    surveyQuestionOption = null;
    if (optionSeqId != null) {
        surveyQuestionOption = delegator.findByPrimaryKey("SurveyQuestionOption", UtilMisc.toMap("surveyQuestionId", surveyQuestionId, "surveyOptionSeqId", optionSeqId));
    }
    context.put("surveyQuestionOption", surveyQuestionOption);

    createSurveyOptionWrapper.putInContext("surveyQuestionOption", surveyQuestionOption);
    createSurveyOptionWrapper.putInContext("surveyQuestionId", surveyQuestionId);
    createSurveyOptionWrapper.putInContext("surveyId", surveyId);
    context.put("createSurveyOptionWrapper", createSurveyOptionWrapper);
}

surveyQuestionCategoryId = parameters.get("surveyQuestionCategoryId");
surveyQuestionCategory = null;
categoryQuestions = null;
if (!UtilValidate.isEmpty(surveyQuestionCategoryId)) {
    surveyQuestionCategory = delegator.findByPrimaryKey("SurveyQuestionCategory", UtilMisc.toMap("surveyQuestionCategoryId", surveyQuestionCategoryId));
    if (surveyQuestionCategory != null) {
        categoryQuestions = surveyQuestionCategory.getRelated("SurveyQuestion");
    }
}
questionCategories = delegator.findAll("SurveyQuestionCategory", UtilMisc.toList("description"));

context.put("surveyQuestion", surveyQuestion);

context.put("surveyQuestionAndApplList", surveyQuestionAndApplList);
context.put("surveyPageList", surveyPageList);
context.put("surveyMultiRespList", surveyMultiRespList);

context.put("createSurveyQuestionWrapper", createSurveyQuestionWrapper);
context.put("createSurveyQuestionCategoryWrapper", createSurveyQuestionCategoryWrapper);

context.put("surveyQuestionCategory", surveyQuestionCategory);
context.put("categoryQuestions", categoryQuestions);
context.put("questionCategories", questionCategories);
