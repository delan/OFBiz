/*
 * Copyright 2001-2006 The Apache Software Foundation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      3.0

 * A commonly called script to find the "current" entity (either Content or DataResource
 * usually) from either a cached key or overridden by current values in the parameter map
 * or request attributes.
 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.widget.menu.*;
import org.ofbiz.content.ContentManagementWorker;

import java.lang.StringBuffer;
import javax.servlet.*;
import javax.servlet.http.*;


LocalDispatcher dispatcher	= (LocalDispatcher)request.getAttribute("dispatcher");
GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

entityName		= page.getProperty("entityName");
pageName		= page.getPageName();
menuDefFile = page.getProperty("mainMenuDefFile");
menuName = page.getProperty("mainMenuName");
menuSig = menuDefFile + "__" + menuName;
paramMap = UtilHttp.getParameterMap(request);
menuWrapper = HtmlMenuWrapper.getMenuWrapper( request, response, session, menuDefFile, menuName,  "HtmlMenuWrapper");
        modelMenu = menuWrapper.getModelMenu();
pubPt = ContentManagementWorker.getFromSomewhere("pubPt", paramMap, request, context);

ModelMenu currentModelMenu = menuWrapper.getModelMenu();
if (currentModelMenu != null) {
StringBuffer buffer = new StringBuffer();
currentModelMenu.dump(buffer); 
    if (UtilValidate.isNotEmpty(pubPt)) {
        ServletContext servletContext = session.getServletContext();
        rootPubPt = (String) servletContext.getAttribute("webSiteId");
        Map allPublishPointMap = session.getAttribute("allPublishPoints");
        if (allPublishPointMap == null || allPublishPointMap.size() == 0) {
            allPublishPointMap = new HashMap();
            ContentManagementWorker.getAllPublishPointMap(delegator, rootPubPt, allPublishPointMap);
            session.setAttribute("allPublishPoints", allPublishPointMap );
        }
        menuContext = new HashMap();
        menuContext.put("parameters", paramMap);
        menuContext.put("locale", UtilHttp.getLocale(request));

        menuItemValue = allPublishPointMap.get(pubPt);
        Debug.logInfo("in setmainmenuitem(6), menuItemValue:" + menuItemValue,"");
        menuItemContentId = menuItemValue.get("contentId");
        parentMenuItemValue = ContentManagementWorker.getParentWebSitePublishPointValue(delegator, menuItemContentId);
        parentMenuItemContentId = parentMenuItemValue.get("contentId");
        Debug.logInfo("in setmainmenuitem(6), menuItemContentId:" + menuItemContentId,"");
        Debug.logInfo("in setmainmenuitem(6), parentMenuItemContentId:" + parentMenuItemContentId,"");
        // This is part of a very ugly way to identify the top WebSitePublishPoint in a section
        // It is the one below the root, so if the root is the parentMenuItemContentId, then
        // the menuItemContentId should be taken as the subRoot for the purpose of getting the menu
        // and subSite items.
        if (parentMenuItemContentId != null && parentMenuItemContentId.equals(rootPubPt))
            parentMenuItemContentId = menuItemContentId;

        menuItem = modelMenu.getModelMenuItemByContentId(parentMenuItemContentId, (Map)new HashMap());
        String menuItemName = menuItem.getName();
//Debug.logInfo("in setmainmenuitem, pubPt:" + pubPt,"");
//Debug.logInfo("in setmainmenuitem, menuItemName:" + menuItemName,"");
        if (UtilValidate.isNotEmpty(menuItemName)) {
            currentModelMenu.setCurrentMenuItemName(menuItemName);
            menuWrapper.putInContext(menuItemName, "pubPt", pubPt);
        }
    }
}

