/*
 *  Copyright (c) 2003-2005 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski
 *@version    $Rev$
 *@since      3.5
 */

import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.base.util.*;
import org.ofbiz.party.party.*;

match = request.getParameter("match");
if (match != null) {
    context.put("match", match);
    
    lastName = request.getParameter("lastName");
    if (UtilValidate.isEmpty(lastName)) lastName = null;

    firstName = request.getParameter("firstName");
    if (UtilValidate.isEmpty(firstName)) firstName = null;

    address1 = request.getParameter("address1");
    if (UtilValidate.isEmpty(address1)) address1 = null;

    address2 = request.getParameter("address2");
    if (UtilValidate.isEmpty(address2)) address2 = null;

    city = request.getParameter("city");
    if (UtilValidate.isEmpty(city)) city = null;

    state = request.getParameter("stateProvinceGeoId");
    if (UtilValidate.isEmpty(state)) state = null;
    if ("ANY".equals(state)) state = null;

    postalCode = request.getParameter("postalCode");
    if (UtilValidate.isEmpty(postalCode)) postalCode = null;

    if (state != null) {
        context.put("currentStateGeo", delegator.findByPrimaryKey("Geo", UtilMisc.toMap("geoId", state)));
    }

    if (firstName == null || lastName == null || address1 == null || city == null || postalCode == null) {
        request.setAttribute("_ERROR_MESSAGE_", "Required fields not set!");
        return;
    }
    
    context.put("matches", PartyWorker.findMatchingPartyAndPostalAddress(delegator, address1, address2, city,
            state, postalCode, null, null, firstName, null, lastName));

    context.put("addressString", PartyWorker.makeMatchingString(delegator, address1));
    context.put("lastName", lastName);
    context.put("firstName", firstName);
}
