<?xml version="1.0" encoding="UTF-8" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
    <simple-method method-name="updateAVSOverride" short-description="Create/Update The AVS Override String">
        <make-value value-name="lookupPKMap" entity-name="PartyIcsAvsOverride"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="PartyIcsAvsOverride" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <if-not-empty map-name="lookedUpValue" field-name="partyId">
            <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
            <store-value value-name="lookedUpValue"/>
        </if-not-empty>
        <if-empty map-name="lookedUpValue" field-name="partyId">
            <set-nonpk-fields map-name="parameters" value-name="lookupPKMap"/>
            <create-value value-name="lookupPKMap"/>
        </if-empty>
    </simple-method>

    <simple-method method-name="deleteAVSOverride" short-description="Delete The AVS Override String">
        <make-value value-name="lookupPKMap" entity-name="PartyIcsAvsOverride"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="PartyIcsAvsOverride" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <if-not-empty map-name="lookedUpValue" field-name="partyId">
            <remove-value value-name="lookedUpValue"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="ensureNaPartyRole" short-description="Ensure Party is in _NA_ or the specified Role" login-required="false">
        <!-- must have a partyId, partyIdFrom, or partyIdTo in the parameters map, should be called through different service defs for each one -->
        <if-not-empty field-name="parameters.partyId">
            <set field="lookupPKMap.partyId" from-field="parameters.partyId"/>
            <else>
                <if-not-empty field-name="parameters.partyIdFrom">
                    <set field="lookupPKMap.partyId" from-field="parameters.partyIdFrom"/>
                    <else>
                        <if-not-empty field-name="parameters.partyIdTo">
                            <set field="lookupPKMap.partyId" from-field="parameters.partyIdTo"/>
                        </if-not-empty>
                    </else>
                </if-not-empty>
            </else>
        </if-not-empty>

        <if-empty field-name="parameters.roleTypeId">
            <set field="lookupPKMap.roleTypeId" value="_NA_"/>
        <else>
            <set from-field="parameters.roleTypeId" field="lookupPKMap.roleTypeId"/>
        </else>
        </if-empty>
        <find-by-primary-key entity-name="PartyRole" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <if-empty field-name="lookedUpValue">
            <make-value value-name="newValue" entity-name="PartyRole" map-name="lookupPKMap"/>
            <create-value value-name="newValue"/>
        </if-empty>
    </simple-method>

    <simple-method method-name="createPersonAndUserLogin" short-description="Creates a person and userlogin" login-required="false">
        <set-service-fields service-name="createUserLogin" map-name="parameters" to-map-name="createUlInMap"/>

        <set-service-fields service-name="createPerson" map-name="parameters" to-map-name="createPersonCtx"/>
        <call-service service-name="createPerson" in-map-name="createPersonCtx">
            <result-to-field result-name="partyId" map-name="createUlInMap"/>
        </call-service>

        <!-- call the service with the system account to get around security constraints for this special create -->
        <entity-one entity-name="UserLogin" value-name="createUlInMap.userLogin" auto-field-map="false">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        
        <call-service service-name="createUserLogin" in-map-name="createUlInMap"/>
        <entity-one entity-name="UserLogin" value-name="newUserLogin"/>

        <field-to-result field-name="newUserLogin"/>
        <field-to-result field-name="createUlInMap.partyId" result-name="partyId"/>
    </simple-method>
 
    <!-- Simple method to create a person, its role and basic contact mechs -->
    <simple-method method-name="createPersonRoleAndContactMechs" short-description="Creates a person, role and contactMechs">
        <call-map-processor processor-name="person" in-map-name="parameters" out-map-name="personContext"
            xml-resource="org/ofbiz/party/party/PartyMapProcs.xml"/>
     
        <call-map-processor processor-name="postalAddress" in-map-name="parameters" out-map-name="postalAddressContext"
            xml-resource="org/ofbiz/party/contact/PartyContactMechMapProcs.xml"/>
     
        <if-not-empty field-name="parameters.contactNumber">
            <call-map-processor processor-name="telecomNumber" in-map-name="parameters" out-map-name="telecomNumberContext"
                xml-resource="org/ofbiz/party/contact/PartyContactMechMapProcs.xml"/>
        </if-not-empty>
     
        <if-not-empty field-name="parameters.emailAddress">
            <call-map-processor in-map-name="parameters" out-map-name="emailAddressContext">
                <simple-map-processor name="emailAddress">
                    <process field="emailAddress">
                        <copy/>
                        <validate-method method="isEmail"><fail-property resource="PartyUiLabels" property="PartyEmailAddressNotFormattedCorrectly"/></validate-method>
                    </process>
                </simple-map-processor>
            </call-map-processor>
        </if-not-empty>
        <check-errors/>
     
        <call-service service-name="createPerson" in-map-name="personContext">
            <result-to-field result-name="partyId" field-name="partyId"/>
        </call-service>
     
        <if-not-empty field-name="parameters.roleTypeId">
            <set field="createPartyRoleCtx.partyId" from-field="partyId"/>
            <set field="createPartyRoleCtx.roleTypeId" from-field="parameters.roleTypeId"/>
            <call-service service-name="createPartyRole" in-map-name="createPartyRoleCtx"/>
        </if-not-empty>
     
        <set field="postalAddContactMechPurpTypeId" from-field="parameters.postalAddContactMechPurpTypeId"/>
        <set field="contactNumber" from-field="parameters.contactNumber"/>
        <set field="phoneContactMechPurpTypeId" from-field="parameters.phoneContactMechPurpTypeId"/>
        <set field="emailAddress" from-field="parameters.emailAddress"/>
        <set field="emailContactMechPurpTypeId" from-field="parameters.emailContactMechPurpTypeId"/>
        <call-simple-method method-name="createPartyContactMechs"/>        
    </simple-method>
 
    <!-- Simple method to create a party group, its role and basic contact mechs -->
    <simple-method method-name="createPartyGroupRoleAndContactMechs" short-description="Creates a party group, role and contactMechs">
        <call-map-processor processor-name="partyGroup" in-map-name="parameters" out-map-name="partyGroupContext"
            xml-resource="org/ofbiz/party/party/PartyMapProcs.xml"/>
     
        <call-map-processor processor-name="postalAddress" in-map-name="parameters" out-map-name="postalAddressContext"
            xml-resource="org/ofbiz/party/contact/PartyContactMechMapProcs.xml"/>
     
        <if-not-empty field-name="parameters.contactNumber">
            <call-map-processor processor-name="telecomNumber" in-map-name="parameters" out-map-name="telecomNumberContext"
                xml-resource="org/ofbiz/party/contact/PartyContactMechMapProcs.xml"/>
        </if-not-empty>
     
        <if-not-empty field-name="parameters.emailAddress">
            <call-map-processor in-map-name="parameters" out-map-name="emailAddressContext">
                <simple-map-processor name="emailAddress">
                    <process field="emailAddress">
                        <copy/>
                        <validate-method method="isEmail"><fail-property resource="PartyUiLabels" property="PartyEmailAddressNotFormattedCorrectly"/></validate-method>
                    </process>
                </simple-map-processor>
            </call-map-processor>
        </if-not-empty>
        <check-errors/>
     
        <set field="partyGroupContext.partyTypeId" value="PARTY_GROUP"/>
        <call-service service-name="createPartyGroup" in-map-name="partyGroupContext">
            <result-to-field result-name="partyId" field-name="partyId"/>
        </call-service>
     
        <if-not-empty field-name="parameters.roleTypeId">
            <set field="createPartyRoleCtx.partyId" from-field="partyId"/>
            <set field="createPartyRoleCtx.roleTypeId" from-field="parameters.roleTypeId"/>
            <call-service service-name="createPartyRole" in-map-name="createPartyRoleCtx"/>
        </if-not-empty>
     
        <set field="postalAddContactMechPurpTypeId" from-field="parameters.postalAddContactMechPurpTypeId"/>
        <set field="contactNumber" from-field="parameters.contactNumber"/>
        <set field="phoneContactMechPurpTypeId" from-field="parameters.phoneContactMechPurpTypeId"/>
        <set field="emailAddress" from-field="parameters.emailAddress"/>
        <set field="emailContactMechPurpTypeId" from-field="parameters.emailContactMechPurpTypeId"/>
        <call-simple-method method-name="createPartyContactMechs"/>        
    </simple-method>
 
    <!-- Simple method to create Party Postal Address, Telecom Number and Email Address, to be used by
         createPersonRoleAndContactMechs and createPartyGroupRoleAndContactMechs simple methods -->
    <simple-method method-name="createPartyContactMechs" short-description="Create Contact Mechs">
        <!-- Create Party Postal Address and set purpose -->
        <set field="postalAddressContext.partyId" from-field="partyId"/>
        <call-service service-name="createPartyPostalAddress" in-map-name="postalAddressContext">
            <result-to-field result-name="contactMechId" field-name="addressContactMechId"/>
        </call-service>
     
        <set field="postalAddressPurposeCtx.partyId" from-field="partyId"/>
        <set field="postalAddressPurposeCtx.contactMechId" from-field="addressContactMechId"/>
        <set field="postalAddressPurposeCtx.contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
        <call-service service-name="createPartyContactMechPurpose" in-map-name="postalAddressPurposeCtx"/>
     
        <if-not-empty field-name="postalAddContactMechPurpTypeId">
            <set field="postalAddressPurposeCtx.contactMechPurposeTypeId" from-field="postalAddContactMechPurpTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="postalAddressPurposeCtx"/>
        </if-not-empty>
     
        <!-- Create Party Telecom Number and set purpose -->
        <if-not-empty field-name="contactNumber">
            <set field="telecomNumberContext.partyId" from-field="partyId"/>
            <call-service service-name="createPartyTelecomNumber" in-map-name="telecomNumberContext">
                <result-to-field result-name="contactMechId" field-name="phoneContactMechId"/>
            </call-service>
         
            <set field="phonePurposeContext.partyId" from-field="partyId"/>
            <set field="phonePurposeContext.contactMechId" from-field="phoneContactMechId"/>
            <set field="phonePurposeContext.contactMechPurposeTypeId" from-field="phoneContactMechPurpTypeId"/>
            <if-empty field-name="phonePurposeContext.contactMechPurposeTypeId">
                <set field="phonePurposeContext.contactMechPurposeTypeId" value="PRIMARY_PHONE"/> 
            </if-empty>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="phonePurposeContext"/>
        </if-not-empty>
     
        <!-- Create Party Email Address and set purpose -->
        <if-not-empty field-name="emailAddress">
            <set field="emailAddressContext.partyId" from-field="partyId"/>
            <call-service service-name="createPartyEmailAddress" in-map-name="emailAddressContext">
                <result-to-field result-name="contactMechId" field-name="emailContactMechId"/>
            </call-service>
         
            <set field="emailPurposeContext.partyId" from-field="partyId"/>
            <set field="emailPurposeContext.contactMechId" from-field="emailContactMechId"/>
            <set field="emailPurposeContext.contactMechPurposeTypeId" from-field="emailContactMechPurpTypeId"/>
            <if-empty field-name="emailPurposeContext.contactMechPurposeTypeId">
                 <set field="emailPurposeContext.contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
            </if-empty>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="emailPurposeContext"/>
        </if-not-empty>
    </simple-method>
</simple-methods>
