import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.party.contact.ContactHelper;

partyId = parameters.get("leadPartyId");
if(UtilValidate.isNotEmpty(partyId)) {
    party =  delegator.findOne("Party", UtilMisc.toMap("partyId", partyId), false);
    person = party.getRelatedOne("Person");
    contactDetailMap = UtilMisc.toMap("partyId", partyId, "firstName", person.get("firstName"), "lastName", person.get("lastName"), "suffix", person.get("suffix"));
    partyRelationship = EntityUtil.getFirst(EntityUtil.filterByDate(delegator.findByAnd("PartyRelationship", UtilMisc.toMap("partyIdTo", partyId, 
                                 "roleTypeIdTo", "EMPLOYEE", "roleTypeIdFrom", "LEAD", "partyRelationshipTypeId", "EMPLOYMENT"), UtilMisc.toList("-fromDate"))));
    if(UtilValidate.isNotEmpty(partyRelationship)) {
        contactDetailMap.put("title", partyRelationship.get("positionTitle"));
        partyGroup = delegator.findOne("PartyGroup", UtilMisc.toMap("partyId", partyRelationship.get("partyIdFrom")), false);
        if(UtilValidate.isNotEmpty(partyGroup)) {
            if(UtilValidate.isNotEmpty(partyGroup.get("groupName"))) {
                contactDetailMap.put("groupName", partyGroup.get("groupName"));
            }
            if(UtilValidate.isNotEmpty(partyGroup.get("officeSiteName"))) {
                contactDetailMap.put("officeSiteName", partyGroup.get("officeSiteName"));
            }
            if(UtilValidate.isNotEmpty(partyGroup.get("numEmployees"))) {
                contactDetailMap.put("numEmployees", partyGroup.get("numEmployees"));
            }
        }
    }
    generalContactMech = EntityUtil.getFirst(ContactHelper.getContactMech(person, "GENERAL_LOCATION", "POSTAL_ADDRESS", false));
    if(UtilValidate.isNotEmpty(generalContactMech)) {
        contactDetailMap.put("addrContactMechId", generalContactMech.get("contactMechId"));
        postalAddress = genLocContactMech.getRelatedOne("PostalAddress");
        if(UtilValidate.isNotEmpty(postalAddress)) {
            contactDetailMap.put("address1", postalAddress.get("address1"));
            contactDetailMap.put("city", postalAddress.get("city"));
            contactDetailMap.put("stateProvinceGeoId", postalAddress.get("stateProvinceGeoId"));
            contactDetailMap.put("countryGeoId", postalAddress.get("countryGeoId"));
            contactDetailMap.put("postalCode", postalAddress.get("postalCode"));
            address2 = postalAddress.get("address2");
            if(UtilValidate.isNotEmpty(address2)) {
                contactDetailMap.put("address2", address2);
            }
        }
    }
    emailContactMech = EntityUtil.getFirst(ContactHelper.getContactMech(person, "PRIMARY_EMAIL", "EMAIL_ADDRESS", false));
    if(UtilValidate.isNotEmpty(emailContactMech)) {
        contactDetailMap.put("emailAddress", emailContactMech.get("infoString"));
        contactDetailMap.put("emailContactMechId", emailContactMech.get("contactMechId"));
    }
    phoneContactMech = EntityUtil.getFirst(ContactHelper.getContactMech(person, "PRIMARY_PHONE", "TELECOM_NUMBER", false));
    if(UtilValidate.isNotEmpty(phoneContactMech)) {
        contactDetailMap.put("phoneContactMechId", phoneContactMech.get("contactMechId"));
        telecomNumber = phoneContactMech.getRelatedOne("TelecomNumber"); 
        if(UtilValidate.isNotEmpty(telecomNumber)) {
            countryCode = telecomNumber.get("countryCode");
            if(UtilValidate.isNotEmpty(countryCode)) {
                contactDetailMap.put("countryCode", countryCode);
            }
            areaCode = telecomNumber.get("areaCode");
            if(UtilValidate.isNotEmpty(areaCode)) {
                contactDetailMap.put("areaCode", areaCode);
            }
            contactNumber = telecomNumber.get("contactNumber");
            if(UtilValidate.isNotEmpty(contactNumber)) {
                contactDetailMap.put("contactNumber", contactNumber);
            }
        }
    }
    partyDataSource = EntityUtil.getFirst(party.getRelated("PartyDataSource"));
    if(UtilValidate.isNotEmpty(partyDataSource)) {
        dataSource = partyDataSource.getRelatedOne("DataSource");
        contactDetailMap.put("leadSource", dataSource.get("description"));
    } 
}
context.put("contactDetailMap", contactDetailMap);