import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.util.EntityUtil;
import javolution.util.FastList;
import org.ofbiz.party.contact.ContactHelper;

FastList contactInfoList=FastList.newInstance();
partyIdFrom = parameters.get("partyIdFrom");
partyIdTo = parameters.get("partyIdTo");
if(UtilValidate.isNotEmpty(partyIdFrom) && UtilValidate.isNotEmpty(partyIdTo)) {
    partyList = UtilMisc.toList(partyIdTo, partyIdFrom);
    partyListItr = partyList.iterator();
    while (partyListItr.hasNext()) {
        partyId = partyListItr.next();
        party = delegator.findOne("Party", UtilMisc.toMap("partyId", partyId), false);
        person =  party.getRelatedOne("Person");
        contactDetailMap = UtilMisc.toMap("partyId", partyId, "firstName", person.get("firstName"), "lastName", person.get("lastName"));

        generalContactMech = EntityUtil.getFirst(ContactHelper.getContactMech(party, "GENERAL_LOCATION", "POSTAL_ADDRESS", false));
        if(UtilValidate.isNotEmpty(generalContactMech)) {
            contactDetailMap.put("addrContactMechId", generalContactMech.get("contactMechId"));
            postalAddress = generalContactMech.getRelatedOne("PostalAddress");
            if(UtilValidate.isNotEmpty(postalAddress)) {
                contactDetailMap.put("address1", postalAddress.get("address1"));
                contactDetailMap.put("city", postalAddress.get("city"));
                address2 = postalAddress.get("address2");
                if(UtilValidate.isNotEmpty(address2)) {
                    contactDetailMap.put("address2", address2);
                }
                geo = delegator.findOne("Geo", UtilMisc.toMap("geoId", postalAddress.get("stateProvinceGeoId")), false);
                contactDetailMap.put("state", geo.get("geoName"));
                
                geo = delegator.findOne("Geo", UtilMisc.toMap("geoId", postalAddress.get("countryGeoId")), false);
                contactDetailMap.put("country", geo.get("geoName"));
            }
        }
        emailContactMech = EntityUtil.getFirst(ContactHelper.getContactMech(party, "PRIMARY_EMAIL", "EMAIL_ADDRESS", false));
        if(UtilValidate.isNotEmpty(emailContactMech)) {
            contactDetailMap.put("primaryEmail", emailContactMech.get("infoString"));
            contactDetailMap.put("emailContactMechId", emailContactMech.get("contactMechId"));
        }            
        phoneContactMech = EntityUtil.getFirst(ContactHelper.getContactMech(party, "PRIMARY_PHONE", "TELECOM_NUMBER", false));
        if(UtilValidate.isNotEmpty(phoneContactMech)) {
            contactDetailMap.put("phoneContactMechId", phoneContactMech.get("contactMechId"));
            telecomNumber = phoneContactMech.getRelatedOne("TelecomNumber"); 
            if(UtilValidate.isNotEmpty(telecomNumber)) {
                countryCode = telecomNumber.get("countryCode");
                if(UtilValidate.isNotEmpty(countryCode)) {
                    contactDetailMap.put("countryCode", countryCode);
                }
                areaCode = telecomNumber.get("areaCode");
                if(UtilValidate.isNotEmpty(areaCode)) {
                    contactDetailMap.put("areaCode", areaCode);
                }
                contactNumber = telecomNumber.get("contactNumber");
                if(UtilValidate.isNotEmpty(contactNumber)) {
                    contactDetailMap.put("contactNumber", contactNumber);
                }                
            }
        }
        contactInfoList.add(contactDetailMap);
    }
}
context.put("contactInfoList", contactInfoList);