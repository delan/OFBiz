<?xml version="1.0" encoding="UTF-8" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
    <simple-method method-name="custRequestPermissionCheck" short-description="Cust Request Permission Check">
        <if>
            <condition>
                <and>
                    <not><if-empty field="parameters.fromPartyId"/></not>
                    <not><if-compare-field field="parameters.fromPartyId" to-field="userLogin.partyId" operator="equals"/></not>
                </and>
            </condition>
            <then>
                <set field="primaryPermission" value="ORDERMGR_CRQ"/>
                <call-simple-method method-name="genericBasePermissionCheck" xml-resource="component://common/script/org/ofbiz/common/permission/CommonPermissionServices.xml"/>
                <if-compare field="hasPermission" operator="not-equals" value="true">
                    <set field="resourceDescription" from-field="parameters.resourceDescription"/>
                    <if-empty field="resourceDescription">
                        <property-to-field resource="CommonUiLabels" property="CommonPermissionThisOperation" field-name="resourceDescription"/>
                    </if-empty>
                    <property-to-field resource="OrderErrorUiLabels" property="OrderSecurityErrorToRunCreateCustRequest" field-name="failMessage"/>
                    <set field="hasPermission" type="Boolean" value="false"/>
                    <field-to-result field-name="failMessage"/>
                </if-compare>
            </then>
            <else>
                <set field="hasPermission" type="Boolean" value="true"/>
            </else>
        </if>
        <field-to-result field-name="hasPermission"/>
    </simple-method>

    <simple-method method-name="createCustRequest" short-description="Create Customer Request">
        <make-value value-field="newEntity" entity-name="CustRequest"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        
        <now-timestamp-to-env env-name="nowTimestamp"/>
        <set from-field="nowTimestamp" field="newEntity.lastModifiedDate"/>
        <set from-field="nowTimestamp" field="newEntity.createdDate"/>
        <set from-field="userLogin.userLoginId" field="newEntity.lastModifiedByUserLogin"/>
        <set from-field="userLogin.userLoginId" field="newEntity.createdByUserLogin"/>

        <if-empty field="parameters.custRequestDate">
            <set field="newEntity.custRequestDate" from-field="nowTimestamp"/>
        </if-empty>

        <if-empty field="parameters.statusId">
            <set value="CRQ_SUBMITTED" field="newEntity.statusId"/>
        </if-empty>

        <sequenced-id-to-env sequence-name="CustRequest" env-name="custRequestId"/>
        <to-string field-name="custRequestId"/>
        <set from-field="custRequestId" field="newEntity.custRequestId"/>
        <create-value value-name="newEntity"/>
        <field-to-result field-name="custRequestId" map-name="newEntity"/>

        <!-- jacopoc: Commented out the following code because it is too specific and not valid as a
                      general rule: a user may enter the request from a customer even if he will not work
                      on it -->
        <!-- If the logged in partyId that is creating the request is not equal to the fromPartyId
             then we associate it to the request as the request taker.
             This is not done if they are the same e.g. a logged in customer that is creating a request for its
             own sake. -->
        <!-- just in case the service is called by the "system" userLogin -->
        <!--
        <if-not-empty field="userLogin.partyId">
            <if-compare-field field="parameters.fromPartyId" to-field="userLogin.partyId" operator="not-equals">
                <set from-field="newEntity.custRequestId" field="takerMap.custRequestId"/>
                <set from-field="userLogin.partyId" field="takerMap.partyId"/>
                <set value="REQ_TAKER" field="takerMap.roleTypeId"/>
                <call-service service-name="createCustRequestParty" in-map-name="takerMap"/>
            </if-compare-field>
        </if-not-empty>
        -->
        
        <!-- save the created status in the history -->
        <set-service-fields to-map-name="statusMap" service-name="createCustRequestStatus" map-name="newEntity"/>
        <call-service service-name="createCustRequestStatus" in-map-name="statusMap"/>

        <!-- This code is commented because the requester party is no more maintained in the CustRequestParty entity.
             There is now the fromPartyId field in the CustRequest entity for this. -->
        <!--
        <field-to-field field-name="custRequestId" map-name="newEntity" to-map-name="requesterMap"/>
        <if-not-empty field="parameters.requestPartyId">
            <field-to-field field-name="requestPartyId" map-name="parameters" to-map-name="requesterMap" to-field-name="partyId"/>
          <else>
              <field-to-field field-name="partyId" map-name="userLogin" to-map-name="requesterMap"/>
            </else>
        </if-not-empty>
        <string-to-field string="REQ_REQUESTER" map-name="requesterMap" field-name="roleTypeId"/>
        <call-service service-name="createCustRequestParty" in-map-name="requesterMap"/>
        -->
        
        <!-- create also the item if key fields are provided -->
        <if>
            <condition>
                <or>
                    <not><if-empty field="parameters.productId"/></not>
                    <not><if-empty field="parameters.reservStart"/></not>
                    <not><if-empty field="parameters.story"/></not>
                    <not><if-empty field="parameters.description"/></not>
                </or>
            </condition>
            <then>
                <set-service-fields service-name="createCustRequestItem" map-name="parameters" to-map-name="createItem"/>
                <set field="createItem.custRequestId" from-field="newEntity.custRequestId"/>
                <call-service service-name="createCustRequestItem" in-map-name="createItem"/>
            </then>
        </if>
    </simple-method>
    <simple-method method-name="updateCustRequest" short-description="Update Customer Request">
        <entity-one entity-name="CustRequest" value-name="custRequest"/>     
        <field-to-result field-name="custRequest.statusId" result-name="oldStatusId"/>          
        <if-compare-field field="custRequest.statusId" to-field="parameters.statusId" operator="not-equals">
            <if-compare field="parameters.statusId" value="CRQ_CANCELLED" operator="equals">
                <!-- check for related workefforts ...and when no time recorded cancel these too -->
                <get-related value-name="custRequest" relation-name="CustRequestWorkEffort" list-name="workEfforts"/>
                <if-not-empty field="workEfforts">
                    <iterate entry="workEffort" list="workEfforts">
                        <entity-one entity-name="WorkEffort" value-name="lowInfo">
                            <field-map field-name="workEffortId" from-field="workEffort.workEffortId"/>
                        </entity-one>
                        <call-simple-method method-name="getHours" xml-resource="component://projectmgr/script/org/ofbiz/project/ProjectServices.xml"/>
                        <set field="actualHours" from-field="highInfo.actualHours"/>
                        <!-- no hours recorded yet so custrequest can be cancelled -->
                        <if-empty field="actualHours">
                            <!-- changed status-->
                            <set field="custRequest.statusId" from-field="parameters.statusId"/>
                            <set field="updTask.workEffortId" from-field="workEffort.workEffortId"/>
                            <set field="updTask.currentStatusId" value="PTS_CANCELLED"/>
                            <if-has-permission permission="MYPAGE_CUSTOMER">
                                <entity-one entity-name="UserLogin" value-name="userLogin" auto-field-map="false">
                                    <field-map field-name="userLoginId" value="system"/>
                                </entity-one>
                                <set field="updTask.userLogin" from-field="userLogin"/>
                                <else>
                                    <set field="updTask.userLogin" from-field="userLogin"/>
                                </else>
                            </if-has-permission>
                            <call-service service-name="updateWorkEffort" in-map-name="updTask"/>
                            <else>
                                <set field="parameters.statusId" from-field="custRequest.statusId"/>
                                <property-to-field resource="ProjectMgrUiLabels" property="cannotCancelledRequest" field-name="errorMessage"/>
                                <field-to-result field-name="errorMessage"/>
                                <set field="isShowEvent" value="N"/>
                            </else>
                        </if-empty>
                    </iterate>
                </if-not-empty>
                <else>
                    <set field="custRequest.statusId" from-field="parameters.statusId"/>
                </else>
            </if-compare>
            <!-- save the changed status in the history -->
            <set-service-fields to-map-name="statusMap" service-name="createCustRequestStatus" map-name="custRequest"/>
            <call-service service-name="createCustRequestStatus" in-map-name="statusMap"/>
            <if-not-empty field="isShowEvent">
                <clear-field field-name="successMessage"/>
            </if-not-empty>
        </if-compare-field>
        <now-timestamp-to-env env-name="nowTimestamp"/>
        <set from-field="nowTimestamp" field="custRequest.lastModifiedDate"/>
        <set from-field="userLogin.userLoginId" field="custRequest.lastModifiedByUserLogin"/>
        <set-nonpk-fields map="parameters" value-field="custRequest"/>
        <store-value value-name="custRequest"/>
    </simple-method>

    <simple-method method-name="createCustRequestAttribute" short-description="Create Customer Request Attribute">
        <make-value value-field="newEntity" entity-name="CustRequestAttribute"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateCustRequestAttribute" short-description="Update Customer Request Attribute">
        <set from-field="parameters.custRequestId" field="lookupPKMap.custRequestId"/>
        <set from-field="parameters.attrName" field="lookupPKMap.attrName"/>
        <find-by-primary-key entity-name="CustRequestAttribute" map="lookupPKMap" value-field="custRequestAttr"/>
        <set-nonpk-fields map="parameters" value-field="custRequestAttr"/>
        <store-value value-name="custRequestAttr"/>
    </simple-method>

    <simple-method method-name="createCustRequestItem" short-description="Create Customer Request Item">
        <make-value value-field="newEntity" entity-name="CustRequestItem"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <if-empty field="parameters.custRequestItemSeqId">
            <make-next-seq-id value-name="newEntity" seq-field-name="custRequestItemSeqId"/>
        </if-empty>
        <if-empty field="parameters.statusId">
            <set value="CRQ_SUBMITTED" field="newEntity.statusId"/>
        </if-empty>
        <create-value value-name="newEntity"/>
        <field-to-result field-name="newEntity.custRequestId" result-name="custRequestId"/>
        <field-to-result field-name="newEntity.custRequestItemSeqId" result-name="custRequestItemSeqId"/>
    </simple-method>
    <simple-method method-name="updateCustRequestItem" short-description="Update Customer Request Item">
        <set from-field="parameters.custRequestId" field="lookupPKMap.custRequestId"/>
        <set from-field="parameters.custRequestItemSeqId" field="lookupPKMap.custRequestItemSeqId"/>
        <find-by-primary-key entity-name="CustRequestItem" map="lookupPKMap" value-field="custRequestItem"/>
        <set-nonpk-fields map="parameters" value-field="custRequestItem"/>
        <store-value value-name="custRequestItem"/>
    </simple-method>

    <simple-method method-name="createCustRequestParty" short-description="Create Customer RequestParty">
        <set from-field="parameters.partyId" field="lookupPKMap.partyId"/>
        <set from-field="parameters.roleTypeId" field="lookupPKMap.roleTypeId"/>
        <find-by-primary-key entity-name="PartyRole" map="lookupPKMap" value-field="partyRole"/>
        <if-empty field="partyRole.partyId">
            <make-value value-field="partyRole" entity-name="PartyRole"/>
            <set-pk-fields map="lookupPKMap" value-field="partyRole"/>
            <create-value value-name="partyRole"/>
        </if-empty>
        <make-value value-field="newEntity" entity-name="CustRequestParty"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <if-empty field="newEntity.fromDate">
            <now-timestamp-to-env env-name="newEntity.fromDate"/>
        </if-empty>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateCustRequestParty" short-description="Update an existing CustRequestParty">
        <entity-one entity-name="CustRequestParty" value-name="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteCustRequestParty" short-description="Delete Customer CustRequestParty">
        <entity-one entity-name="CustRequestParty" value-name="lookedUpValue"/>
        <now-timestamp-to-env env-name="thruDate"/>
        <set field="lookedUpValue.thruDate" from-field="thruDate"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="createCustRequestNote" short-description="Create Customer Request Note">
        <make-value value-field="newEntity" entity-name="CustRequestNote"/>
        <set from-field="parameters.custRequestId" field="newEntity.custRequestId"/>
        <set from-field="parameters.noteInfo" field="newNoteMap.note"/>
        <call-service service-name="createNote" in-map-name="newNoteMap">
            <result-to-field result-name="noteId" map-name="newEntity"/>
        </call-service>
        <create-value value-name="newEntity"/>
        <field-to-result field-name="newEntity.noteId" result-name="noteId"/>
    </simple-method>
    <simple-method method-name="updateCustRequestNote" short-description="Update CustRequest Note">
        <entity-one entity-name="CustRequestNote" value-name="lookedUpValue"/>
        <entity-one entity-name="NoteData" value-name="lookedUpValueForNoteData"/>
        <set-nonpk-fields value-field="lookedUpValueForNoteData" map="parameters"/>
        <set-nonpk-fields value-field="lookedUpValue" map="parameters"/>
        <store-value value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValueForNoteData"/>
    </simple-method>
    <simple-method method-name="createCustRequestItemNote" short-description="Create Customer RequestItem Note">
        <make-value value-field="newEntity" entity-name="CustRequestItemNote"/>
        <set from-field="parameters.custRequestId" field="newEntity.custRequestId"/>
        <set from-field="parameters.custRequestItemSeqId" field="newEntity.custRequestItemSeqId"/>
        <set from-field="parameters.note" field="newNoteMap.note"/>
        <call-service service-name="createNote" in-map-name="newNoteMap">
            <result-to-field result-name="noteId" map-name="newEntity"/>
        </call-service>
        <create-value value-name="newEntity"/>
        <field-to-result field-name="newEntity.noteId" result-name="noteId"/>
    </simple-method>

    <simple-method method-name="getCustRequestsByRole" short-description="Create Customer RequestItem Note">
        <set from-field="userLogin.partyId" field="lookupMap.partyId"/>
        <set from-field="parameters.roleTypeId" field="lookupMap.roleTypeId"/>
        
        <string-to-list string="priority" list-name="orderByList"/>
        <string-to-list string="-responseRequiredDate" list-name="orderByList"/>
        <string-to-list string="-custRequestDate" list-name="orderByList"/>
        <string-to-list string="-createdDate" list-name="orderByList"/>
        
        <find-by-and entity-name="CustRequestAndRole" list-name="custRequestAndRoles" map-name="lookupMap" order-by-list-name="orderByList"/>
        <field-to-result field-name="custRequestAndRoles" result-name="custRequestAndRoles"/>
    </simple-method>

    <simple-method method-name="createCustRequestFromCart" short-description="Create a CustRequest from a ShoppingCart">
        <call-object-method obj-field-name="parameters.cart" method-name="getPartyId" ret-field-name="createCustRequestInMap.fromPartyId"/>
        <set value="RF_QUOTE" field="createCustRequestInMap.custRequestTypeId"/>
        <set value="CRQ_SUBMITTED" field="createCustRequestInMap.statusId"/>
        <set field="createCustRequestInMap.custRequestName" from-field="parameters.custRequestName"/>
        <call-object-method obj-field-name="parameters.cart" method-name="getCurrency" ret-field-name="createCustRequestInMap.maximumAmountUomId"/>
        <call-object-method obj-field-name="parameters.cart" method-name="getProductStoreId" ret-field-name="createCustRequestInMap.productStoreId"/>
        <call-object-method obj-field-name="parameters.cart" method-name="getChannelType" ret-field-name="createCustRequestInMap.salesChannelEnumId"/>
        <call-service service-name="createCustRequest" in-map-name="createCustRequestInMap">
            <result-to-field result-name="custRequestId" field-name="custRequestId"/>
        </call-service>
        <check-errors/>
        <entity-one entity-name="CustRequest" value-name="custRequest" auto-field-map="true"/>

        <!-- create, for every cart item, a request item -->
        <call-object-method obj-field-name="parameters.cart" method-name="items" ret-field-name="items"/>
        <iterate list="items" entry="item">
            <!-- a new request item is created -->
            <clear-field field-name="createCustRequestItemInMap"/>
            <call-object-method obj-field-name="item" method-name="getConfigWrapper" ret-field-name="configWrapper"/>
            <if-not-empty field="configWrapper">
                <call-object-method obj-field-name="configWrapper" method-name="getConfigId" ret-field-name="configId"/>
                <set from-field="configId" field="createCustRequestItemInMap.configId"/>
            </if-not-empty>
            <call-object-method obj-field-name="item" method-name="getIsPromo" ret-field-name="isPromo"/>
            <if-compare field="isPromo" value="false" operator="equals" type="Boolean">
                <set from-field="custRequest.custRequestId" field="createCustRequestItemInMap.custRequestId"/>
                <call-object-method obj-field-name="item" method-name="getProductId" ret-field-name="createCustRequestItemInMap.productId"/>
                <call-object-method obj-field-name="item" method-name="getQuantity" ret-field-name="createCustRequestItemInMap.quantity"/>
                <!--<call-object-method obj-field-name="item" method-name="getSelectedAmount" ret-field-name="createCustRequestItemInMap.selectedAmount"/>-->
                <!--<call-object-method obj-field-name="item" method-name="getItemComment" ret-field-name="createCustRequestItemInMap.comments"/>-->
                <call-object-method obj-field-name="item" method-name="getReservStart" ret-field-name="createCustRequestItemInMap.reservStart"/>
                <call-object-method obj-field-name="item" method-name="getReservLength" ret-field-name="createCustRequestItemInMap.reservLength"/>
                <call-object-method obj-field-name="item" method-name="getReservPersons" ret-field-name="createCustRequestItemInMap.reservPersons"/>                                
                <call-service service-name="createCustRequestItem" in-map-name="createCustRequestItemInMap">
                    <result-to-field result-name="custRequestItemSeqId" field-name="custRequestItemSeqId"/>
                </call-service>
            </if-compare>
        </iterate>
       
        <field-to-result field-name="custRequest.custRequestId" result-name="custRequestId"/>
    </simple-method>

    <simple-method method-name="createCustRequestFromShoppingList" short-description="Create a CustRequest from a Shopping List">
        <entity-one entity-name="ShoppingList" value-name="shoppingList" auto-field-map="true"/>
        <call-service service-name="loadCartFromShoppingList" in-map-name="parameters">
            <result-to-field result-name="shoppingCart" field-name="cart"/>
        </call-service>
        <set from-field="cart" field="createCustRequestFromCartInMap.cart"/>
        <set field="createCustRequestFromCartInMap.custRequestName" from-field="shoppingList.listName"/>
        <call-service service-name="createCustRequestFromCart" in-map-name="createCustRequestFromCartInMap">
            <result-to-field result-name="custRequestId" field-name="custRequestId"/>
        </call-service>
        <check-errors/>
        <field-to-result field-name="custRequestId" result-name="custRequestId"/>
    </simple-method>

    <!-- copy an existing CustRequestItem -->
    <simple-method method-name="copyCustRequestItem" short-description="Copy an existing CustRequestItem">
        <check-permission permission="ORDERMGR" action="_CRQ_CREATE">
            <fail-property resource="OrderErrorUiLabels" property="OrderSecurityErrorToRunCopyCustRequestItem"/>
        </check-permission>
        <check-errors/>
        <entity-one entity-name="CustRequestItem" value-name="custRequestItem" auto-field-map="true"/>
        <check-errors/>
        
        <set-service-fields service-name="createCustRequestItem" to-map-name="createCustRequestItemInMap" map-name="custRequestItem"/>
        <set field="createCustRequestItemInMap.custRequestId" from-field="parameters.custRequestIdTo"/>
        <set field="createCustRequestItemInMap.custRequestItemSeqId" from-field="parameters.custRequestItemSeqId"/>
        <if-empty field="parameters.custRequestIdTo">
            <if-empty field="parameters.custRequestItemSeqIdTo">
                <clear-field field-name="createCustRequestItemInMap.custRequestItemSeqId"/>
            </if-empty>
        </if-empty>
       
        <call-service service-name="createCustRequestItem" in-map-name="createCustRequestItemInMap">
            <result-to-field result-name="custRequestId" field-name="custRequestIdTo"/>
            <result-to-field result-name="custRequestItemSeqId" field-name="custRequestItemSeqId"/>
        </call-service>

        <check-errors/>
                
        <if-compare field="parameters.copyLinkedQuotes" value="Y" operator="equals">
            <get-related value-name="custRequestItem" relation-name="QuoteItem" list-name="quoteItems"/>
            <iterate list="quoteItems" entry="quoteItem">
                <clear-field field-name="createQuoteItemInMap"/>
                <set-service-fields service-name="createQuoteItem" to-map-name="createQuoteItemInMap" map-name="quoteItem"/>
                <set field="createQuoteItemInMap.custRequestId" from-field="custRequestIdTo"/>
                <set field="createQuoteItemInMap.custRequestItemSeqId" from-field="custRequestItemSeqId"/>
                <clear-field field-name="createQuoteItemInMap.quoteItemSeqId"/>
                <call-service service-name="createQuoteItem" in-map-name="createQuoteItemInMap"/>
            </iterate>
        </if-compare>

        <check-errors/>
    </simple-method>

    <simple-method method-name="createCustRequestStatus" short-description="Create Customer Request Status">
        <make-value value-field="newEntity" entity-name="CustRequestStatus"/>
        <make-next-seq-id value-name="newEntity" seq-field-name="custRequestStatusId"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <if-empty field="newEntity.statusDatetime">
            <now-timestamp-to-env env-name="nowTimestamp"/>
            <set from-field="nowTimestamp" field="newEntity.statusDatetime"/>
        </if-empty>
        <create-value value-name="newEntity"/>
        <field-to-result field-name="newEntity.custRequestStatusId" result-name="custRequestStatusId"/>
    </simple-method>

    <simple-method method-name="setCustRequestStatus" short-description="change the customer request Status">
        <entity-one entity-name="CustRequest" value-name="custRequest"/>
        <field-to-result field-name="custRequest.statusId" result-name="oldStatusId"/>
        <if-compare-field field="custRequest.statusId" to-field="parameters.statusId" operator="not-equals">
            <entity-one entity-name="StatusValidChange" value-name="statusChange">
                <field-map field-name="statusId" from-field="custRequest.statusId"/>
                <field-map field-name="statusIdTo" from-field="parameters.statusId"/>
            </entity-one>
            <if-empty field="statusChange">
                <add-error><fail-message message="Status is not a valid change"/></add-error>
                <log level="error" message="Cannot change from ${custRequest.statusId} to ${parameters.statusId}"/>
                <check-errors/>
                <else>
                    <set field="custRequest.statusId" from-field="parameters.statusId"/>
                    <store-value value-name="custRequest"/>
                </else>
            </if-empty>
        </if-compare-field>
    </simple-method>

    <simple-method method-name="createCustRequestFromCommEvent" short-description="Create a Customer request from a commEvent(email)">
        <entity-one entity-name="CommunicationEvent" value-name="communicationEvent"/>
        <if-empty field="communicationEvent">
            <add-error><fail-message message="Event Id: ${parameters.communicationEventId} not found"/></add-error>
            <return response-code="error"/>
        </if-empty>    
        <set-service-fields service-name="createCustRequest" map-name="parameters" to-map-name="custRequest"/>
        <if-empty field="custRequest.custRequestName">
            <set field="custRequest.custRequestName" from-field="communicationEvent.subject"/>
        </if-empty>
        <if-empty field="parameters.custRequestTypeId">
            <set field="custRequest.custRequestTypeId" value="RF_SUPPORT"/>
        </if-empty>
        <if-empty field="parameters.fromPartyId">
            <set field="custRequest.fromPartyId" from-field="communicationEvent.partyIdFrom"/>
        </if-empty>
        <set field="custRequest.statusId" value="CRQ_ACCEPTED"/>
        <call-service service-name="createCustRequest" in-map-name="custRequest">
            <result-to-field result-name="custRequestId" field-name="parameters.custRequestId"/>
        </call-service>
        <set-service-fields service-name="createCustRequestCommEvent" map-name="parameters" to-map-name="custRequestCommEvent"/>
        <call-service service-name="createCustRequestCommEvent" in-map-name="custRequestCommEvent"/>

        <if-empty field="parameters.content">
            <set field="parameters.content" from-field="communicationEvent.content"/>
        </if-empty>
        <if-not-empty field="parameters.content">
            <set field="newItem.custRequestId" from-field="parameters.custRequestId"/>
            <set field="newItem.description" from-field="parameters.description"/>
            <set field="newItem.story" from-field="parameters.content"/>
            <call-service service-name="createCustRequestItem" in-map-name="newItem"/>
        </if-not-empty>
        
        <!-- copy attachements/content -->
        <entity-and entity-name="CommEventContentAssoc" list-name="custRequestContents">
            <field-map field-name="communicationEventId" from-field="parameters.communicationEventId"/>
        </entity-and>
        <iterate entry="custRequestContent" list="custRequestContents">
            <set field="reqContent.custRequestId" from-field="parameters.custRequestId"/>
            <set field="reqContent.contentId" from-field="custRequestContent.contentId"/>
            <call-service service-name="createCustRequestContent" in-map-name="reqContent"/>
        </iterate>

        <!-- update status from communication event -->
        <set-service-fields service-name="setCommunicationEventStatus" map-name="parameters" to-map-name="updStat"/>
        <set field="updStat.statusId" value="COM_COMPLETE"/>
        <call-service service-name="setCommunicationEventStatus" in-map-name="updStat"/>
                
        <field-to-result field-name="parameters.custRequestId" result-name="custRequestId"/>
    </simple-method>
    
    <!-- Create/Delete  CustRequest Content -->    
    <simple-method method-name="createCustRequestContent" short-description="Create Work Effort Content">
        <make-value entity-name="CustRequestContent" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        
        <if-empty field="newEntity.fromDate">
            <now-timestamp-to-env env-name="nowTimestamp"/>
            <set field="newEntity.fromDate" from-field="nowTimestamp"/>
        </if-empty>
        
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="deleteCustRequestContent" short-description="Remove a Customer Request Content">
        <entity-one entity-name="CustRequestContent" value-name="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <if-empty field="lookedUpValue.thruDate">
            <now-timestamp-to-env env-name="lookedUpValue.thruDate"/>
        </if-empty>
        <store-value value-name="lookedUpValue"/>
    </simple-method>

</simple-methods>
