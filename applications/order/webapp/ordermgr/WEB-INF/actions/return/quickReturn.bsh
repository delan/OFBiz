/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Rev$
 *@since      3.0
 */
 
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.order.order.*;
import org.ofbiz.party.contact.*;
import org.ofbiz.product.store.*;

dispatcher = request.getAttribute("dispatcher");
delegator = request.getAttribute("delegator");
orderId = request.getParameter("orderId");
context.put("orderId", orderId);

partyId = request.getParameter("party_id");
context.put("partyId", partyId);

if (partyId != null) {
    party = delegator.findByPrimaryKey("Party", UtilMisc.toMap("partyId", partyId));
    context.put("party", party);
}

returnHeaders = delegator.findByAnd("ReturnHeader", UtilMisc.toMap("statusId", "RETURN_REQUESTED"), UtilMisc.toList("entryDate"));
context.put("returnHeaders", returnHeaders);

// put in the return to party information from the order header
if (orderId != null) {
    order = delegator.findByPrimaryKey("OrderHeader", UtilMisc.toMap("orderId", orderId));
    productStore = order.getRelatedOne("ProductStore");
    if (productStore != null) {
        context.put("destinationFacilityId", ProductStoreWorker.determineSingleFacilityForStore(delegator, productStore.getString("productStoreId")));
    }

    orh = new OrderReadHelper(order);
    context.put("orh", orh);
    context.put("toPartyId", productStore.getString("payToPartyId"));
    context.put("orderHeaderAdjustments", orh.getAvailableOrderHeaderAdjustments());
}

returnTypes = delegator.findAll("ReturnType", UtilMisc.toList("sequenceId"));
context.put("returnTypes", returnTypes);

returnReasons = delegator.findAll("ReturnReason", UtilMisc.toList("sequenceId"));
context.put("returnReasons", returnReasons);

itemStts = delegator.findByAnd("StatusItem", UtilMisc.toMap("statusTypeId", "INV_SERIALIZED_STTS"), UtilMisc.toList("sequenceId"));
context.put("itemStts", itemStts);

returnItemTypeMap = delegator.findByAnd("ReturnItemTypeMap", UtilMisc.toMap("returnHeaderTypeId", "CUSTOMER_RETURN"));
iter = returnItemTypeMap.iterator();
typeMap = new HashMap();
while (iter.hasNext()) {
    value = iter.next();
    typeMap.put(value.getString("returnItemMapKey"), value.getString("returnItemTypeId"));
}
context.put("returnItemTypeMap", typeMap);

if (orderId != null) {
    Map returnRes = dispatcher.runSync("getReturnableItems", UtilMisc.toMap("orderId", orderId));   
    context.put("returnableItems", returnRes.get("returnableItems"));
    orderHeader = delegator.findByPrimaryKeyCache("OrderHeader", UtilMisc.toMap("orderId", orderId));
    context.put("orderHeader", orderHeader);
}

context.put("shippingContactMechList", ContactHelper.getContactMech(party, "SHIPPING_LOCATION", "POSTAL_ADDRESS", false));   


