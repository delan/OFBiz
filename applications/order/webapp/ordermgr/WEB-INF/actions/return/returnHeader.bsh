/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
 
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.party.contact.*;


orderId = parameters.get("orderId");
partyId = parameters.get("fromPartyId");
returnId = parameters.get("returnId");
    
returnHeader = null;
if (returnId != null) {
    returnHeader = delegator.findByPrimaryKey("ReturnHeader", UtilMisc.toMap("returnId", returnId));
    if (returnHeader != null) {   
        partyId = returnHeader.getString("fromPartyId"); 
        toPartyId = parameters.get("toPartyId");
    }
}
context.put("returnHeader", returnHeader);
context.put("returnId", returnId);

// billing account info
billingAccountList = null;
if (partyId != null) {
    billingAccountList = delegator.findByAnd("BillingAccountAndRole", UtilMisc.toMap("partyId", partyId));
    billingAccountList = EntityUtil.filterByDate(billingAccountList);
}
context.put("billingAccountList", billingAccountList);

// payment method info
List creditCardList = null;
List eftAccountList = null;
if (partyId != null) {
    creditCardList = EntityUtil.filterByDate(delegator.findByAnd("PaymentMethodAndCreditCard", UtilMisc.toMap("partyId", partyId)));
    eftAccountList = EntityUtil.filterByDate(delegator.findByAnd("PaymentMethodAndEftAccount", UtilMisc.toMap("partyId", partyId)));
}
context.put("creditCardList", creditCardList);
context.put("eftAccountList", eftAccountList);

orderRole = null;
orderHeader = null;
if (orderId != null) {
    orderRoles = delegator.findByAnd("OrderRole", UtilMisc.toMap("orderId", orderId, "roleTypeId", "BILL_TO_CUSTOMER"));
    orderRole = EntityUtil.getFirst(orderRoles);
    orderHeader = delegator.findByPrimaryKeyCache("OrderHeader", UtilMisc.toMap("orderId", orderId));
}
context.put("orderRole", orderRole);
context.put("orderHeader", orderHeader);


// from address
addresses = ContactMechWorker.getPartyPostalAddresses(request, partyId, "_NA_");
context.put("addresses", addresses);

if (returnHeader != null) {
    postalAddressTo = null;
    facility = delegator.findByPrimaryKey("Facility", UtilMisc.toMap("facilityId", returnHeader.getString("destinationFacilityId")));
    if (facility != null) {
        facilityContactMechs = delegator.findByAnd("FacilityContactMech", UtilMisc.toMap("facilityId", facility.getString("facilityId")), UtilMisc.toList("fromDate DESC"));
    
        facilityContactMechIterator = facilityContactMechs.iterator();
        while (facilityContactMechIterator.hasNext()) {
            facilityContactMech = facilityContactMechIterator.next();
            contactMech = facilityContactMech.getRelatedOne("ContactMech");
            if ("POSTAL_ADDRESS".equals(contactMech.getString("contactMechTypeId"))) {
                postalAddressTo = contactMech.getRelatedOne("PostalAddress");
                break;
            }
        }
    }
    context.put("postalAddressTo", postalAddressTo);
}
