import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.entity.condition.*;

delegator = request.getAttribute("delegator");
session = request.getSession(true);
dispatcher = request.getAttribute("dispatcher");
userLogin = session.getAttribute("userLogin");
security = request.getAttribute("security");
partyId = request.getParameter("partyId");
viewcompleted = request.getParameter("viewcompleted");    // specifies which orders are to be shown
viewcancelled = request.getParameter("viewcancelled");
viewrejected = request.getParameter("viewrejected");
viewapproved = request.getParameter("viewapproved");
viewcreated = request.getParameter("viewcreated");
viewprocessing = request.getParameter("viewprocessing");
viewsent = request.getParameter("viewsent");
viewall = request.getParameter("viewall");
view_SALES_ORDER = request.getParameter("view_SALES_ORDER");
view_PURCHASE_ORDER = request.getParameter("view_PURCHASE_ORDER");
view_WORK_ORDER = request.getParameter("view_WORK_ORDER");

// if no status is selected, choose viewall by default
if ((viewcompleted == null) && (viewcancelled == null) && (viewrejected == null) && (viewapproved == null) && (viewcreated == null) && (viewprocessing == null) && (viewsent == null)) {
    viewall = "Y";
}

context.put("viewcompleted", viewcompleted);
context.put("viewcancelled", viewcancelled);
context.put("viewrejected", viewrejected);
context.put("viewapproved", viewapproved);
context.put("viewcreated", viewcreated);
context.put("viewprocessing", viewprocessing);
context.put("viewsent", viewsent);
context.put("viewall", viewall);
// when no constraints are evident, default to view all sales
if ((view_SALES_ORDER == null) && (view_PURCHASE_ORDER == null) && (view_WORK_ORDER == null)) {
    view_SALES_ORDER = "Y";
}
context.put("view_SALES_ORDER", view_SALES_ORDER);

// TODO: security
context.put("allowpurchaseview", view_PURCHASE_ORDER);
context.put("view_PURCHASE_ORDER", view_PURCHASE_ORDER);
context.put("allowworkview", view_WORK_ORDER);
context.put("view_WORK_ORDER", view_WORK_ORDER);

// check if each of these has been selected.  If not, then add a filter out condition.  Then do the filtering if the user
// has not selected a view all, and we actually have conditions to filter
salesOrdersCondition = new EntityExpr("orderTypeId", EntityOperator.EQUALS, "SALES_ORDER");
purchaseOrdersCondition = new EntityExpr("orderTypeId", EntityOperator.EQUALS, "PURCHASE_ORDER");
workOrdersCondition = new EntityExpr("orderTypeId", EntityOperator.EQUALS, "WORK_ORDER");
completedOrdersCondition = new EntityExpr("statusId", EntityOperator.EQUALS, "ORDER_COMPLETED");
cancelledOrdersCondition = new EntityExpr("statusId", EntityOperator.EQUALS, "ORDER_CANCELLED");
rejectedOrdersCondition = new EntityExpr("statusId", EntityOperator.EQUALS, "ORDER_REJECTED");
approvedOrdersCondition = new EntityExpr("statusId", EntityOperator.EQUALS, "ORDER_APPROVED");
createdOrdersCondition = new EntityExpr("statusId", EntityOperator.EQUALS, "ORDER_CREATED");
processingOrdersCondition = new EntityExpr("statusId", EntityOperator.EQUALS, "ORDER_PROCESSING");
sentOrdersCondition = new EntityExpr("statusId", EntityOperator.EQUALS, "ORDER_SENT");
typeConditions = new ArrayList();
statusConditions = new ArrayList();
allConditions = new ArrayList();
    

// this is for convenience
allStatus = false;
if ((viewall != null) && (viewall.equals("Y"))) {
    allStatus = true;
}

if (allStatus || (viewcompleted != null)) {
    statusConditions.add(completedOrdersCondition);
}
if (allStatus || (viewcancelled != null)) {
    statusConditions.add(cancelledOrdersCondition);
}
if (allStatus || (viewrejected != null)) {
    statusConditions.add(rejectedOrdersCondition);
}
if (allStatus || (viewapproved != null)) {
    statusConditions.add(approvedOrdersCondition);
}
if (allStatus || (viewcreated != null)) {
    statusConditions.add(createdOrdersCondition);
}
if (allStatus || (viewprocessing != null)) {
    statusConditions.add(processingOrdersCondition);
}
if (allStatus || (viewsent != null)) {
    statusConditions.add(sentOrdersCondition);
}
if (view_SALES_ORDER != null) {
    typeConditions.add(salesOrdersCondition);
}
if (view_PURCHASE_ORDER != null) {
    typeConditions.add(purchaseOrdersCondition);
}
if (view_WORK_ORDER != null) {
    typeConditions.add(workOrdersCondition);
}

// construct conditions and find orderheaders
typeConditionsList = new EntityConditionList(typeConditions, EntityOperator.OR);
statusConditionsList = new EntityConditionList(statusConditions,  EntityOperator.OR);
if (typeConditions.size() > 0) allConditions.add(typeConditionsList);
if (statusConditions.size() > 0) allConditions.add(statusConditionsList);
queryConditionsList = new EntityConditionList(allConditions, EntityOperator.AND);
orderHeaderList = delegator.findByCondition("OrderHeader", queryConditionsList, null, UtilMisc.toList("orderId DESC"));
context.put("orderHeaderList", orderHeaderList);

// a list of order type descriptions
ordertypes = delegator.findAllCache("OrderType");
iter = ordertypes.iterator();
while (iter.hasNext()) {
    type = iter.next();
    context.put("descr_" + type.getString("orderTypeId"), type.getString("description"));
}
