/*
 *  Copyright (c) 2005-2005 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Hans Bakker (h.bakker@antwebsystems.com)
 *@version    $Rev$
 */
 
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.party.contact.*;
import java.sql.Timestamp;

orderHeader = (GenericValue) parameters.get("orderHeader");
invoice = (GenericValue) parameters.get("invoice");
nowTimestamp = UtilDateTime.nowTimestamp();

// defaults:
logoImageUrl = null; // "http://localhost:8080/images/ofbiz_powered.gif"; // set default value......
partyId = "Company";  // default company

if (orderHeader != null) {
    GenericValue productStore = (GenericValue) orderHeader.getRelated("ProductStore");
    if (orderHeader.getString("orderTypeId").equals("SALES_ORDER") && productStore != null && productStore.get("payToPartyId") != null) {
        partyId = productStore.getString("payToPartyId");
    }
} else if (invoice != null) {
    if (invoice.get("invoiceTypeId").equals("SALES_INVOICE") && invoice.get("partyIdFrom") != null) {
        company = invoice.getString("partyIdFrom");
    }
    if (invoice.get("invoiceTypeId").equals("PURCHASE_INVOICE") && invoice.get("partyIdTo") != null) {
        company = invoice.getString("partyIdTo");
    }
}

Debug.logInfo("For order/invoice company header for PDF using partyId: " + partyId, "companyHeader.bsh");

// the logo
GenericValue partyGroup = delegator.findByPrimaryKey("PartyGroup", UtilMisc.toMap("partyId",partyId));
if (partyGroup != null && UtilValidate.isNotEmpty(partyGroup.getString("logoImageUrl"))) {
    logoImageUrl = partyGroup.getString("logoImageUrl");
}

// the company name
String companyName = "not found";
if (UtilValidate.isNotEmpty(partyGroup.get("groupName"))) {
    companyName = partyGroup.getString("groupName");
}

// the address
List addresses = delegator.findByAnd("PartyContactMechPurpose",
        UtilMisc.toMap("partyId",partyId,"contactMechPurposeTypeId","GENERAL_LOCATION"));
List selAddresses = EntityUtil.filterByDate(addresses, nowTimestamp, "fromDate", "thruDate", true);        
GenericValue address = null;
if (addresses != null && addresses.size() > 0) {
    address = delegator.findByPrimaryKey("PostalAddress",UtilMisc.toMap("contactMechId",selAddresses.iterator().next().getString("contactMechId")));
}

context.put("logoImageUrl", logoImageUrl);
context.put("companyName", companyName);
context.put("postalAddress", address);
