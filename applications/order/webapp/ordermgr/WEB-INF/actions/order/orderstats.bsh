/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.util.*;
import java.sql.Timestamp;
import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;

double calcItemTotal(List headers) {
    double total = 0.00;
    Iterator i = headers.iterator();
    while (i.hasNext()) {
        GenericValue header = (GenericValue) i.next();          
        total += (header.get("grandTotal") != null ? header.getDouble("grandTotal").doubleValue() : 0.00);
    }
    return total;
}
    
double calcItemCount(List items) {
    double count = 0.0000;
    Iterator i = items.iterator();
    while (i.hasNext()) {
        GenericValue item = (GenericValue) i.next();
        count += (item.get("quantity") != null ? item.getDouble("quantity").doubleValue() : 0.0000);
    }
    return count;
}

delegator = request.getAttribute("delegator");

Timestamp endTime = UtilDateTime.nowTimestamp();
Calendar cal = Calendar.getInstance();
cal.set(Calendar.AM_PM, Calendar.AM);
cal.set(Calendar.HOUR, 0);
cal.set(Calendar.MINUTE, 0);
cal.set(Calendar.SECOND, 0);    
cal.set(Calendar.MILLISECOND, 0);   
Timestamp dayBegin = new Timestamp(cal.getTime().getTime());            
   
cal.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
Timestamp weekBegin = new Timestamp(cal.getTime().getTime());       
 
cal.set(Calendar.DAY_OF_MONTH, 1);
Timestamp monthBegin = new Timestamp(cal.getTime().getTime());      
  
cal.set(Calendar.MONTH, 0);
Timestamp yearBegin = new Timestamp(cal.getTime().getTime());       
  
// order status report
EntityConditionList ecl = new EntityConditionList(UtilMisc.toList(
                                new EntityExpr("orderItemSeqId", EntityOperator.EQUALS, null), 
                                new EntityExpr("orderPaymentPreferenceId", EntityOperator.EQUALS, null), 
                                new EntityExpr("statusDatetime", EntityOperator.GREATER_THAN_EQUAL_TO, dayBegin)), 
                            EntityOperator.AND);
List dayList = delegator.findList("OrderStatus", ecl, null, null, null, false);
context.put("dayOrder", EntityUtil.filterByAnd(dayList, UtilMisc.toMap("statusId", "ORDER_ORDERED")));
context.put("dayApprove", EntityUtil.filterByAnd(dayList, UtilMisc.toMap("statusId", "ORDER_APPROVED")));
context.put("dayComplete", EntityUtil.filterByAnd(dayList, UtilMisc.toMap("statusId", "ORDER_COMPLETED")));
context.put("dayCancelled", EntityUtil.filterByAnd(dayList, UtilMisc.toMap("statusId", "ORDER_CANCELLED")));
context.put("dayRejected", EntityUtil.filterByAnd(dayList, UtilMisc.toMap("statusId", "ORDER_REJECTED")));
  
ecl = new EntityConditionList(UtilMisc.toList(
                        new EntityExpr("orderItemSeqId", EntityOperator.EQUALS, null), 
                        new EntityExpr("orderPaymentPreferenceId", EntityOperator.EQUALS, null), 
                        new EntityExpr("statusDatetime", EntityOperator.GREATER_THAN_EQUAL_TO, weekBegin)), 
                    EntityOperator.AND);
List weekList = delegator.findList("OrderStatus", ecl, null, null, null, false);
context.put("weekOrder", EntityUtil.filterByAnd(weekList, UtilMisc.toMap("statusId", "ORDER_ORDERED")));
context.put("weekApprove", EntityUtil.filterByAnd(weekList, UtilMisc.toMap("statusId", "ORDER_APPROVED")));
context.put("weekComplete", EntityUtil.filterByAnd(weekList, UtilMisc.toMap("statusId", "ORDER_COMPLETED")));
context.put("weekCancelled", EntityUtil.filterByAnd(weekList, UtilMisc.toMap("statusId", "ORDER_CANCELLED")));
context.put("weekRejected", EntityUtil.filterByAnd(weekList, UtilMisc.toMap("statusId", "ORDER_REJECTED")));
  
ecl = new EntityConditionList(UtilMisc.toList(
                        new EntityExpr("orderItemSeqId", EntityOperator.EQUALS, null),
                        new EntityExpr("orderPaymentPreferenceId", EntityOperator.EQUALS, null), 
                        new EntityExpr("statusDatetime", EntityOperator.GREATER_THAN_EQUAL_TO, monthBegin)),
                    EntityOperator.AND);
List monthList = delegator.findList("OrderStatus", ecl, null, null, null, false);
context.put("monthOrder", EntityUtil.filterByAnd(monthList, UtilMisc.toMap("statusId", "ORDER_ORDERED")));
context.put("monthApprove", EntityUtil.filterByAnd(monthList, UtilMisc.toMap("statusId", "ORDER_APPROVED")));
context.put("monthComplete", EntityUtil.filterByAnd(monthList, UtilMisc.toMap("statusId", "ORDER_COMPLETED")));
context.put("monthCancelled", EntityUtil.filterByAnd(monthList, UtilMisc.toMap("statusId", "ORDER_CANCELLED")));
context.put("monthRejected", EntityUtil.filterByAnd(monthList, UtilMisc.toMap("statusId", "ORDER_REJECTED")));
  
ecl = new EntityConditionList(UtilMisc.toList(
                        new EntityExpr("orderItemSeqId", EntityOperator.EQUALS, null), 
                        new EntityExpr("orderPaymentPreferenceId", EntityOperator.EQUALS, null), 
                        new EntityExpr("statusDatetime", EntityOperator.GREATER_THAN_EQUAL_TO, yearBegin)),
                    EntityOperator.AND);
List yearList = delegator.findList("OrderStatus", ecl, null, null, null, false);
context.put("yearOrder", EntityUtil.filterByAnd(yearList, UtilMisc.toMap("statusId", "ORDER_ORDERED")));
context.put("yearApprove", EntityUtil.filterByAnd(yearList, UtilMisc.toMap("statusId", "ORDER_APPROVED")));
context.put("yearComplete", EntityUtil.filterByAnd(yearList, UtilMisc.toMap("statusId", "ORDER_COMPLETED")));
context.put("yearCancelled", EntityUtil.filterByAnd(yearList, UtilMisc.toMap("statusId", "ORDER_CANCELLED")));
context.put("yearRejected", EntityUtil.filterByAnd(yearList, UtilMisc.toMap("statusId", "ORDER_REJECTED")));
  
// order totals and item counts
ecl = new EntityConditionList(UtilMisc.toList(
                        new EntityExpr("itemStatusId", EntityOperator.NOT_EQUAL, "ITEM_REJECTED"), 
                        new EntityExpr("itemStatusId", EntityOperator.NOT_EQUAL, "ITEM_CANCELLED"), 
                        new EntityExpr("orderDate", EntityOperator.GREATER_THAN_EQUAL_TO, dayBegin), 
                        new EntityExpr("orderTypeId", EntityOperator.EQUALS, "SALES_ORDER")),
                    EntityOperator.AND);
List dayItems = delegator.findList("OrderHeaderAndItems", ecl, null, null, null, false);
List dayItemsPending = EntityUtil.filterByAnd(dayItems, UtilMisc.toMap("itemStatusId", "ITEM_ORDERED"));

ecl = new EntityConditionList(UtilMisc.toList(
                        new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "ORDER_REJECTED"), 
                        new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "ORDER_CANCELLED"), 
                        new EntityExpr("orderDate", EntityOperator.GREATER_THAN_EQUAL_TO, dayBegin), 
                        new EntityExpr("orderTypeId", EntityOperator.EQUALS, "SALES_ORDER")),
                    EntityOperator.AND);
List dayHeaders = delegator.findList("OrderHeader", ecl, null, null, null, false);
List dayHeadersPending = EntityUtil.filterByAnd(dayHeaders, UtilMisc.toMap("statusId", "ORDER_ORDERED"));   
                                                 
double dayItemTotal = calcItemTotal(dayHeaders);
double dayItemCount = calcItemCount(dayItems);
double dayItemTotalPending = calcItemTotal(dayHeadersPending);
double dayItemCountPending = calcItemCount(dayItemsPending);
double dayItemTotalPaid = dayItemTotal - dayItemTotalPending;
double dayItemCountPaid = dayItemCount - dayItemCountPending;
context.put("dayItemTotal", dayItemTotal);
context.put("dayItemCount", dayItemCount);
context.put("dayItemTotalPending", dayItemTotalPending);
context.put("dayItemCountPending", dayItemCountPending);
context.put("dayItemTotalPaid", dayItemTotalPaid);
context.put("dayItemCountPaid", dayItemCountPaid);

ecl = new EntityConditionList(UtilMisc.toList(
                        new EntityExpr("itemStatusId", EntityOperator.NOT_EQUAL, "ITEM_REJECTED"), 
                        new EntityExpr("itemStatusId", EntityOperator.NOT_EQUAL, "ITEM_CANCELLED"), 
                        new EntityExpr("orderDate", EntityOperator.GREATER_THAN_EQUAL_TO, weekBegin), 
                        new EntityExpr("orderTypeId", EntityOperator.EQUALS, "SALES_ORDER")),
                    EntityOperator.AND);
List weekItems = delegator.findList("OrderHeaderAndItems", ecl, null, null, null, false);
List weekItemsPending = EntityUtil.filterByAnd(weekItems, UtilMisc.toMap("itemStatusId", "ITEM_ORDERED"));

ecl = new EntityConditionList(UtilMisc.toList(
                        new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "ORDER_REJECTED"), 
                        new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "ORDER_CANCELLED"), 
                        new EntityExpr("orderDate", EntityOperator.GREATER_THAN_EQUAL_TO, weekBegin), 
                        new EntityExpr("orderTypeId", EntityOperator.EQUALS, "SALES_ORDER")),
                    EntityOperator.AND);
List weekHeaders = delegator.findList("OrderHeader", ecl, null, null, null, false);
List weekHeadersPending = EntityUtil.filterByAnd(weekHeaders, UtilMisc.toMap("statusId", "ORDER_ORDERED")); 
         
double weekItemTotal = calcItemTotal(weekHeaders);
double weekItemCount = calcItemCount(weekItems);
double weekItemTotalPending = calcItemTotal(weekHeadersPending);
double weekItemCountPending = calcItemCount(weekItemsPending);  
double weekItemTotalPaid = weekItemTotal - weekItemTotalPending;
double weekItemCountPaid = weekItemCount - weekItemCountPending;
context.put("weekItemTotal", weekItemTotal);
context.put("weekItemCount", weekItemCount);
context.put("weekItemTotalPending", weekItemTotalPending);
context.put("weekItemCountPending", weekItemCountPending);
context.put("weekItemTotalPaid", weekItemTotalPaid);
context.put("weekItemCountPaid", weekItemCountPaid);

ecl = new EntityConditionList(UtilMisc.toList(
                        new EntityExpr("itemStatusId", EntityOperator.NOT_EQUAL, "ITEM_REJECTED"), 
                        new EntityExpr("itemStatusId", EntityOperator.NOT_EQUAL, "ITEM_CANCELLED"), 
                        new EntityExpr("orderDate", EntityOperator.GREATER_THAN_EQUAL_TO, monthBegin), 
                        new EntityExpr("orderTypeId", EntityOperator.EQUALS, "SALES_ORDER")),
                    EntityOperator.AND);
List monthItems = delegator.findList("OrderHeaderAndItems", ecl, null, null, null, false);
List monthItemsPending = EntityUtil.filterByAnd(monthItems, UtilMisc.toMap("itemStatusId", "ITEM_ORDERED"));

ecl = new EntityConditionList(UtilMisc.toList(
                        new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "ORDER_REJECTED"), 
                        new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "ORDER_CANCELLED"), 
                        new EntityExpr("orderDate", EntityOperator.GREATER_THAN_EQUAL_TO, monthBegin), 
                        new EntityExpr("orderTypeId", EntityOperator.EQUALS, "SALES_ORDER")),
                    EntityOperator.AND);
List monthHeaders = delegator.findList("OrderHeader", ecl, null, null, null, false);
List monthHeadersPending = EntityUtil.filterByAnd(monthHeaders, UtilMisc.toMap("statusId", "ORDER_ORDERED"));   

double monthItemTotal = calcItemTotal(monthHeaders);
double monthItemCount = calcItemCount(monthItems);
double monthItemTotalPending = calcItemTotal(monthHeadersPending);
double monthItemCountPending = calcItemCount(monthItemsPending);    
double monthItemTotalPaid = monthItemTotal - monthItemTotalPending;
double monthItemCountPaid = monthItemCount - monthItemCountPending;
context.put("monthItemTotal", monthItemTotal);
context.put("monthItemCount", monthItemCount);
context.put("monthItemTotalPending", monthItemTotalPending);
context.put("monthItemCountPending", monthItemCountPending);
context.put("monthItemTotalPaid", monthItemTotalPaid);
context.put("monthItemCountPaid", monthItemCountPaid);
  
ecl = new EntityConditionList(UtilMisc.toList(
                        new EntityExpr("itemStatusId", EntityOperator.NOT_EQUAL, "ITEM_REJECTED"), 
                        new EntityExpr("itemStatusId", EntityOperator.NOT_EQUAL, "ITEM_CANCELLED"), 
                        new EntityExpr("orderDate", EntityOperator.GREATER_THAN_EQUAL_TO, yearBegin), 
                        new EntityExpr("orderTypeId", EntityOperator.EQUALS, "SALES_ORDER")),
                    EntityOperator.AND);
List yearItems = delegator.findList("OrderHeaderAndItems", ecl, null, null, null, false);
List yearItemsPending = EntityUtil.filterByAnd(yearItems, UtilMisc.toMap("itemStatusId", "ITEM_ORDERED"));
   
ecl = new EntityConditionList(UtilMisc.toList(
                        new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "ORDER_REJECTED"), 
                        new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "ORDER_CANCELLED"), 
                        new EntityExpr("orderDate", EntityOperator.GREATER_THAN_EQUAL_TO, yearBegin), 
                        new EntityExpr("orderTypeId", EntityOperator.EQUALS, "SALES_ORDER")),
                    EntityOperator.AND);
List yearHeaders = delegator.findList("OrderHeader", ecl, null, null, null, false);
List yearHeadersPending = EntityUtil.filterByAnd(yearHeaders, UtilMisc.toMap("statusId", "ORDER_ORDERED")); 

double yearItemTotal = calcItemTotal(yearHeaders);
double yearItemCount = calcItemCount(yearItems);
double yearItemTotalPending = calcItemTotal(yearHeadersPending);
double yearItemCountPending = calcItemCount(yearItemsPending);  
double yearItemTotalPaid = yearItemTotal - yearItemTotalPending;
double yearItemCountPaid = yearItemCount - yearItemCountPending;
context.put("yearItemTotal", yearItemTotal);
context.put("yearItemCount", yearItemCount);
context.put("yearItemTotalPending", yearItemTotalPending);
context.put("yearItemCountPending", yearItemCountPending);
context.put("yearItemTotalPaid", yearItemTotalPaid);
context.put("yearItemCountPaid", yearItemCountPaid);
    
// order state report
List waitingPayment = delegator.findByAnd("OrderHeader", UtilMisc.toMap("statusId", "ORDER_ORDERED", "orderTypeId", "SALES_ORDER"));
context.put("waitingPayment", waitingPayment.size());

List waitingApproval = delegator.findByAnd("OrderHeader", UtilMisc.toMap("statusId", "ORDER_PROCESSING", "orderTypeId", "SALES_ORDER"));
context.put("waitingApproval", waitingApproval.size());

List waitingComplete = delegator.findByAnd("OrderHeader", UtilMisc.toMap("statusId", "ORDER_APPROVED", "orderTypeId", "SALES_ORDER"));
context.put("waitingComplete", waitingComplete.size());
