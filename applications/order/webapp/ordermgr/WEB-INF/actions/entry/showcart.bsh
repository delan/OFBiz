/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones
 *@version    1.0
 */

import java.util.HashMap;

import org.ofbiz.service.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.order.shoppingcart.*;
import org.ofbiz.party.party.PartyWorker;
import org.ofbiz.product.catalog.CatalogWorker;

delegator = request.getAttribute("delegator");
security = request.getAttribute("security");
dispatcher= (LocalDispatcher)request.getAttribute("dispatcher");
userLogin = session.getAttribute("userLogin");

context.put("dispatcher",dispatcher);

// Just in case we are here from the choosecatalog form, the
// following call will save in the session the new catalogId
CatalogWorker.getCurrentCatalogId(request);

// Get the Cart and Prepare Size
shoppingCart = ShoppingCartEvents.getCartObject(request);
context.put("shoppingCartSize", shoppingCart.size());
context.put("shoppingCart", shoppingCart);
context.put("currencyUomId", shoppingCart.getCurrency());

mode = shoppingCart.getOrderType();

// get all the possible gift wrap options
allgiftWraps = delegator.findByAnd("ProductFeature", UtilMisc.toMap("productFeatureTypeId", "GIFT_WRAP"), UtilMisc.toList("defaultSequenceNum"));
context.put("allgiftWraps", allgiftWraps);

context.put("contentPathPrefix", CatalogWorker.getContentPathPrefix(request));

// get productCategory list
productCategoryList = delegator.findAll("ProductCategory", UtilMisc.toList("description", "productCategoryId"));
context.put("productCategoryList", productCategoryList);

partyId = shoppingCart.getPartyId();
if (partyId != null && partyId.equals("_NA_")) partyId = null;
context.put("partyId", partyId);

defaultDesiredDeliveryDate = shoppingCart.getDefaultItemDeliveryDate();
if (UtilValidate.isEmpty(defaultDesiredDeliveryDate)) {
    defaultDesiredDeliveryDate = (new java.sql.Date(System.currentTimeMillis())).toString();
} else {
    context.put("useAsDefaultDesiredDeliveryDate", "true");
}
context.put("defaultDesiredDeliveryDate", defaultDesiredDeliveryDate);

defaultComment = shoppingCart.getDefaultItemComment();
if (!UtilValidate.isEmpty(defaultComment)) {
    context.put("useAsDefaultComment", "true");
}
context.put("defaultComment", defaultComment);

// get all party shopping lists
if (partyId != null) {
  shoppingLists = delegator.findByAnd("ShoppingList", UtilMisc.toMap("partyId", partyId));
  context.put("shoppingLists", shoppingLists);
}

// get product inventory summary for each shopping cart item
inventorySummary = dispatcher.runSync("getProductInventorySummaryForItems", UtilMisc.toMap("orderItems", shoppingCart.makeOrderItems()));
context.put("availableToPromiseMap", inventorySummary.get("availableToPromiseMap"));
context.put("quantityOnHandMap", inventorySummary.get("quantityOnHandMap"));

// get purchase order item types
purchaseOrderItemTypeList = delegator.findByAndCache("OrderItemType", UtilMisc.toMap("parentTypeId", "PURCHASE_SPECIFIC"));
context.put("purchaseOrderItemTypeList", purchaseOrderItemTypeList);
