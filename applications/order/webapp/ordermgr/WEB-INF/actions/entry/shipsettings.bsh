/*
 *  Copyright (c) 2003-2005 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Rev$
 *@since      2.2
*/

import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.order.shoppingcart.*;
import org.ofbiz.party.contact.*;
import org.ofbiz.product.catalog.*;

import javolution.util.FastMap;
import javolution.util.FastList;

delegator = request.getAttribute("delegator");
cart = session.getAttribute("shoppingCart");
orderPartyId = cart.getPartyId();
context.put("cart", cart);

// nuke the event messages
request.removeAttribute("_EVENT_MESSAGE_");

if ("SALES_ORDER".equals(cart.getOrderType())) {
    if (orderPartyId != null && !orderPartyId.equals("_NA_")) {
        orderParty = delegator.findByPrimaryKey("Party", UtilMisc.toMap("partyId", orderPartyId));
        if (orderParty != null) {                
            shippingContactMechList = ContactHelper.getContactMech(orderParty, "SHIPPING_LOCATION", "POSTAL_ADDRESS", false);
            orderPerson = orderParty.getRelatedOne("Person");
            context.put("orderParty", orderParty);
            context.put("orderPerson", orderPerson);
            context.put("shippingContactMechList", shippingContactMechList);
        }
    }
} else {
    // Purchase order
    if (orderPartyId != null && !orderPartyId.equals("_NA_")) {
        orderParty = delegator.findByPrimaryKey("Party", UtilMisc.toMap("partyId", orderPartyId));
        if (orderParty != null) {
           orderPerson = orderParty.getRelatedOne("Person");
           context.put("orderParty", orderParty);
           context.put("orderPerson", orderPerson);
         }
    }

    String companyId = cart.getBillToCustomerPartyId();
    if (companyId != null) {
        List facilityMaps = FastList.newInstance();
        List facilities = delegator.findByAndCache("Facility", UtilMisc.toMap("ownerPartyId", companyId));
        Iterator facilitiesIt = facilities.iterator();
        while (facilitiesIt.hasNext()) {
            Map facilityMap = FastMap.newInstance();
            GenericValue facility = (GenericValue)facilitiesIt.next();
            List facilityContactMechValueMaps = ContactMechWorker.getFacilityContactMechValueMaps(delegator, facility.getString("facilityId"), false, null);
            facilityMap.put("facilityContactMechList", facilityContactMechValueMaps);
            facilityMap.put("facility", facility);
            facilityMaps.add(facilityMap);
        }
        context.put("facilityMaps", facilityMaps);
    }
}
