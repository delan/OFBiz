/*
 *
 * Copyright 2001-2006 The Apache Software Foundation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.order.shoppingcart.*;
import org.ofbiz.party.contact.*;
import org.ofbiz.product.catalog.*;

import javolution.util.FastMap;
import javolution.util.FastList;

delegator = request.getAttribute("delegator");
cart = session.getAttribute("shoppingCart");
orderPartyId = cart.getPartyId();
context.put("cart", cart);

// nuke the event messages
request.removeAttribute("_EVENT_MESSAGE_");

if ("SALES_ORDER".equals(cart.getOrderType())) {
    if (orderPartyId != null && !orderPartyId.equals("_NA_")) {
        orderParty = delegator.findByPrimaryKey("Party", UtilMisc.toMap("partyId", orderPartyId));
        if (orderParty != null) {                
            shippingContactMechList = ContactHelper.getContactMech(orderParty, "SHIPPING_LOCATION", "POSTAL_ADDRESS", false);
            orderPerson = orderParty.getRelatedOne("Person");
            context.put("orderParty", orderParty);
            context.put("orderPerson", orderPerson);
            context.put("shippingContactMechList", shippingContactMechList);
        }
    }
} else {
    // Purchase order
    if (orderPartyId != null && !orderPartyId.equals("_NA_")) {
        orderParty = delegator.findByPrimaryKey("Party", UtilMisc.toMap("partyId", orderPartyId));
        if (orderParty != null) {
           orderPerson = orderParty.getRelatedOne("Person");
           context.put("orderParty", orderParty);
           context.put("orderPerson", orderPerson);
         }
    }

    String companyId = cart.getBillToCustomerPartyId();
    if (companyId != null) {
        List facilityMaps = FastList.newInstance();
        List facilities = delegator.findByAndCache("Facility", UtilMisc.toMap("ownerPartyId", companyId));
        Iterator facilitiesIt = facilities.iterator();
        while (facilitiesIt.hasNext()) {
            Map facilityMap = FastMap.newInstance();
            GenericValue facility = (GenericValue)facilitiesIt.next();
            List facilityContactMechValueMaps = ContactMechWorker.getFacilityContactMechValueMaps(delegator, facility.getString("facilityId"), false, null);
            facilityMap.put("facilityContactMechList", facilityContactMechValueMaps);
            facilityMap.put("facility", facility);
            facilityMaps.add(facilityMap);
        }
        context.put("facilityMaps", facilityMaps);
    }
}
