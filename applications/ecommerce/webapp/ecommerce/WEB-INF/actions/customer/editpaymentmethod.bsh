/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones
 *@version    1.0
 */

import java.util.HashMap;
import org.ofbiz.base.util.UtilHttp;
import org.ofbiz.accounting.payment.PaymentWorker;
import org.ofbiz.party.contact.ContactMechWorker;

paymentResults = PaymentWorker.getPaymentMethodAndRelated(request, userLogin.getString("partyId"));
//returns the following: "paymentMethod", "creditCard", "giftCard", "eftAccount", "paymentMethodId", "curContactMechId", "donePage", "tryEntity"
context.putAll(paymentResults);

curPostalAddressResults = ContactMechWorker.getCurrentPostalAddress(request, userLogin.getString("partyId"), paymentResults.get("curContactMechId")); 
//returns the following: "curPartyContactMech", "curContactMech", "curPostalAddress", "curPartyContactMechPurposes"
context.putAll(curPostalAddressResults);

postalAddressInfos = ContactMechWorker.getPartyPostalAddresses(request, userLogin.getString("partyId"), paymentResults.get("curContactMechId"));
context.put("postalAddressInfos", postalAddressInfos);

//prepare "Data" maps for filling form input boxes
parameterMap = UtilHttp.getParameterMap(request);
tryEntity = paymentResults.get("tryEntity");

creditCardData = paymentResults.get("creditCard");
if (!tryEntity.booleanValue()) creditCardData = parameterMap;
if (creditCardData == null) creditCardData = new HashMap();
if (creditCardData != null) context.put("creditCardData", creditCardData);

giftCardData = paymentResults.get("giftCard");
if (!tryEntity.booleanValue()) giftCardData = parameterMap;
if (giftCardData == null) giftCardData = new HashMap();
if (giftCardData != null) context.put("giftCardData", giftCardData);

eftAccountData = paymentResults.get("eftAccount");
if (!tryEntity.booleanValue()) eftAccountData = parameterMap;
if (eftAccountData == null) eftAccountData = new HashMap();
if (eftAccountData != null) context.put("eftAccountData", eftAccountData);

paymentMethodData = paymentResults.get("paymentMethod");
if (!tryEntity.booleanValue()) paymentMethodData = parameterMap;
if (paymentMethodData == null) paymentMethodData = new HashMap();
if (paymentMethodData != null) context.put("paymentMethodData", paymentMethodData);

//prepare security flag
if (!security.hasEntityPermission("PARTYMGR", "_VIEW", session) && (context.get("creditCard") != null || context.get("giftCard") != null || context.get("eftAccount") != null) && context.get("paymentMethod") != null && !userLogin.get("partyId").equals((context.get("paymentMethod")).get("partyId"))) {
    context.put("canNotView", true);
} else {
    context.put("canNotView", false);
}
