/*
 * $Id: listparamprep.bsh 5462 2005-08-05 18:35:48Z jonesde $
 *
 * Copyright (c) 2001-2005 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      3.0
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.content.ContentManagementWorker;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import javax.servlet.*;
import javax.servlet.http.*;

String getParamOrProp(Map params, String propName, String dflt) {
    String val = ContentManagementWorker.getFromSomewhere(propName, params, request, context);
    if (UtilValidate.isEmpty(val)) {
        val = page.get(propName);
    }
    if (UtilValidate.isEmpty(val)) {
        if (dflt == null) dflt = "";
        val = dflt;
    }
    return val;
}
    
paramMap = UtilHttp.getParameterMap(request);
contentId = getParamOrProp(paramMap, "contentId", null);
followWhen = getParamOrProp(paramMap, "followWhen", null);
pickWhen = getParamOrProp(paramMap, "pickWhen", null);
returnBeforePickWhen = getParamOrProp(paramMap, "returnBeforePickWhen", null);
returnAfterPickWhen = getParamOrProp(paramMap, "returnAfterPickWhen", null);

fromDate = getParamOrProp(paramMap, "fromDate", null);
listName = getParamOrProp(paramMap, "listName", null);
listSize = getParamOrProp(paramMap, "listSize", null);
highIndex = getParamOrProp(paramMap, "highIndex", null);
lowIndex = getParamOrProp(paramMap, "lowIndex", null);
viewSize = getParamOrProp(paramMap, "viewSize", "10");
//Debug.logInfo("in bloglistprep, paramMap:" + paramMap, "");
//Debug.logInfo("in bloglistprep, viewSize:" + viewSize, "");

viewIndex = getParamOrProp(paramMap, "viewIndex", "0");
//Debug.logInfo("in bloglistprep, viewIndex:" + viewIndex, "");

queryString = getParamOrProp(paramMap, "queryString", null);
entityName = getParamOrProp(paramMap, "entityName", null);
//Debug.logInfo("in bloglistprep, contentId:" + contentId, "");

//context.put("contentId", contentId);
context.put("contentId", null);
context.put("followWhen", followWhen);
context.put("pickWhen", pickWhen);
context.put("returnBeforePickWhen", returnBeforePickWhen);
context.put("returnAfterPickWhen", returnAfterPickWhen);
context.put("fromDate", fromDate);
context.put("listName", listName);
context.put("listSize", listSize);
context.put("highIndex", highIndex);
context.put("lowIndex", lowIndex);
context.put("viewSize", viewSize);
context.put("viewIndex", viewIndex);
context.put("queryString", queryString);
context.put("entityName", entityName);
