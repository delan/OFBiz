/*
 * $Id: contentprep.bsh 5462 2005-08-05 18:35:48Z jonesde $
 *
 * Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      3.0

 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.content.data.DataResourceWorker;
import org.ofbiz.webapp.ftl.FreeMarkerViewHandler;
import org.ofbiz.content.content.ContentWorker;
import org.ofbiz.content.ContentManagementWorker;

import java.io.StringWriter;
import freemarker.ext.beans.BeansWrapper;
import freemarker.template.SimpleHash;
import freemarker.template.WrappingTemplateModel;


import javax.servlet.*;
import javax.servlet.http.*;

// load edit or create Content form

dispatcher    = (LocalDispatcher)request.getAttribute("dispatcher");
delegator = (GenericDelegator) request.getAttribute("delegator");

ServletContext servletContext = session.getServletContext();
String rootPubPt = (String) servletContext.getAttribute("webSiteId");
//security = (Security)session.getAttribute("security");
security = (Security)request.getAttribute("security");
//Debug.logInfo("in contentprep, security:" + security, "");
userLogin = session.getAttribute("userLogin");

GenericValue currentValue = null;
singleWrapper = context.get("singleWrapper");

paramMap = UtilHttp.getParameterMap(request);
contentId = "";
if (UtilValidate.isEmpty(contentId)) 
    contentId = (String)ContentManagementWorker.getFromSomewhere("masterContentId", paramMap, request, context);
if (UtilValidate.isEmpty(contentId)) 
    contentId = (String)ContentManagementWorker.getFromSomewhere("contentIdTo", paramMap, request, context);
if (UtilValidate.isEmpty(contentId)) 
    contentId = (String)ContentManagementWorker.getFromSomewhere("contentId", paramMap, request, context);

//Debug.logInfo("in contentprep, contentId(1):" + contentId, "");
if (currentValue == null) {
    currentValue = (GenericValue)request.getAttribute("currentValue");
//Debug.logInfo("in contentprep, currentValue(0):" + currentValue, "");
}
if (UtilValidate.isEmpty(contentId) && currentValue != null) {
    contentId = currentValue.getString("contentId");
}
if (UtilValidate.isNotEmpty(contentId) && currentValue == null) {
    currentValue = delegator.findByPrimaryKeyCache("Content", UtilMisc.toMap("contentId", contentId));
}
//Debug.logInfo("in contentprep, currentValue(1):" + currentValue, "");
//Debug.logInfo("in contentprep, contentId(4):" + contentId, "");
Locale locale = Locale.getDefault();

if (currentValue != null) {
    dataResourceId = (String)currentValue.get("dataResourceId");
    context.put("contentId", contentId);
    context.put("contentName", currentValue.get("contentName"));
    context.put("description", currentValue.get("description"));
    context.put("statusId", currentValue.get("statusId"));

    mimeTypeId =  (String)currentValue.get("mimeTypeId");
    rootDir = request.getSession().getServletContext().getRealPath("/");
    wrapper = BeansWrapper.getDefaultInstance();
    WrappingTemplateModel.setDefaultObjectWrapper(wrapper);
    //templateRoot = new SimpleHash(wrapper);
    templateRoot = new HashMap();
    FreeMarkerViewHandler.prepOfbizRoot(templateRoot, request, response);

    ctx = new HashMap();
    ctx.put("rootDir", rootDir);
    // webSiteId and https need to go here, too
    templateRoot.put("context", ctx);
    fromDate = UtilDateTime.nowTimestamp();
    assocTypes = null;
    //assocTypes = UtilMisc.toList("SUB_CONTENT");
    subContentDataResourceView = ContentWorker.getSubContent(delegator, contentId, "ARTICLE", null, userLogin, assocTypes, fromDate);
    if (subContentDataResourceView != null) {
        out = new StringWriter();
        ContentWorker.renderContentAsText(delegator, null, out, templateRoot, subContentDataResourceView, locale, mimeTypeId);
        textData = out.toString();
        context.put("txtContentId", subContentDataResourceView.get("contentId"));
        context.put("txtDataResourceId", subContentDataResourceView.get("dataResourceId"));
        context.put("textData", textData);
        //Debug.logInfo("textId:" + txtContentId, "");
        //Debug.logInfo("textData:" + textData, "");
        if (singleWrapper != null) {
           //Debug.logInfo("textData:" + textData, "");
           singleWrapper.putInContext("textData", textData);
        }
    }

    subContentDataResourceView = ContentWorker.getSubContent(delegator, contentId, "SUMMARY", null, userLogin, assocTypes, fromDate);
    if (subContentDataResourceView != null) {
        out = new StringWriter();
        ContentWorker.renderContentAsText(delegator, null, out, templateRoot, subContentDataResourceView, locale, mimeTypeId);
        summaryData = out.toString();
        context.put("sumContentId", subContentDataResourceView.get("contentId"));
        context.put("sumDataResourceId", subContentDataResourceView.get("dataResourceId"));
        context.put("summaryData", summaryData);
        //Debug.logInfo("sumId:" + sumContentId, "");
        //Debug.logInfo("summaryData:" + summaryData, "");
        if (singleWrapper != null) {
            //Debug.logInfo("summaryData:" + summaryData, "");
            singleWrapper.putInContext("summaryData", summaryData);
        }
    }

    subContentDataResourceView = ContentWorker.getSubContent(delegator, contentId, "IMAGE", null, userLogin, assocTypes, fromDate);
    if (subContentDataResourceView != null) {
        out = new StringWriter();
        ContentWorker.renderContentAsText(delegator, null, out, templateRoot, subContentDataResourceView, locale, mimeTypeId);
        imageData = out.toString();
        context.put("imgContentId", subContentDataResourceView.get("contentId"));
        context.put("imgDataResourceId", subContentDataResourceView.get("dataResourceId"));
        context.put("imageData", imageData);
    }
}
