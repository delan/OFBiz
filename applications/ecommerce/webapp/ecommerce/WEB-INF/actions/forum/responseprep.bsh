/*
 * $Id: responseprep.bsh 7589 2006-05-15 06:19:21Z jonesde $
 *
 * Copyright (c) 2001-2005 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import org.ofbiz.content.content.ContentWorker;

import javax.servlet.*;
import javax.servlet.http.*;
/**
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      3.0

 */

delegator = (GenericDelegator) request.getAttribute("delegator");

paramMap = UtilHttp.getParameterMap(request);

    
contentIdTo = paramMap.get("contentIdTo");
nodeTrailCsv = paramMap.get("nodeTrailCsv");
//Debug.logInfo("in viewprep, nodeTrailCsv:" + nodeTrailCsv,"");
context.put("nodeTrailCsv", nodeTrailCsv);
contentId = paramMap.get("contentIdTo");
context.put("subContentId", contentId);
context.put("contentIdTo", contentId);

trail = StringUtil.split(nodeTrailCsv, ",");
siteAncestorList = new ArrayList();
idList = new ArrayList();
if (trail != null && trail.size() > 0) {
    pubPt = trail.get(0);
    ContentWorker.getContentAncestry(delegator, pubPt, "SUBSITE", "To", idList);
    idList.add(pubPt);
}

// start at 1 to skip webSiteId
for (int i=1; i<idList.size(); i++) {
    id = idList.get(i);
    webSitePublishPoint = delegator.findByPrimaryKeyCache("WebSitePublishPoint", UtilMisc.toMap("contentId", id));
    siteAncestorList.add(webSitePublishPoint);
}
context.put("siteAncestorList", siteAncestorList);
//Debug.logInfo("in viewprep, siteAncestorList:" + siteAncestorList,"");

singleWrapper = context.get("singleWrapper");
// singleWrapper.putInContext("pageName", page.getPageName());
singleWrapper.putInContext("contentIdTo", contentIdTo);
singleWrapper.putInContext("summaryDataResourceTypeId", null);
singleWrapper.putInContext("mapKey", null);
singleWrapper.putInContext("nodeTrailCsv", nodeTrailCsv);
