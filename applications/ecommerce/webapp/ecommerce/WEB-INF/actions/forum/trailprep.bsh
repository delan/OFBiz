/*
 * $Id: trailprep.bsh 5462 2005-08-05 18:35:48Z jonesde $
 *
 * Copyright (c) 2001-2005 The Open For Business Project - www.ofbiz.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author     <a href="mailto:byersa@automationgroups.com">Al Byers</a>
 * @version    $Rev$
 * @since      3.0
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import org.ofbiz.entity.model.*;

import javax.servlet.*;
import javax.servlet.http.*;

delegator = (GenericDelegator) request.getAttribute("delegator");

paramMap = UtilHttp.getParameterMap(request);
contentId = paramMap.get("contentId");
context.put("contentId", contentId);
nodeTrailCsv = paramMap.get("nodeTrailCsv");
//Debug.logInfo("in trailprep, nodeTrailCsv:" + nodeTrailCsv,"");

if (UtilValidate.isEmpty(nodeTrailCsv)) {
    nodeTrailCsv = request.getAttribute("nodeTrailCsv");
}
//Debug.logInfo("in trailprep, nodeTrailCsv:" + nodeTrailCsv,"");
context.put("nodeTrailCsv", nodeTrailCsv);

if (UtilValidate.isNotEmpty(nodeTrailCsv)) {
    ArrayList outList = new ArrayList();
    List contentIdList = StringUtil.split(nodeTrailCsv, ",");
    GenericValue content = null;
    String contentId = null;
    String contentName = null;
    ArrayList values = null;
    Iterator it = contentIdList.iterator();
    while (it.hasNext()) {
        contentId = (String)it.next();
        try {
            content = delegator.findByPrimaryKeyCache("Content", UtilMisc.toMap("contentId", contentId));
        } catch(GenericEntityException e) {
            //logError(e.getMessage(), module);
            //return new ArrayList(); HUH?
        }
        if (content != null) {
            contentName = (String)content.get("contentName");
            values = new ArrayList();
            values.add(contentId);
            values.add(contentName);
            outList.add(values);
        }
    }
    context.put("trailList", outList);
    //Debug.logInfo("in trailprep, outList:" + outList,"");
    singleWrapper = context.get("singleWrapper");
    if (singleWrapper != null) {
        singleWrapper.putInContext("nodeTrailCsv",nodeTrailCsv);
    }
}
