<?xml version="1.0" encoding="UTF-8" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <!-- a method to centralize facility security code, meant to be called in-line with
        call-simple-method, and the checkAction and callingMethodName attributes should be in the method context -->
    <simple-method method-name="checkFacilityRelatedPermission" short-description="Check Facility Related Permission">
        <if-empty field-name="callingMethodName">
            <set value="this operation" field="callingMethodName"/>
        </if-empty>
        <if-empty field-name="checkAction">
            <set value="UPDATE" field="checkAction"/>
        </if-empty>
        
        <if>
            <condition>
                <not>
                    <or>
                        <if-has-permission permission="CATALOG" action="_${checkAction}"/>
                        <if-has-permission permission="CATALOG_ADMIN"/>
                        <if-has-permission permission="FACILITY" action="_${checkAction}"/>
                        <if-has-permission permission="FACILITY_ADMIN"/>
                        <and>
                            <not><if-empty field-name="alternatePermissionRoot"/></not>
                            <if-has-permission permission="${alternatePermissionRoot}" action="_${checkAction}"/>
                        </and>
                    </or>
                </not>
            </condition>
            <then>
                <add-error><fail-message message="Security Error: to run ${callingMethodName} you must have the CATALOG_${checkAction} or CATALOG_ADMIN or FACILITY_${checkAction} or FACILITY_ADMIN permission."/></add-error>
            </then>
        </if>
    </simple-method>
    <simple-method method-name="facilityGenericPermission" short-description="Main permission logic">
        <set field="mainAction" from-field="parameters.mainAction"/>
        <if-empty field-name="mainAction">
            <add-error><fail-message message="In the permission-service element for the facilityGenericPermission service the main-action attribute was missing but is required"/></add-error>
            <check-errors/>
        </if-empty>

        <set field="callingMethodName" from-field="parameters.resourceDescription"/>
        <set field="checkAction" from-field="parameters.mainAction"/>
        <call-simple-method method-name="checkFacilityRelatedPermission"/>
        
        <if-empty field-name="error_list">
            <set field="hasPermission" type="Boolean" value="true"/>
            <field-to-result field-name="hasPermission"/>

            <else>
                <property-to-field resource="ProductUiLabels" property="ProductFacilityPermissionError" field-name="failMessage"/>
                <set field="hasPermission" type="Boolean" value="false"/>
                <field-to-result field-name="hasPermission"/>
                <field-to-result field-name="failMessage"/>
            </else>
        </if-empty>
    </simple-method>
    <simple-method method-name="checkProductFacilityRelatedPermission" short-description="ProductFacility Permission Checking Logic">
         <if-empty field-name="mainAction">
            <set field="mainAction" from-field="parameters.mainAction"/>
            <if-empty field-name="mainAction">
                <add-error><fail-property resource="CommonUiLabels" property="CommonPermissionMainActionAttributeMissing"/></add-error>
            </if-empty>
        </if-empty>
        <check-errors/>
        <set field="resourceDescription" from-field="parameters.resourceDescription"/>
        <if-empty field-name="resourceDescription">
            <property-to-field resource="CommonUiLabels" property="CommonPermissionThisOperation" field-name="resourceDescription"/>
        </if-empty>
        <set field="callingMethodName" from-field="resourceDescription" />
        <set field="checkAction" from-field="mainAction" />
        <set field="alternatePermissionRoot" value="FACILITY"/>
        <call-simple-method method-name="checkProductRelatedPermission" xml-resource="org/ofbiz/product/product/ProductServices.xml"/>
        <if-empty field-name="error_list">
            <set field="hasPermission" type="Boolean" value="true"/>
            <field-to-result field-name="hasPermission"/>
            
            <else>
                <property-to-field resource="ProductUiLabels" property="ProductFacilityPermissionError" field-name="failMessage"/>
                <set field="hasPermission" type="Boolean" value="false"/>
                <field-to-result field-name="hasPermission"/>
                <field-to-result field-name="failMessage"/>
            </else>
        </if-empty>
    </simple-method>

    <!-- InventoryItem methods -->
    <simple-method method-name="createInventoryItem" short-description="Create an InventoryItem">

        <make-value value-name="inventoryItem" entity-name="InventoryItem"/>
        <!-- TODO: make sure availableToPromiseTotal and quantityOnHandTotal are not changed -->
        <set-nonpk-fields map-name="parameters" value-name="inventoryItem"/>

        <call-simple-method method-name="inventoryItemCheckSetDefaultValues"/>
        <check-errors/>

        <sequenced-id-to-env sequence-name="InventoryItem" env-name="inventoryItem.inventoryItemId"/>
        <create-value value-name="inventoryItem"/>
        <field-to-result field-name="inventoryItem.inventoryItemId" result-name="inventoryItemId"/>
    </simple-method>
    <simple-method method-name="createInventoryItemCheckSetAtpQoh" short-description="createInventoryItemCheckSetAtpQoh" login-required="false">        
        <if>
            <condition>
                <or>
                    <not><if-empty field-name="parameters.availableToPromiseTotal"/></not>
                    <not><if-empty field-name="parameters.quantityOnHandTotal"/></not>
                </or>
            </condition>
            <then>
                <log level="info" message="Got an InventoryItem with ATP/QOH Total with ID ${parameters.inventoryItemId}, creating InventoryItemDetail"/>
                <set from-field="parameters.inventoryItemId" field="createDetailMap.inventoryItemId"/>
                <set from-field="parameters.availableToPromiseTotal" field="createDetailMap.availableToPromiseDiff"/>
                <set from-field="parameters.quantityOnHandTotal" field="createDetailMap.quantityOnHandDiff"/>
                <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>
            </then>
        </if>
    </simple-method>
    <simple-method method-name="inventoryItemCheckSetDefaultValues" short-description="Check and, if empty, fills with default values ownerPartyId, currencyUomId, unitCost" login-required="false">
        <if-empty field-name="inventoryItem">
            <entity-one entity-name="InventoryItem" value-name="inventoryItem"/>
            <set field="updateInventoryItem" value="Y"/>
        </if-empty>
        <!-- if all the inventoryItem's fields are already filled, return with success -->
        <if>
            <condition>
                <and>
                    <not><if-empty field-name="inventoryItem.facilityId"/></not>
                    <not><if-empty field-name="inventoryItem.ownerPartyId"/></not>
                    <not><if-empty field-name="inventoryItem.currencyUomId"/></not>
                    <not><if-empty field-name="inventoryItem.unitCost"/></not>
                </and>
            </condition>
            <then>
                <return/>
            </then>
        </if>
        <if-empty field-name="inventoryItem.facilityId">
            <add-error>
                <fail-message message="Error: you cannot create inventory items with no facility id."/>
            </add-error>
            <check-errors/>
        </if-empty>
        <!-- if inventoryItem's ownerPartyId is empty, get the ownerPartyId from the facility -->
        <if-empty field-name="inventoryItem.ownerPartyId">
            <get-related-one value-name="inventoryItem" relation-name="Facility" to-value-name="facility"/>
            <set field="inventoryItem.ownerPartyId" from-field="facility.ownerPartyId"/>
            <!-- if inventoryItem's ownerPartyId is still empty, return an error message -->
            <if-empty field-name="inventoryItem.ownerPartyId">
                <add-error>
                    <fail-message message="Error: you cannot create inventory items with no ownerPartyId."/>
                </add-error>
                <check-errors/>
            </if-empty>
        </if-empty>
        <!-- if inventoryItem's currencyUomId is empty, get the currencyUomId 
             from the party accounting preferences of the owner of the inventory item -->
        <if-empty field-name="inventoryItem.currencyUomId">
            <entity-one entity-name="PartyAcctgPreference" value-name="accPref">
                <field-map field-name="partyId" env-name="inventoryItem.ownerPartyId"/>
            </entity-one>
            <set field="inventoryItem.currencyUomId" from-field="accPref.baseCurrencyUomId"/>
            <if-empty field-name="inventoryItem.currencyUomId">
                <property-to-field resource="general" property="currency.uom.id.default" field-name="inventoryItem.currencyUomId"/>
            </if-empty>
            <!-- if inventoryItem's currencyUomId is still empty, return an error message -->
            <if-empty field-name="inventoryItem.currencyUomId">
                <add-error>
                    <fail-message message="Error: you cannot create inventory items with no currencyUomId; you can set a default currency in the PartyAcctgPreference for the party [${inventoryItem.ownerPartyId}], or in the general.properties file under the key [currency.uom.id.default]."/>
                </add-error>
                <check-errors/>
            </if-empty>
        </if-empty>
        <!-- if inventoryItem's unitCost is empty, get the product's standard 
             cost by calling the getProductCost service -->
        <if-empty field-name="inventoryItem.unitCost">
            <set from-field="inventoryItem.productId" field="inputMap.productId"/>
            <set from-field="inventoryItem.currencyUomId" field="inputMap.currencyUomId"/>
            <set value="EST_STD" field="inputMap.costComponentTypePrefix"/> <!-- TODO: create a new service getProductStdCost that calls getProductCost -->
            <call-service service-name="getProductCost" in-map-name="inputMap">
                <result-to-field result-name="productCost" field-name="inventoryItem.unitCost"/>
            </call-service>
        </if-empty>
        <!-- if inventoryItem's unitCost is still empty, or negative return an error message -->
        <!-- TODO/WARNING: getProductCost returns 0 even if no std costs are found -->
        <if-empty field-name="inventoryItem.unitCost">
            <add-error>
                <fail-message message="Error: you cannot create inventory items with no unitCost."/>
            </add-error>
        </if-empty>
        <check-errors/>
        <!-- if you don't want inventory item with unitCost = 0, change the operator 
             attribute from "less" to "less-equals".
        -->
        <if-compare field-name="inventoryItem.unitCost" operator="less" value="0" type="Double">
            <add-error>
                <fail-message message="Error: you cannot create inventory items with a negative unitCost."/>
            </add-error>
        </if-compare>
        <check-errors/>
        <if-not-empty field-name="updateInventoryItem">
            <store-value value-name="inventoryItem"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="updateInventoryItem" short-description="Update an InventoryItem">

        <make-value entity-name="InventoryItem" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key map-name="lookupPKMap" value-name="lookedUpValue"/>
        <if-empty field-name="lookedUpValue.ownerPartyId">
            <get-related-one value-name="lookedUpValue" relation-name="Facility" to-value-name="oldFacility"/>
            <set field="lookedUpValue.ownerPartyId" from-field="oldFacility.ownerPartyId"/>
        </if-empty>
        <field-to-result field-name="lookedUpValue.ownerPartyId" result-name="oldOwnerPartyId"/>
        <field-to-result field-name="lookedUpValue.statusId" result-name="oldStatusId"/>
        <!-- special handling for the unitCost -->
        <if-not-empty field-name="parameters.unitCost">
            <if-compare field-name="parameters.unitCost" operator="less" value="0.0" type="Double">
                <add-error><fail-message message="Unit cost for inventory item [${lookupPKMap.inventoryItemId}] cannot be negative."/></add-error>
                <check-errors/>
            </if-compare>
        </if-not-empty>
        <set field="oldUnitCost" from-field="lookedUpValue.unitCost"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
        <!-- if the unit cost is changed create an InventoryItemDetail to keep track of unit cost history -->
        <if-not-empty field-name="parameters.unitCost">
            <if-compare-field field-name="parameters.unitCost" operator="not-equals" to-field-name="oldUnitCost">
                <set field="createInventoryItemDetailInMap.inventoryItemId" from-field="lookedUpValue.inventoryItemId"/>
                <set field="createInventoryItemDetailInMap.unitCost" from-field="parameters.unitCost"/>
                <call-service service-name="createInventoryItemDetail" in-map-name="createInventoryItemDetailInMap"/>
            </if-compare-field>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="createInventoryItemStatus" short-description="Create an inventory item status record">
        <now-timestamp-to-env env-name="nowTimestamp"/>

        <!-- find the most recent InventoryItemStatus record and set the statusEndDatetime -->
        <entity-and entity-name="InventoryItemStatus" list-name="oldInventoryItemStatusList">
            <field-map field-name="inventoryItemId" env-name="parameters.inventoryItemId"/>
            <order-by field-name="-statusDatetime"/>
        </entity-and>
        <first-from-list entry-name="oldInventoryItemStatus" list-name="oldInventoryItemStatusList"/>
        <if-not-empty field-name="oldInventoryItemStatus">
            <set field="oldInventoryItemStatus.statusEndDatetime" from-field="nowTimestamp"/>
            <store-value value-name="oldInventoryItemStatus"/>
        </if-not-empty>
        
        <make-value value-name="inventoryItemStatus" entity-name="InventoryItemStatus"/>
        <set-nonpk-fields map-name="parameters" value-name="inventoryItemStatus"/>
        <set-pk-fields map-name="parameters" value-name="inventoryItemStatus"/>
        <set field="inventoryItemStatus.statusDatetime" from-field="nowTimestamp"/>
        
        <!-- make sure the current productId is set, if not passed in look up the current value -->
        <if-empty field-name="inventoryItemStatus.productId">
            <entity-one entity-name="InventoryItem" value-name="inventoryItem"/>
            <set field="inventoryItemStatus.productId" from-field="inventoryItem.productId"/>
        </if-empty>
        
        <create-value value-name="inventoryItemStatus"/>
    </simple-method>

    <simple-method method-name="createInventoryItemDetail" short-description="Create an InventoryItemDetail">
        <make-value value-name="newEntity" entity-name="InventoryItemDetail"/>

        <set from-field="parameters.inventoryItemId" field="newEntity.inventoryItemId"/>
        <!-- NOTE DEJ20070927: not using make-next-seq-id because a single InventoryItem may see traffic from lots of threads at the same time, and make-next-seq-id doesn't do well with that <make-next-seq-id seq-field-name="inventoryItemDetailSeqId" value-name="newEntity" increment-by="1" numeric-padding="4"/> -->
        <sequenced-id-to-env sequence-name="InventoryItemDetail" env-name="newEntity.inventoryItemDetailSeqId"/>
        <field-to-result field-name="newEntity.inventoryItemDetailSeqId" result-name="inventoryItemDetailSeqId"/>

        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        
        <!-- set the effectiveDate; if from an ItemIssuance lookup the issuedDateTime -->
        <if-not-empty field-name="parameters.itemIssuanceId">
            <entity-one entity-name="ItemIssuance" value-name="itemIssuance"/>
            <set field="newEntity.effectiveDate" from-field="itemIssuance.issuedDateTime"/>
            <else>
                <now-timestamp-to-env env-name="newEntity.effectiveDate"/>
            </else>
        </if-not-empty>

        <!-- if availableToPromiseDiff or quantityOnHandDiff are empty set to 0 -->
        <if-empty field-name="newEntity.availableToPromiseDiff"><set field="newEntity.availableToPromiseDiff" value="0" type="Double"/></if-empty>
        <if-empty field-name="newEntity.quantityOnHandDiff"><set field="newEntity.quantityOnHandDiff" value="0" type="Double"/></if-empty>

        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateInventoryItemFromDetail" short-description="Update an InventoryItem From the Associated Detail Records" login-required="false">
        <entity-one entity-name="InventoryItem" value-name="inventoryItem"/>
        <entity-one entity-name="InventoryItemDetailSummary" value-name="inventoryItemDetailSummary"/>

        <set field="inventoryItem.availableToPromiseTotal" from-field="inventoryItemDetailSummary.availableToPromiseTotal"/>
        <set field="inventoryItem.quantityOnHandTotal" from-field="inventoryItemDetailSummary.quantityOnHandTotal"/>
        <store-value value-name="inventoryItem"/>
    </simple-method>

    <simple-method method-name="updateSerializedInventoryTotals" short-description="Update the totals on serialized inventory">
        <entity-one entity-name="InventoryItem" value-name="inventoryItem"/>
        <if-compare field-name="inventoryItem.inventoryItemTypeId" value="SERIALIZED_INV_ITEM" operator="equals">
            <if>
                <!-- available -->
                <condition>
                    <and>
                        <if-compare field-name="inventoryItem.statusId" value="INV_AVAILABLE" operator="equals"/>
                        <or>
                            <if-compare field-name="inventoryItem.availableToPromiseTotal" operator="not-equals" value="1" type="Double"/>
                            <if-compare field-name="inventoryItem.quantityOnHandTotal" operator="not-equals" value="1" type="Double"/>
                        </or>
                    </and>
                </condition>
                <then>
                    <set field="inventoryItem.availableToPromiseTotal" value="1" type="Double"/>
                    <set field="inventoryItem.quantityOnHandTotal" value="1" type="Double"/>
                    <log level="always" message="In updateSerializedInventoryTotals Storing totals for item [${inventoryItem.inventoryItemId}] INV_AVAIABLE [1/1]"/>
                    <store-value value-name="inventoryItem"/>
                </then>

                <!-- delivered -->
                <else-if>
                    <condition>
                        <and>
                            <if-compare field-name="inventoryItem.statusId" value="INV_DELIVERED" operator="equals"/>
                            <or>
                                <if-compare field-name="inventoryItem.availableToPromiseTotal" operator="not-equals" value="0" type="Double"/>
                                <if-compare field-name="inventoryItem.quantityOnHandTotal" operator="not-equals" value="0" type="Double"/>
                            </or>
                        </and>
                    </condition>
                    <then>
                        <set field="inventoryItem.availableToPromiseTotal" value="0" type="Double"/>
                        <set field="inventoryItem.quantityOnHandTotal" value="0" type="Double"/>
                        <log level="always" message="In updateSerializedInventoryTotals Storing totals [${inventoryItem.inventoryItemId}] for INV_DELIVERED [0/0]"/>
                        <store-value value-name="inventoryItem"/>
                    </then>
                </else-if>

                <!-- any promised; or on-hand but not available status -->
                <else-if>
                    <condition>
                        <and>
                            <if-compare field-name="inventoryItem.statusId" operator="not-equals" value="INV_AVAILABLE"/>
                            <if-compare field-name="inventoryItem.statusId" operator="not-equals" value="INV_DELIVERED"/>
                            <or>
                                <if-compare field-name="inventoryItem.availableToPromiseTotal" operator="not-equals" value="0" type="Double"/>
                                <if-compare field-name="inventoryItem.quantityOnHandTotal" operator="not-equals" value="1" type="Double"/>
                            </or>
                        </and>
                    </condition>
                    <then>
                        <set field="inventoryItem.availableToPromiseTotal" value="0" type="Double"/>
                        <set field="inventoryItem.quantityOnHandTotal" value="1" type="Double"/>
                        <log level="always" message="In updateSerializedInventoryTotals Storing totals [${inventoryItem.inventoryItemId}] for other status [0/1]"/>
                        <store-value value-name="inventoryItem"/>
                    </then>
                </else-if>
            </if>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="updateOldInventoryToDetailAll" short-description="Update Old Inventory To Detail All">
        <!-- find all InventoryItem records where oldQuantityOnHand or oldAvailableToPromise are not null -->
        <entity-condition entity-name="InventoryItem" list-name="inventoryItemList">
            <condition-list combine="or">
                <condition-expr field-name="oldQuantityOnHand" operator="not-equals" value=""/>
                <condition-expr field-name="oldAvailableToPromise" operator="not-equals" value=""/>
            </condition-list>
        </entity-condition>
        <iterate list-name="inventoryItemList" entry-name="inventoryItem">
            <set from-field="inventoryItem" field="callServiceMap.inventoryItem"/>
            <call-service service-name="updateOldInventoryToDetailSingle" in-map-name="callServiceMap"/>
            <clear-field field-name="callServiceMap.inventoryItem"/>
        </iterate>
    </simple-method>
    <simple-method method-name="updateOldInventoryToDetailSingle" short-description="Update Old Inventory To Detail Single">
        <!-- for each create an InventoryItemDetail representing the old QOH or ATP value, then null those fields -->
        <set from-field="parameters.inventoryItem.inventoryItemId" field="createDetailMap.inventoryItemId"/>
        <set from-field="parameters.inventoryItem.oldAvailableToPromise" field="createDetailMap.availableToPromiseDiff"/>
        <set from-field="parameters.inventoryItem.oldQuantityOnHand" field="createDetailMap.quantityOnHandDiff"/>
        <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>

        <clear-field field-name="parameters.inventoryItem.oldAvailableToPromise"/>
        <clear-field field-name="parameters.inventoryItem.oldQuantityOnHand"/>
        <store-value value-name="parameters.inventoryItem"/>
    </simple-method>

    <simple-method method-name="checkProductInventoryDiscontinuation" short-description="Check Product Inventory Discontinuation" login-required="false">
        <set from-field="parameters.productId" field="productIdMap.productId"/>
        <find-by-primary-key entity-name="Product" map-name="productIdMap" value-name="product"/>
        <now-timestamp-to-env env-name="nowTimestamp"/>

        <!-- if discontinueProductSales field is empty and the product is a variant, get the fieldcontent from the virtual product -->
        <if-not-empty field-name="product">
            <if-compare field-name="product.isVariant" value="Y" operator="equals">
                <!-- retrieve related virtual product because also to be used later -->
                <set field="getAssoc.productIdTo" from-field="product.productId"/>
                <set field="getAssoc.productAssocTypeId" value="PRODUCT_VARIANT"/>
                <find-by-and entity-name="ProductAssoc" map-name="getAssoc" list-name="assocs"/>
                <filter-list-by-date list-name="assocs" to-list-name="assocsDate"/>
                <first-from-list entry-name="assoc" list-name="assocsDate"/>
                <get-related-one value-name="assoc" relation-name="MainProduct" to-value-name="virtProduct"/>
                <if-empty field-name="product.salesDiscWhenNotAvail">
                    <set field="product.salesDiscWhenNotAvail" from-field="virtProduct.salesDiscWhenNotAvail"/>
                </if-empty>
            </if-compare>
        </if-not-empty>
        
        <!-- before checking inventory availability see if the product is already discontinued, and discontinued in the past (if in the future, still check availability and discontinue now if necessary) -->
        <if>
            <condition>
                <and>
                    <not><if-empty field-name="product"/></not>
                    <if-compare field-name="product.salesDiscWhenNotAvail" operator="equals" value="Y"/>
                    <or>
                        <if-empty field-name="product.salesDiscontinuationDate"/>
                        <if-compare-field field-name="product.salesDiscontinuationDate" operator="greater" to-field-name="nowTimestamp" type="Timestamp"/>
                    </or>
                </and>
            </condition>
            <then>
                <!-- now for the real fun, get the inventory available if is less-equal to zero discontinue product -->
                <call-service service-name="getProductInventoryAvailable" in-map-name="productIdMap">
                    <result-to-field result-name="availableToPromiseTotal"/>
                </call-service>
                <if-compare field-name="availableToPromiseTotal" operator="less-equals" value="0" type="Double">
                    <set from-field="parameters.productId" field="discontinueProductSalesMap.productId"/>
                    <call-service service-name="discontinueProductSales" in-map-name="discontinueProductSalesMap"/>
                </if-compare>
                                
                <!-- check if related virtual product has no variant left, if yes discontinue the virtual product too when salesDiscWhenNotAvail is 'Y'-->
                <if-not-empty field-name="virtProduct">
                    <if-compare field-name="virtProduct.salesDiscWhenNotAvail" operator="equals" value="Y">
                        <set field="getFromAssoc.productId" from-field="virtProduct.productId"/>
                        <set field="getFromAssoc.productAssocTypeId" value="PRODUCT_VARIANT"/>
                        <find-by-and entity-name="ProductAssoc" map-name="getFromAssoc" list-name="assocs"/>
                        <filter-list-by-date list-name="assocs" to-list-name="assocsDate"/>
                        <if-empty field-name="assocsDate">
                            <set from-field="virtProduct.productId" field="discontinueProductSalesMap.productId"/>
                            <call-service service-name="discontinueProductSales" in-map-name="discontinueProductSalesMap"/>
                        </if-empty>
                    </if-compare>
                </if-not-empty>
                
            </then>
        </if>
    </simple-method>


    <simple-method method-name="createInventoryItemVariance" short-description="Create an InventoryItemVariance">

        <!-- add changes to availableToPromise and quantityOnHand -->
        <make-value value-name="inventoryItemLookup" entity-name="InventoryItem"/>
        <set-pk-fields map-name="parameters" value-name="inventoryItemLookup"/>
        <find-by-primary-key map-name="inventoryItemLookup" value-name="inventoryItem"/>

        <if-compare field-name="inventoryItemTypeId" map-name="inventoryItem" operator="not-equals" value="NON_SERIAL_INV_ITEM">
            <string-to-list string="Can only create an InventoryItemVariance for a Non-Serialized Inventory Item" list-name="error_list"/>
        </if-compare>
        <check-errors/>

        <!-- instead of updating InventoryItem, add an InventoryItemDetail -->
        <set from-field="parameters.inventoryItemId" field="createDetailMap.inventoryItemId"/>
        <set from-field="parameters.physicalInventoryId" field="createDetailMap.physicalInventoryId"/>
        <set from-field="parameters.availableToPromiseVar" field="createDetailMap.availableToPromiseDiff"/>
        <set from-field="parameters.quantityOnHandVar" field="createDetailMap.quantityOnHandDiff"/>
        <set from-field="parameters.varianceReasonId" field="createDetailMap.reasonEnumId"/>
        <set from-field="parameters.comments" field="createDetailMap.description"/>
        <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>

        <make-value value-name="newEntity" entity-name="InventoryItemVariance"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>

        <!-- TODO: (possibly a big deal?) check to see if any reserved inventory needs to be changed because of a change in availableToPromise -->
        <!-- TODO: make sure availableToPromise is never greater than the quantityOnHand? -->
    </simple-method>
    <simple-method method-name="createPhysicalInventory" short-description="Create a PhysicalInventory">

        <make-value value-name="newEntity" entity-name="PhysicalInventory"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <if-empty field-name="newEntity.physicalInventoryDate">
            <now-timestamp-to-env env-name="newEntity.physicalInventoryDate"/>
        </if-empty>
        <if-empty field-name="newEntity.partyId">
            <set from-field="userLogin.partyId" field="newEntity.partyId"/>
        </if-empty>

        <sequenced-id-to-env sequence-name="PhysicalInventory" env-name="physicalInventoryId"/>
        <set from-field="physicalInventoryId" field="newEntity.physicalInventoryId"/>
        <field-to-result field-name="physicalInventoryId" result-name="physicalInventoryId"/>

        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="createPhysicalInventoryAndVariance" short-description="Create a PhysicalInventory and an InventoryItemVariance">
        <set-service-fields service-name="createPhysicalInventory" map-name="parameters" to-map-name="createPhysicalInventoryMap"/>
        <call-service service-name="createPhysicalInventory" in-map-name="createPhysicalInventoryMap">
            <result-to-field result-name="physicalInventoryId" field-name="physicalInventoryId" map-name="parameters"/>
            <result-to-result result-name="physicalInventoryId" service-result-name="physicalInventoryId"/>
        </call-service>
        <set-service-fields service-name="createInventoryItemVariance" map-name="parameters" to-map-name="createInventoryItemVarianceMap"/>
        <call-service service-name="createInventoryItemVariance" in-map-name="createInventoryItemVarianceMap"/>
    </simple-method>

    <!-- ProductFacility methods -->
    <simple-method method-name="createProductFacility" short-description="Create a ProductFacility">

        <make-value value-name="newEntity" entity-name="ProductFacility"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateProductFacility" short-description="Update a ProductFacility">

        <make-value entity-name="ProductFacility" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteProductFacility" short-description="Delete a ProductFacility">

        <make-value entity-name="ProductFacility" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ProductFacilityLocation methods -->
    <simple-method method-name="createProductFacilityLocation" short-description="Create a ProductFacilityLocation">

        <make-value value-name="newEntity" entity-name="ProductFacilityLocation"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateProductFacilityLocation" short-description="Update a ProductFacilityLocation">

        <make-value entity-name="ProductFacilityLocation" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteProductFacilityLocation" short-description="Delete a ProductFacilityLocation">

        <make-value entity-name="ProductFacilityLocation" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ================================================================ -->
    <!-- Check/Reserve Inventory Services -->
    <!-- ================================================================ -->

    <simple-method method-name="getProductInventoryAvailable" short-description="Get Inventory Available for a Product" login-required="false" use-transaction="false">
        <!--
            this method can be called with some optional parameters:
                -facilityId
                -locationSeqId
                -containerId
            If the service definitions are used then only some of these will ever be specified, or none of them.

            Whatever it is called with, it will basicly get a list of InventoryItems and total the available amount.
        -->

        <!-- this is not normally needed...
        <log level="info"><string value="Getting inventory available to promise count; parameters are: "/><field field-name="parameters"/></log>
        <log level="info" message="foo foo: "><string value="Getting inventory available to promise count; productId is: "/><field field-name="productId" map-name="parameters"/></log>
        -->

        <set from-field="parameters.inventoryItemId" field="lookupFieldMap.inventoryItemId"/>
        <set from-field="parameters.productId" field="lookupFieldMap.productId"/>
        <set from-field="parameters.facilityId" field="lookupFieldMap.facilityId"/>
        <set from-field="parameters.locationSeqId" field="lookupFieldMap.locationSeqId"/>
        <set from-field="parameters.containerId" field="lookupFieldMap.containerId"/>

        <!-- FIXME: this is an hack to get all the items with a null location:
                    if the parameters.locationSeqId string is equal to "nullField" then
                    set the lookupFieldMap.locationSeqId to null 
        -->
        <if-compare field-name="parameters.locationSeqId" operator="equals" value="nullField">
            <set from-field="nullField" field="lookupFieldMap.locationSeqId"/>
        </if-compare>

        <!-- we might get away with a cache here since real serious errors will occur during the reservation service... but only if we need the speed -->
        <if-compare field-name="parameters.useCache" operator="equals" value="true" type="Boolean">
            <find-by-and entity-name="InventoryItem" map-name="lookupFieldMap" list-name="inventoryItems" use-iterator="true" use-cache="true"/>
            <else>
                <find-by-and entity-name="InventoryItem" map-name="lookupFieldMap" list-name="inventoryItems" use-iterator="true" use-cache="false"/>
            </else>
        </if-compare>
        
        <set field="parameters.availableToPromiseTotal" value="0" type="Double"/>
        <set field="parameters.quantityOnHandTotal" value="0" type="Double"/>
        <iterate entry-name="inventoryItem" list-name="inventoryItems">
            <if-compare field-name="inventoryItem.inventoryItemTypeId" operator="equals" value="SERIALIZED_INV_ITEM">
                <if>
                    <condition>
                        <or>
                            <if-compare field-name="inventoryItem.statusId" value="INV_AVAILABLE" operator="equals"/>
                            <if-compare field-name="inventoryItem.statusId" value="INV_PROMISED" operator="equals"/>
                            <if-compare field-name="inventoryItem.statusId" value="INV_BEING_TRANSFERED" operator="equals"/>
                        </or>
                    </condition>
                    <then>
                        <calculate field-name="parameters.quantityOnHandTotal" type="Double">
                            <calcop field-name="parameters.quantityOnHandTotal" operator="add"><number value="1.0"/></calcop>
                        </calculate>
                    </then>
                </if>
                <if-compare value="INV_AVAILABLE" operator="equals" field-name="inventoryItem.statusId">
                    <calculate field-name="parameters.availableToPromiseTotal" type="Double">
                        <calcop field-name="parameters.availableToPromiseTotal" operator="add"><number value="1.0"/></calcop>
                    </calculate>
                </if-compare>
            </if-compare>
            <if-compare field-name="inventoryItem.inventoryItemTypeId" operator="equals" value="NON_SERIAL_INV_ITEM">
                <if-not-empty field-name="inventoryItem.quantityOnHandTotal">
                    <calculate field-name="parameters.quantityOnHandTotal" type="Double">
                        <calcop operator="get" field-name="parameters.quantityOnHandTotal"/>
                        <calcop operator="get" field-name="inventoryItem.quantityOnHandTotal"/>
                    </calculate>
                </if-not-empty>
                <if-not-empty field-name="inventoryItem.availableToPromiseTotal">
                    <calculate field-name="parameters.availableToPromiseTotal" type="Double">
                        <calcop operator="get" field-name="parameters.availableToPromiseTotal"/>
                        <calcop operator="get" field-name="inventoryItem.availableToPromiseTotal"/>
                    </calculate>
                </if-not-empty>
            </if-compare>
        </iterate>

        <field-to-result field-name="availableToPromiseTotal" map-name="parameters"/>
        <field-to-result field-name="quantityOnHandTotal" map-name="parameters"/>
    </simple-method>

    <simple-method method-name="getMktgPackagesAvailable" short-description="Get Marketing Packages Available From Components In Inventory" login-required="false" use-transaction="false">
        <set field="availableToPromiseTotal" value="0" type="Double"/>
        <set field="quantityOnHandTotal" value="0" type="Double"/>
        <set from-field="parameters.productId" field="lookupMktgPkgParams.productId"/>
        <entity-one entity-name="Product" value-name="product"/>
        <if-compare field-name="product.productTypeId" operator="equals" value="MARKETING_PKG_AUTO">
            <set value="MANUF_COMPONENT" field="lookupMktgPkgParams.type"/>
        <else>
            <set value="PRODUCT_COMPONENT" field="lookupMktgPkgParams.type"/>
        </else>
        </if-compare>
        <call-service service-name="getAssociatedProducts" in-map-name="lookupMktgPkgParams">
            <result-to-field result-name="assocProducts"/>
        </call-service>
        <!-- if there are any components, then the ATP and QOH are based on the quantities of those component
            products and found with another service -->
        <if-not-empty field-name="assocProducts">
            <set from-field="assocProducts" field="inventoryByAssocProductsParams.assocProducts"/>
            <set from-field="parameters.facilityId" field="inventoryByAssocProductsParams.facilityId"/>
            <call-service service-name="getProductInventoryAvailableFromAssocProducts" in-map-name="inventoryByAssocProductsParams">
                <result-to-field result-name="quantityOnHandTotal"/>
                <result-to-field result-name="availableToPromiseTotal"/>
            </call-service>
        </if-not-empty>
        <field-to-result field-name="availableToPromiseTotal"/>
        <field-to-result field-name="quantityOnHandTotal"/>
    </simple-method>

    <simple-method method-name="balanceInventoryItems" short-description="Balances available-to-promise on inventory items">
        <entity-one entity-name="InventoryItem" value-name="inventoryItem"/>

        <!-- find all items which have a negative ATP -->
        <entity-condition entity-name="InventoryItem" list-name="inventoryItems">
            <condition-list combine="and">
                <condition-expr field-name="productId" operator="equals" env-name="inventoryItem.productId"/>
                <condition-expr field-name="facilityId" operator="equals" env-name="inventoryItem.facilityId"/>
                <condition-expr field-name="inventoryItemTypeId" operator="equals" value="NON_SERIAL_INV_ITEM"/>
                <condition-list combine="or">
                    <condition-expr field-name="availableToPromiseTotal" operator="equals" env-name="nullField"/>
                    <condition-expr field-name="availableToPromiseTotal" operator="equals" value=""/>
                    <condition-expr field-name="availableToPromiseTotal" operator="less" value="0"/>
                </condition-list>
                <!-- Exclude the current item from the selection, because it will be added to the list anyway -->
                <condition-expr field-name="inventoryItemId" operator="not-equals" env-name="inventoryItem.inventoryItemId"/>
            </condition-list>
            <!-- TODO: order the list of inventory items in a useful way, since operations occur below based on the first item -->
        </entity-condition>
        <!-- the current item is added to the list, even if its atp is greater than zero, because there could be
             negative reservations (backorders) on it, if the atp has been increased by an inventory variance -->
        <field-to-list field-name="inventoryItem" list-name="inventoryItems"/>

        <!--  find their current reservations -->
        <iterate list-name="inventoryItems" entry-name="item">
            <!-- If quantityOnHandTotal is not equal to availableToPromiseTotal this means that 
                 there are pending reservations on the item that cause availableToPromiseTotal
                 to be lower than the quantityOnHandTotal (the opposite can never happen).
                 In fact, if availableToPromiseTotal is negative, this doesn't mean that there are reservations;
                 for example, if we have a negative quantityOnHandTotal and quantityOnHandTotal equal to 
                 availableToPromiseTotal, then no reservations are present.
            -->
            <if-compare-field field-name="item.quantityOnHandTotal" operator="not-equals" to-field-name="item.availableToPromiseTotal">
                <get-related value-name="item" relation-name="OrderItemShipGrpInvRes" list-name="relatedRes"/>
                <!--<list-to-list list-name="relatedRes" to-list-name="reservations"/>-->

                <iterate list-name="relatedRes" entry-name="oneRelatedRes">
                    <entity-condition entity-name="PicklistAndBinAndItem" list-name="picklistItemList">
                        <condition-list combine="and">
                            <condition-expr field-name="orderId" env-name="oneRelatedRes.orderId"/>
                            <condition-expr field-name="shipGroupSeqId" env-name="oneRelatedRes.shipGroupSeqId"/>
                            <condition-expr field-name="orderItemSeqId" env-name="oneRelatedRes.orderItemSeqId"/>
                            <condition-expr field-name="inventoryItemId" env-name="oneRelatedRes.inventoryItemId"/>
                            <condition-expr field-name="statusId" operator="not-equals" value="PICKLIST_CANCELLED"/>
                            <condition-expr field-name="statusId" operator="not-equals" value="PICKLIST_PICKED"/>
                        </condition-list>
                    </entity-condition>

                    <!-- only cancel/re-reserve when there are no picklists associated; this will prevent
                             orders appearing on duplicate pick lists -->

                    <if-empty field-name="picklistItemList">
                        <log level="info" message="Order [${oneRelatedRes.orderId}] was not found on any picklist for InventoryItem [${oneRelatedRes.inventoryItemId}]"/>                                                                   
                        <if>
                            <condition>
                                <and>
                                    <if-compare-field field-name="parameters.priorityOrderId" operator="equals" to-field-name="oneRelatedRes.orderId"/>
                                    <if-compare-field field-name="parameters.priorityOrderItemSeqId" operator="equals" to-field-name="oneRelatedRes.orderItemSeqId"/>
                                </and>
                            </condition>
                            <then>
                                <field-to-list field-name="oneRelatedRes" list-name="privilegedReservations"/>
                            </then>
                            <else>
                                <field-to-list field-name="oneRelatedRes" list-name="reservations"/>
                            </else>
                        </if>
                    </if-empty>
                </iterate>
            </if-compare-field>
        </iterate>

        <!-- sort the list by date -->
        <set field="orderByList[]" value="reservedDatetime"/>
        <set field="orderByList[]" value="sequenceId"/>
        <order-value-list list-name="reservations" order-by-list-name="orderByList"/>

        <list-to-list list-name="privilegedReservations" to-list-name="allReservations"/>
        <list-to-list list-name="reservations" to-list-name="allReservations"/>

        <if-compare field-name="inventoryItemTypeId" map-name="inventoryItem" operator="equals" value="SERIALIZED_INV_ITEM">
            <!-- if the new item is serialized, i.e. qoh is 1, we just need the first reservation -->
            <first-from-list entry-name="inventoryReservation" list-name="allReservations"/>
            <clear-field field-name="allReservations"/>
            <field-to-list field-name="inventoryReservation" list-name="allReservations"/>
        </if-compare>

        <!-- FIRST, cancel all the reservations -->
        <iterate list-name="allReservations" entry-name="oisgir">
            <clear-field field-name="cancelOisgirMap"/>
            <set field="cancelOisgirMap.orderId" from-field="oisgir.orderId"/>
            <set field="cancelOisgirMap.orderItemSeqId" from-field="oisgir.orderItemSeqId"/>
            <set field="cancelOisgirMap.inventoryItemId" from-field="oisgir.inventoryItemId"/>
            <set field="cancelOisgirMap.shipGroupSeqId" from-field="oisgir.shipGroupSeqId"/>
            <call-service service-name="cancelOrderItemShipGrpInvRes" in-map-name="cancelOisgirMap"/>
        </iterate>

        <!-- THEN, re-reserve the cancelled items -->
        <iterate list-name="allReservations" entry-name="oisgir">
            <!-- maintain a Set (in a Map) of orderIds that we have reallocated for, but only if they had some quantityNotReserved -->
            <if-not-empty field-name="oisgir.quantityNotAvailable">
                <if-compare field-name="oisgir.quantityNotAvailable" operator="greater" value="0" type="Double">
                    <set field="touchedOrderIdMap.${oisgir.orderId}" value="Y"/>
                    <log level="verbose" message="Adding ${oisgir.orderId} to touchedOrderIdMap"/>
                </if-compare>
            </if-not-empty>
            
            <!-- require inventory is N because it had to be N to begin with to have a negative ATP -->
            <clear-field field-name="resMap"/>
            <set field="resMap.productId" from-field="inventoryItem.productId"/>
            <set field="resMap.orderId" from-field="oisgir.orderId"/>
            <set field="resMap.orderItemSeqId" from-field="oisgir.orderItemSeqId"/>
            <set field="resMap.quantity" from-field="oisgir.quantity"/>
            <set field="resMap.reservedDatetime" from-field="oisgir.reservedDatetime"/>
            <set field="resMap.reserveOrderEnumId" from-field="oisgir.reserveOrderEnumId"/>
            <set field="resMap.requireInventory" value="N"/>
            <set field="resMap.shipGroupSeqId" from-field="oisgir.shipGroupSeqId"/>
            <set field="resMap.sequenceId" from-field="oisgir.sequenceId"/>
            <log level="info" message="Re-reserving product [${resMap.productId}] for order item [${resMap.orderId}:${resMap.orderItemSeqId}] quantity [${resMap.quantity}]; facility [${inventoryItem.facilityId}]"/>
            <if-empty field-name="inventoryItem.facilityId">
                <log level="warning" message="In balanceInventoryItems there is no facilityId, so reserving from any facility for order item [${resMap.orderId}:${resMap.orderItemSeqId}]"></log>
                <call-service service-name="reserveProductInventory" in-map-name="resMap"/>
                
                <else>
                    <set field="resMap.facilityId" from-field="inventoryItem.facilityId"/>
                    <call-service service-name="reserveProductInventoryByFacility" in-map-name="resMap"/>
                </else>
            </if-empty>
        </iterate>
        
        <!-- now go through touchedOrderIdMap keys and make a Set/Map of orderIds that are no longer on back-order -->
        <iterate-map key-name="touchedOrderId" value-name="throwAwayValue" map-name="touchedOrderIdMap">
            <set field="checkOrderIsOnBackOrderMap.orderId" from-field="touchedOrderId"/>
            <call-service service-name="checkOrderIsOnBackOrder" in-map-name="checkOrderIsOnBackOrderMap">
                <result-to-field result-name="isBackOrder"/>
            </call-service>
            
            <if-compare field-name="isBackOrder" operator="equals" value="false" type="Boolean">
                <set field="noLongerOnBackOrderIdMap.${touchedOrderId}" value="Y"/>
            </if-compare>
        </iterate-map>
        <if-not-empty field-name="noLongerOnBackOrderIdMap">
            <call-object-method obj-field-name="noLongerOnBackOrderIdMap" method-name="keySet" ret-field-name="noLongerOnBackOrderIdSet"/>
            <field-to-result field-name="noLongerOnBackOrderIdSet"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="reassignInventoryReservations" short-description="Balances available-to-promise on inventory items">
        <entity-condition entity-name="OrderItemShipGrpInvResAndItem" list-name="relatedRes">
            <condition-list combine="and">
                <condition-expr field-name="productId" operator="equals" env-name="parameters.productId"/>
                <condition-expr field-name="facilityId" operator="equals" env-name="parameters.facilityId"/>
                <condition-expr field-name="inventoryItemTypeId" operator="equals" value="NON_SERIAL_INV_ITEM"/>
                <condition-list combine="or">
                    <condition-expr field-name="currentPromisedDate" operator="greater" env-name="parameters.fromDate"/>
                    <condition-list combine="or">
                        <condition-expr field-name="quantityNotAvailable" operator="greater" value="0"/>
                        <condition-expr field-name="availableToPromiseTotal" operator="equals" env-name="nullField"/>
                        <condition-expr field-name="availableToPromiseTotal" operator="equals" value=""/>
                        <condition-expr field-name="availableToPromiseTotal" operator="less" value="0"/>
                    </condition-list>
                </condition-list>
            </condition-list>
            <order-by field-name="currentPromisedDate"/>
            <order-by field-name="reservedDatetime"/>
            <order-by field-name="sequenceId"/>
        </entity-condition>

        <iterate list-name="relatedRes" entry-name="oneRelatedRes">
            <entity-condition entity-name="PicklistAndBinAndItem" list-name="picklistItemList">
                <condition-list combine="and">
                    <condition-expr field-name="orderId" env-name="oneRelatedRes.orderId"/>
                    <condition-expr field-name="shipGroupSeqId" env-name="oneRelatedRes.shipGroupSeqId"/>
                    <condition-expr field-name="orderItemSeqId" env-name="oneRelatedRes.orderItemSeqId"/>
                    <condition-expr field-name="inventoryItemId" env-name="oneRelatedRes.inventoryItemId"/>
                    <condition-expr field-name="statusId" operator="not-equals" value="PICKLIST_CANCELLED"/>
                    <condition-expr field-name="statusId" operator="not-equals" value="PICKLIST_PICKED"/>
                </condition-list>
            </entity-condition>

            <!-- only cancel/re-reserve when there are no picklists associated; this will prevent
                     orders appearing on duplicate pick lists -->

            <if-empty field-name="picklistItemList">
                <log level="info" message="Order [${oneRelatedRes.orderId}] was not found on any picklist for InventoryItem [${oneRelatedRes.inventoryItemId}]"/>
                <if>
                    <condition>
                        <and>
                            <if-compare-field field-name="parameters.priorityOrderId" operator="equals" to-field-name="oneRelatedRes.orderId"/>
                            <if-compare-field field-name="parameters.priorityOrderItemSeqId" operator="equals" to-field-name="oneRelatedRes.orderItemSeqId"/>
                        </and>
                    </condition>
                    <then>
                        <field-to-list field-name="oneRelatedRes" list-name="privilegedReservations"/>
                    </then>
                    <else>
                        <field-to-list field-name="oneRelatedRes" list-name="reservations"/>
                    </else>
                </if>
            </if-empty>
        </iterate>

        <list-to-list list-name="privilegedReservations" to-list-name="allReservations"/>
        <list-to-list list-name="reservations" to-list-name="allReservations"/>

        <!-- FIRST, cancel all the reservations -->
        <iterate list-name="allReservations" entry-name="oisgir">
            <clear-field field-name="cancelOisgirMap"/>
            <set field="cancelOisgirMap.orderId" from-field="oisgir.orderId"/>
            <set field="cancelOisgirMap.orderItemSeqId" from-field="oisgir.orderItemSeqId"/>
            <set field="cancelOisgirMap.inventoryItemId" from-field="oisgir.inventoryItemId"/>
            <set field="cancelOisgirMap.shipGroupSeqId" from-field="oisgir.shipGroupSeqId"/>
            <call-service service-name="cancelOrderItemShipGrpInvRes" in-map-name="cancelOisgirMap"/>
        </iterate>

        <!-- THEN, re-reserve the cancelled items -->
        <iterate list-name="allReservations" entry-name="oisgir">
            <!-- maintain a Set (in a Map) of orderIds that we have reallocated for, but only if they had some quantityNotReserved -->
            <if-not-empty field-name="oisgir.quantityNotAvailable">
                <if-compare field-name="oisgir.quantityNotAvailable" operator="greater" value="0" type="Double">
                    <set field="touchedOrderIdMap.${oisgir.orderId}" value="Y"/>
                    <log level="verbose" message="Adding ${oisgir.orderId} to touchedOrderIdMap"/>
                </if-compare>
            </if-not-empty>
            
            <!-- require inventory is N because it had to be N to begin with to have a negative ATP -->
            <clear-field field-name="resMap"/>
            <set field="resMap.productId" from-field="parameters.productId"/>
            <set field="resMap.orderId" from-field="oisgir.orderId"/>
            <set field="resMap.orderItemSeqId" from-field="oisgir.orderItemSeqId"/>
            <set field="resMap.quantity" from-field="oisgir.quantity"/>
            <set field="resMap.reservedDatetime" from-field="oisgir.reservedDatetime"/>
            <set field="resMap.reserveOrderEnumId" from-field="oisgir.reserveOrderEnumId"/>
            <set field="resMap.requireInventory" value="N"/>
            <set field="resMap.shipGroupSeqId" from-field="oisgir.shipGroupSeqId"/>
            <set field="resMap.sequenceId" from-field="oisgir.sequenceId"/>
            <set field="resMap.facilityId" from-field="parameters.facilityId"/>
            <log level="info" message="Re-reserving product [${resMap.productId}] for order item [${resMap.orderId}:${resMap.orderItemSeqId}] quantity [${resMap.quantity}]; facility [${parameters.facilityId}]"/>
            <call-service service-name="reserveProductInventoryByFacility" in-map-name="resMap"/>
        </iterate>
        
        <!-- now go through touchedOrderIdMap keys and make a Set/Map of orderIds that are no longer on back-order -->
        <iterate-map key-name="touchedOrderId" value-name="throwAwayValue" map-name="touchedOrderIdMap">
            <set field="checkOrderIsOnBackOrderMap.orderId" from-field="touchedOrderId"/>
            <call-service service-name="checkOrderIsOnBackOrder" in-map-name="checkOrderIsOnBackOrderMap">
                <result-to-field result-name="isBackOrder"/>
            </call-service>
            
            <if-compare field-name="isBackOrder" operator="equals" value="false" type="Boolean">
                <set field="noLongerOnBackOrderIdMap.${touchedOrderId}" value="Y"/>
            </if-compare>
        </iterate-map>
        <if-not-empty field-name="noLongerOnBackOrderIdMap">
            <call-object-method obj-field-name="noLongerOnBackOrderIdMap" method-name="keySet" ret-field-name="noLongerOnBackOrderIdSet"/>
            <field-to-result field-name="noLongerOnBackOrderIdSet"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="balanceOrderItemsWithNegativeReservations" short-description="To balance order items with negative reservations">
        <entity-condition entity-name="OrderItemShipGrpInvResAndItem" list-name="oisgirais">
            <condition-list combine="and">
                <condition-expr field-name="orderId" operator="equals" env-name="parameters.orderId"/>
                <condition-expr field-name="quantityNotAvailable" operator="greater" value="0"/>
                <condition-expr field-name="quantityNotAvailable" operator="not-equals" value=""/>
                <condition-expr field-name="quantityNotAvailable" operator="not-equals" env-name="nullField"/>
            </condition-list>
        </entity-condition>
        <iterate list-name="oisgirais" entry-name="oisgir">
            <set field="orderItems.${oisgir.orderItemSeqId}" from-field="oisgir"/>
        </iterate>
        <now-timestamp-to-env env-name="nowTimestamp"/>
        <iterate-map key-name="orderItemSeqId" value-name="oisgir" map-name="orderItems">
            <set field="reassignInventoryReservationsCtx.productId" from-field="oisgir.productId"/>
            <set field="reassignInventoryReservationsCtx.facilityId" from-field="oisgir.facilityId"/>
            <if-not-empty field-name="oisgir.shipBeforeDate">
                <set field="reassignInventoryReservationsCtx.fromDate" from-field="oisgir.shipBeforeDate"/>
            <else>
                <set field="reassignInventoryReservationsCtx.fromDate" from-field="nowTimestamp"/>
            </else>
            </if-not-empty>
            <call-service service-name="reassignInventoryReservations" in-map-name="reassignInventoryReservationsCtx"/>
        </iterate-map>
     </simple-method>

    <!-- Inventory Transfer Services -->
    <simple-method method-name="createInventoryTransfer" short-description="Create an Inventory Transfer">

        <make-value value-name="newEntity" entity-name="InventoryTransfer"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <sequenced-id-to-env sequence-name="InventoryTransfer" env-name="newEntity.inventoryTransferId"/>
        <field-to-result field-name="newEntity.inventoryTransferId" result-name="inventoryTransferId"/>

        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateInventoryTransfer" short-description="Update an Inventory Transfer">

        <set from-field="parameters.inventoryTransferId" field="lookupPKMap.inventoryTransferId"/>
        <find-by-primary-key entity-name="InventoryTransfer" map-name="lookupPKMap" value-name="inventoryTransfer"/>

        <if-not-empty field-name="parameters.statusId">
            <if-compare-field field-name="parameters.statusId" operator="not-equals" to-field-name="inventoryTransfer.statusId">
                <!-- make sure a StatusValidChange record exists, if not return error -->
                <entity-one entity-name="StatusValidChange" value-name="checkStatusValidChange" auto-field-map="false">
                    <field-map env-name="inventoryTransfer.statusId" field-name="statusId"/>
                    <field-map env-name="parameters.statusId" field-name="statusIdTo"/>
                </entity-one>
                <if-empty field-name="checkStatusValidChange">
                    <set value="ERROR: Changing the status from ${inventoryTransfer.statusId} to ${parameters.statusId} is not allowed." field="error_list[]"/>
                </if-empty>
                <check-errors/>
            </if-compare-field>
        </if-not-empty>

        <set-nonpk-fields map-name="parameters" value-name="inventoryTransfer"/>
        <store-value value-name="inventoryTransfer"/>
    </simple-method>

    <simple-method method-name="createInventoryTransfersForProduct" short-description="Create inventory transfers for the given product and quantity. Return the units not available for transfers.">

        <set from-field="parameters.productId" field="lookupFieldMap.productId"/>
        <set from-field="parameters.facilityId" field="lookupFieldMap.facilityId"/>
        <set from-field="parameters.containerId" field="lookupFieldMap.containerId"/>
        <now-timestamp-to-env env-name="nowTimestamp"/>

        <!-- check the product; make sure its a physical item -->
        <entity-one entity-name="Product" value-name="product"/>
        <entity-one entity-name="Facility" value-name="facility" use-cache="true"/>
        <get-related-one value-name="product" relation-name="ProductType" to-value-name="productType"/>
        <if-compare field-name="productType.isPhysical" operator="equals" value="N">
            <set field="quantityNotTransferred" value="0" type="Double"/>
            <else>
                <!-- before we do the find, put together the orderBy list based on which reserveOrderEnumId is specified -->
                <!-- FIFO=first in first out, so it should be order by ASCending receive or expire date
                     LIFO=last in first out, so it means order by DESCending receive or expire date
                     -->
                <if-compare value="INVRO_GUNIT_COST" operator="equals" field-name="reserveOrderEnumId" map-name="parameters">
                    <set value="unitCost DESC" field="orderByString"/>
                <else>
                    <if-compare value="INVRO_LUNIT_COST" operator="equals" field-name="reserveOrderEnumId" map-name="parameters">
                        <set value="+unitCost" field="orderByString"/>
                    <else>
                        <if-compare value="INVRO_FIFO_EXP" operator="equals" field-name="reserveOrderEnumId" map-name="parameters">
                            <set value="+expireDate" field="orderByString"/>
                        <else>
                            <if-compare value="INVRO_LIFO_EXP" operator="equals" field-name="reserveOrderEnumId" map-name="parameters">
                                <set value="-expireDate" field="orderByString"/>
                            <else>
                                <if-compare value="INVRO_LIFO_REC" operator="equals" field-name="reserveOrderEnumId" map-name="parameters">
                                    <set value="-datetimeReceived" field="orderByString"/>
                                <else>
                                    <!-- the default reserveOrderEnumId is INVRO_FIFO_REC, ie FIFO based on date received -->
                                    <set value="+datetimeReceived" field="orderByString"/>
                                    <set value="INVRO_FIFO_REC" field="parameters.reserveOrderEnumId"/>
                                </else>
                                </if-compare>
                            </else>
                            </if-compare>
                        </else>
                        </if-compare>
                    </else>
                    </if-compare>
                </else>
                </if-compare>
                <set field="orderByList[]" from-field="orderByString"/>
                                                    
                <set from-field="parameters.quantity" field="quantityNotTransferred"/>

                <!-- first transfer InventoryItems in FLT_PICKLOC type locations, then FLT_BULK locations, then InventoryItems with no locations -->
                <find-by-and entity-name="InventoryItemAndLocation" map-name="lookupFieldMap" list-name="inventoryItemAndLocations" use-iterator="true" order-by-list-name="orderByList"/>
                <iterate entry-name="inventoryItemAndLocation" list-name="inventoryItemAndLocations">
                    <if>
                        <condition>
                            <and>
                                <if-compare field-name="inventoryItemAndLocation.locationTypeEnumId" operator="equals" value="FLT_PICKLOC"/>
                                <if-compare field-name="quantityNotTransferred" value="0.0" operator="greater" type="Double"/>
                                <if-compare field-name="inventoryItemAndLocation.availableToPromiseTotal" value="0.0" operator="greater" type="Double"/>
                            </and>
                        </condition>
                        <then>
                            <clear-field field-name="inputMap"/>
                            <set field="inputMap.inventoryItemId" from-field="inventoryItemAndLocation.inventoryItemId"/>
                            <set field="inputMap.statusId" value="IXF_REQUESTED"/>
                            <set field="inputMap.facilityId" from-field="parameters.facilityId"/>
                            <set field="inputMap.facilityIdTo" from-field="parameters.facilityIdTo"/>
                            <set field="inputMap.sendDate" from-field="parameters.sendDate"/>
                            <!-- TODO: inventory transfers for serialized items are not yet implemented -->
                            <if-compare field-name="inventoryItemAndLocation.inventoryItemTypeId" operator="equals" value="NON_SERIAL_INV_ITEM">
                                <if-compare-field field-name="quantityNotTransferred" to-field-name="inventoryItemAndLocation.availableToPromiseTotal" operator="greater" type="Double">
                                    <set field="inputMap.xferQty" from-field="inventoryItemAndLocation.availableToPromiseTotal"/>
                                <else>
                                    <set field="inputMap.xferQty" from-field="quantityNotTransferred"/>
                                </else>
                                </if-compare-field>
                                <call-service service-name="createInventoryTransfer" in-map-name="inputMap"/>
                                <calculate field-name="quantityNotTransferred">
                                    <calcop operator="subtract" field-name="quantityNotTransferred">
                                        <calcop operator="get" field-name="inputMap.xferQty"/>
                                    </calcop>
                                </calculate>
                            </if-compare>
                        </then>
                    </if>
                </iterate>

                <!-- still some left? try the FLT_BULK locations -->
                <if-compare field-name="quantityNotTransferred" operator="greater" value="0" type="Double">
                    <find-by-and entity-name="InventoryItemAndLocation" map-name="lookupFieldMap" list-name="inventoryItemAndLocations" use-iterator="true" order-by-list-name="orderByList"/>
                    <iterate entry-name="inventoryItemAndLocation" list-name="inventoryItemAndLocations">
                        <if>
                            <condition>
                                <and>
                                    <if-compare field-name="inventoryItemAndLocation.locationTypeEnumId" operator="equals" value="FLT_BULK"/>
                                    <if-compare field-name="quantityNotTransferred" value="0.0" operator="greater" type="Double"/>
                                    <if-compare field-name="inventoryItemAndLocation.availableToPromiseTotal" value="0.0" operator="greater" type="Double"/>
                                </and>
                            </condition>
                            <then>
                                <clear-field field-name="inputMap"/>
                                <set field="inputMap.inventoryItemId" from-field="inventoryItemAndLocation.inventoryItemId"/>
                                <set field="inputMap.statusId" value="IXF_REQUESTED"/>
                                <set field="inputMap.facilityId" from-field="parameters.facilityId"/>
                                <set field="inputMap.facilityIdTo" from-field="parameters.facilityIdTo"/>
                                <set field="inputMap.sendDate" from-field="parameters.sendDate"/>
                                <!-- TODO: inventory transfers for serialized items are not yet implemented -->
                                <if-compare field-name="inventoryItemAndLocation.inventoryItemTypeId" operator="equals" value="NON_SERIAL_INV_ITEM">
                                    <if-compare-field field-name="quantityNotTransferred" to-field-name="inventoryItemAndLocation.availableToPromiseTotal" operator="greater" type="Double">
                                        <set field="inputMap.xferQty" from-field="inventoryItemAndLocation.availableToPromiseTotal"/>
                                    <else>
                                        <set field="inputMap.xferQty" from-field="quantityNotTransferred"/>
                                    </else>
                                    </if-compare-field>
                                    <call-service service-name="createInventoryTransfer" in-map-name="inputMap"/>
                                    <calculate field-name="quantityNotTransferred">
                                        <calcop operator="subtract" field-name="quantityNotTransferred">
                                            <calcop operator="get" field-name="inputMap.xferQty"/>
                                        </calcop>
                                    </calculate>
                                </if-compare>
                            </then>
                        </if>
                    </iterate>
                </if-compare>

                <!-- last of all transfer InventoryItems that have no locationSeqId, ie are not in any particular location -->
                <if-compare field-name="quantityNotTransferred" operator="greater" value="0" type="Double">
                    <find-by-and entity-name="InventoryItem" map-name="lookupFieldMap" list-name="inventoryItems" use-iterator="true" order-by-list-name="orderByList"/>
                    <iterate entry-name="inventoryItem" list-name="inventoryItems">
                        <if>
                            <condition>
                                <and>
                                    <if-empty field-name="inventoryItem.locationSeqId"/>
                                    <if-compare field-name="quantityNotTransferred" value="0.0" operator="greater" type="Double"/>
                                    <if-compare field-name="inventoryItem.availableToPromiseTotal" value="0.0" operator="greater" type="Double"/>
                                </and>
                            </condition>
                            <then>
                                <clear-field field-name="inputMap"/>
                                <set field="inputMap.inventoryItemId" from-field="inventoryItem.inventoryItemId"/>
                                <set field="inputMap.statusId" value="IXF_REQUESTED"/>
                                <set field="inputMap.facilityId" from-field="parameters.facilityId"/>
                                <set field="inputMap.facilityIdTo" from-field="parameters.facilityIdTo"/>
                                <set field="inputMap.sendDate" from-field="parameters.sendDate"/>
                                <!-- TODO: inventory transfers for serialized items are not yet implemented -->
                                <if-compare field-name="inventoryItem.inventoryItemTypeId" operator="equals" value="NON_SERIAL_INV_ITEM">
                                    <if-compare-field field-name="quantityNotTransferred" to-field-name="inventoryItem.availableToPromiseTotal" operator="greater" type="Double">
                                        <set field="inputMap.xferQty" from-field="inventoryItem.availableToPromiseTotal"/>
                                    <else>
                                        <set field="inputMap.xferQty" from-field="quantityNotTransferred"/>
                                    </else>
                                    </if-compare-field>
                                    <call-service service-name="createInventoryTransfer" in-map-name="inputMap"/>
                                    <calculate field-name="quantityNotTransferred">
                                        <calcop operator="subtract" field-name="quantityNotTransferred">
                                            <calcop operator="get" field-name="inputMap.xferQty"/>
                                        </calcop>
                                    </calculate>
                                </if-compare>
                            </then>
                        </if>
                    </iterate>
                </if-compare>
            </else>
        </if-compare>

        <field-to-result field-name="quantityNotTransferred"/>
    </simple-method>
    
    <!-- Inventory Label Services -->
    <simple-method method-name="createInventoryItemLabelType" short-description="Create an InventoryItemLabelType">
        <make-value entity-name="InventoryItemLabelType" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>   
    <simple-method method-name="updateInventoryItemLabelType" short-description="Update an InventoryItemLabelType">
        <entity-one entity-name="InventoryItemLabelType" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteInventoryItemLabelType" short-description="Delete an InventoryItemLabelType">
        <entity-one entity-name="InventoryItemLabelType" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="createInventoryItemLabel" short-description="Create an InventoryItemLabel">
        <make-value entity-name="InventoryItemLabel" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>   
    <simple-method method-name="updateInventoryItemLabel" short-description="Update an InventoryItemLabel">
        <entity-one entity-name="InventoryItemLabel" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteInventoryItemLabel" short-description="Delete an InventoryItemLabel">
        <entity-one entity-name="InventoryItemLabel" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="createInventoryItemLabelAppl" short-description="Create an InventoryItemLabelAppl">
        <make-value entity-name="InventoryItemLabelAppl" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <entity-one entity-name="InventoryItemLabel" value-name="inventoryItemLabel"/>
        <set field="newEntity.inventoryItemLabelTypeId" from-field="inventoryItemLabel.inventoryItemLabelTypeId"/>
        <create-value value-name="newEntity"/>
    </simple-method>   
    <simple-method method-name="updateInventoryItemLabelAppl" short-description="Update an InventoryItemLabel">
        <entity-one entity-name="InventoryItemLabelAppl" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteInventoryItemLabelAppl" short-description="Delete an InventoryItemLabel">
        <entity-one entity-name="InventoryItemLabelAppl" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    
    <!-- Test Physical Inventory Adjustment -->
    <simple-method method-name="testPhysicalInventoryAdjustment" short-description="Test to create physical inventory and variance" login-required="false">
        <log level="info" message="====================Create physical inventory and variance test case================================"/>
        <set field="createPhysicalInventoryAndVarianceMap.inventoryItemId" value="9024"/>
        <set field="createPhysicalInventoryAndVarianceMap.varianceReasonId" value="VAR_LOST"/>
        <entity-one entity-name="UserLogin" value-name="createPhysicalInventoryAndVarianceMap.userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <call-service service-name="createPhysicalInventoryAndVariance" in-map-name="createPhysicalInventoryAndVarianceMap">
            <result-to-field result-name="physicalInventoryId" field-name="physicalInventoryId"/>
        </call-service>
        <assert>
            <not>
                <if-empty field-name="physicalInventoryId">
                    <log level="info" message="========physicalInventoryId ${physicalInventoryId} found null============================"/>
                </if-empty>
            </not>
        </assert>
        <check-errors/>
    </simple-method>
</simple-methods>
