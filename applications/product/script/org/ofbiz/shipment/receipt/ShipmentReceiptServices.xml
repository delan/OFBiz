<?xml version="1.0" encoding="UTF-8" ?>
<!--
 *  Copyright (c) 2001-2005 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author     Andy Zeneski (jaz@ofbiz.org)
 * @version    $Rev$
 * @since      2.0
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">
	<simple-method method-name="createShipmentReceipt" short-description="Create a ShipmentReceipt">
		<check-permission permission="FACILITY" action="_CREATE"><fail-message message="Security Error: to run createShipmentReceipt you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/></check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentReceipt"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        
        <sequenced-id-to-env sequence-name="ShipmentReceipt" env-name="receiptId"/>
        <to-string field-name="receiptId"/>
        <set field="newEntity.receiptId" from-field="receiptId"/>       
        <field-to-result field-name="receiptId" result-name="receiptId"/>
        
        <if-empty field-name="datetimeReceived" map-name="newEntity">
            <now-timestamp-to-env env-name="nowTimestamp"/>
            <set field="newEntity.datetimeReceived" from-field="nowTimestamp"/>
        </if-empty>

        <set field="newEntity.receivedByUserLoginId" from-field="userLogin.userLoginId"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    
    <simple-method method-name="createShipmentReceiptRole" short-description="Create a ShipmentReceipt Role">
		<check-permission permission="FACILITY" action="_CREATE"><fail-message message="Security Error: to run createShipmentReceiptRole you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/></check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ShipmentReceiptRole"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
                        
        <create-value value-name="newEntity"/>
    </simple-method>
    
    <simple-method method-name="removeShipmentReceiptRole" short-description="Remove a ShipmentReceipt Role">
        <check-permission permission="FACILITY" action="_DELETE"><fail-message message="Security Error: to run removeShipmentReceiptRole you must have the FACILITY_DELETE or FACILITY_ADMIN permission"/></check-permission>
        <check-errors/>

        <make-value value-name="lookupPKMap" entity-name="ShipmentReceiptRole"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentReceiptRole" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>   
    
    <simple-method method-name="prepareInventoryReceipt" short-description="Prepare Inventory Receipt">
		<check-permission permission="FACILITY" action="_CREATE"><fail-message message="Security Error: to run prepareInventoryReceipt you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/></check-permission>
        <check-errors/>
        
        <if-compare value="NON_SERIAL_INV_ITEM" operator="equals" field-name="inventoryItemTypeId" map-name="parameters">
        	<field-to-result field-name="quantityAccepted" map-name="parameters" result-name="quantityOnHandDiff"/>
        	<field-to-result field-name="quantityAccepted" map-name="parameters" result-name="availableToPromiseDiff"/>
        </if-compare>
	</simple-method>
    
    <simple-method method-name="quickReceiveReturn" short-description="Quick Receive Entire Return">
        <check-permission permission="FACILITY" action="_CREATE"><fail-message message="Security Error: to run quickReceiveReturn you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/></check-permission>
        <check-errors/>

        <entity-one entity-name="ReturnHeader" value-name="returnHeader">
            <field-map field-name="returnId" env-name="parameters.returnId"/>
        </entity-one>

        <if-compare field-name="needsInventoryReceive" map-name="returnHeader" operator="equals" value="Y">
            <!-- before receiving inventory, check to see if there is inventory information in this database -->
            <entity-count entity-name="InventoryItem" count-name="iiCount">
                <condition-expr field-name="facilityId" operator="equals" env-name="returnHeader.destinationFacilityId"/>
            </entity-count>

            <if-compare field-name="iiCount" operator="greater" value="0" type="Double">
                <entity-condition entity-name="ReturnItem" list-name="returnItems">
                    <condition-expr field-name="returnId" operator="equals" env-name="returnHeader.returnId"/>
                </entity-condition>

                <!-- if no inventory item type specified, get default from facility -->
                <if-empty field-name="inventoryItemTypeId" map-name="parameters">
                    <get-related-one value-name="returnHeader" relation-name="Facility" to-value-name="facility"/>
                    <set from-field="facility.defaultInventoryItemTypeId" field="parameters.inventoryItemTypeId"/>
                </if-empty>

                <now-timestamp-to-env env-name="nowTimestamp"/>
                <iterate entry-name="returnItem" list-name="returnItems">
                    <if-empty field-name="expectedItemStatus" map-name="returnItem">
                        <set value="INV_RETURNED" field="returnItem.expectedItemStatus" type="String"/>
                    </if-empty>
                    <get-related-one value-name="returnItem" relation-name="OrderItem" to-value-name="orderItem"/>
                    <if-not-empty field-name="productId" map-name="orderItem">
                        <set field="costCtx.returnItemSeqId" from-field="returnItem.returnItemSeqId"/>
                        <set field="costCtx.returnId" from-field="returnItem.returnId"/>
                        <call-service service-name="getReturnItemInitialCost" in-map-name="costCtx">
                            <result-to-field result-name="initialItemCost" field-name="receiveCtx.unitCost"/>
                        </call-service>

                        <set from-field="parameters.inventoryItemTypeId" field="receiveCtx.inventoryItemTypeId"/>
                        <set from-field="returnItem.expectedItemStatus" field="receiveCtx.statusId"/>
                        <set from-field="orderItem.productId" field="receiveCtx.productId"/>
                        <set from-field="returnItem.returnItemSeqId" field="receiveCtx.returnItemSeqId"/>
                        <set from-field="returnItem.returnId" field="receiveCtx.returnId"/>
                        <set from-field="returnItem.returnQuantity" field="receiveCtx.quantityAccepted"/>
                        <set from-field="returnHeader.destinationFacilityId" field="receiveCtx.facilityId"/>

                        <set value="Returned Item RA# ${returnItem.returnId}" field="receiveCtx.comments"/>
                        <set from-field="nowTimestamp" field="receiveCtx.datetimeReceived"/>

                        <calculate field-name="quantityRejected" map-name="receiveCtx" type="Double">
                            <number value="0"/>
                        </calculate>

                        <call-service service-name="receiveInventoryProduct" in-map-name="receiveCtx"/>
                    </if-not-empty>
                </iterate>

                <!-- now that the receive is done; set the need flag to N -->
                <refresh-value value-name="returnHeader"/>
                <set field="returnHeader.needsInventoryReceive" value="N"/>
                <store-value value-name="returnHeader"/>
            <else>
                <log level="info" message="Not receiving inventory for returnId ${returnHeader.returnId}, no inventory information available."/>
            </else>
            </if-compare>
        </if-compare>
    </simple-method>

</simple-methods>
