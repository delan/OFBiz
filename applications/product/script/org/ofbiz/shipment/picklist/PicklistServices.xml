<?xml version="1.0" encoding="UTF-8" ?>
<!--
 *  Copyright (c) 2003-2005 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author     David E. Jones (jonesde@ofbiz.org)
 * @version    $Rev$
 * @since      2.2
 -->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">
    <simple-method method-name="findOrdersToPickMove" short-description="Find Orders Ready to Pick or that need Stock Moves">
        <!-- filter on:
         + OrderHeader.orderType = SALES_ORDER
         + OrderHeader.statusId = ORDER_APPROVED
         + OrderItem.statusId = ITEM_APPROVED
         + total number of orders to pick: limit to X
         + OrderItemShipGroup.shipmentMethodTypeId = group by
         + ShipmentMethodType.sequenceNum = order display of methods by
         x OrderItemShipGroup.carrierPartyId = group by along with ship method?
         + OrderItemShipGroup.shipAfterDate is null or <= now
         + OrderItemShipGroup.maySplit = decide to include based on whether all items available or not
         x OrderItemShipGrpInvRes.reservedDatetime = sort by, or by order date?
         + OrderItemShipGrpInvRes.quantityNotAvailable = if not null and not 0, and maySplit is N, exclude whole order
         + OrderItemShipGrpInvRes.pickStartDate = if not null already being picked, set when creating the pick list
         + InventoryItem.facilityId = passed facilityId
         + FacilityLocation.locationTypeEnumId = FLT_PICKLOC, can be picked now
         + FacilityLocation.locationTypeEnumId = FLT_BULK, stock move needed, remove whole order from list to be picked, add to list needing stock move
        -->
        <!-- data to create - in Map in List pickMoveByShipmentMethodInfoList
         + shipmentMethodType
         + orderReadyToPickInfoList
         + orderNeedsStockMoveInfoList
         With each list containing a Map with:
         + orderHeader
         + orderItemShipGroup
         + orderItemAndShipGroupAssocList
         + orderItemShipGrpInvResList
         + orderItemShipGrpInvResInfoList
         Each entry in the orderItemShipGrpInvResInfoList is a Map with:
         + orderItemShipGrpInvRes
         + inventoryItem
         + facilityLocation (may be null)
        -->

        <check-permission permission="FACILITY" action="_VIEW">
            <fail-message message="Security Error: to run getPicklistData you must have the FACILITY_VIEW or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <now-timestamp-to-env env-name="nowTimestamp"/>

        <string-to-field string="SALES_ORDER" field-name="orderTypeId" map-name="orderHeaderLkpMp"/>
        <string-to-field string="ORDER_APPROVED" field-name="statusId" map-name="orderHeaderLkpMp"/>
        <string-to-list string="+orderDate" list-name="orderHeaderOrdLst"/><!-- oldest first -->
        <find-by-and list-name="orderHeaderList" entity-name="OrderHeader" map-name="orderHeaderLkpMp" order-by-list-name="orderHeaderOrdLst"/>

        <iterate entry-name="orderHeader" list-name="orderHeaderList">
            <!-- get all ship groups, and iterate over them for each order -->
            <entity-and entity-name="OrderItemShipGroup" list-name="orderItemShipGroupList">
                <field-map field-name="orderId" env-name="orderHeader.orderId"/>
                <order-by field-name="shipGroupSeqId"/>
            </entity-and>

            <iterate entry-name="orderItemShipGroup" list-name="orderItemShipGroupList">
                <!-- get the order items and the order item inventory res entries -->
                
                <!-- if a shipmentMethodTypeId was not passed or is the same as the current, then process this order -->
                <if>
                    <condition>
                        <and>
                            <!-- only pick if it is the right shipmentMethodTypeId, if one was passed in -->
                            <or>
                                <if-empty field-name="parameters.shipmentMethodTypeId"/>
                                <if-compare-field field-name="parameters.shipmentMethodTypeId" operator="equals" to-field-name="orderItemShipGroup.shipmentMethodTypeId"/>
                            </or>
                            <!-- only pick if now is after the shipAfterDate or the shipAfterDate is empty -->
                            <or>
                                <if-empty field-name="orderItemShipGroup.shipAfterDate"/>
                                <if-compare-field field-name="nowTimestamp" operator="greater-equals" to-field-name="orderItemShipGroup.shipAfterDate"/>
                            </or>
                        </and>
                    </condition>
                    <then>
                        <!-- get only for current OrderItemShipGroup -->
                        <entity-and entity-name="OrderItemShipGrpInvRes" list-name="orderItemShipGrpInvResList">
                            <field-map field-name="orderId" env-name="orderItemShipGroup.orderId"/>
                            <field-map field-name="shipGroupSeqId" env-name="orderItemShipGroup.shipGroupSeqId"/>
                        </entity-and>
                        <entity-and entity-name="OrderItemAndShipGroupAssoc" list-name="orderItemAndShipGroupAssocList">
                            <field-map field-name="orderId" env-name="orderItemShipGroup.orderId"/>
                            <field-map field-name="shipGroupSeqId" env-name="orderItemShipGroup.shipGroupSeqId"/>
                            <order-by field-name="+orderItemSeqId"/>
                        </entity-and>
    
                        <!-- only add to picklist if inventory is not available (quantityNotAvailable on OISGIR greater than 0) when maySplit is N (wait until all available to ship) -->
                        <string-to-field string="Y" field-name="pickThisOrder"/>
                        <string-to-field string="N" field-name="needsStockMove"/>
                        <string-to-field string="Y" field-name="allPickStarted"/>
                        <iterate entry-name="orderItemShipGrpInvRes" list-name="orderItemShipGrpInvResList">
                            <if-compare field-name="pickThisOrder" operator="equals" value="Y">
                                <get-related-one value-name="orderItemShipGrpInvRes" relation-name="InventoryItem" to-value-name="inventoryItem"/>
                                <!-- if all orderItemShipGrpInvRes.pickStartDate are set, don't include order as a pick candidate; keep a flag to see -->
                                <if-empty field-name="orderItemShipGrpInvRes.pickStartDate">
                                    <!-- note that this is separate because we can't really use it as a break condition, must check all of them before any useful information is to be had -->
                                    <string-to-field string="N" field-name="allPickStarted"/>
    
                                    <if>
                                        <condition>
                                            <or>
                                                <!-- check all OISGIRs and if quantityNotAvailable is not empty and > 0 for any, don't pick order -->
                                                <and>
                                                    <if-compare field-name="maySplit"  map-name="orderItemShipGroup" operator="equals" value="N"/>
                                                    <not><if-empty field-name="orderItemShipGrpInvRes.quantityNotAvailable"/></not>
                                                    <if-compare field-name="orderItemShipGrpInvRes.quantityNotAvailable" operator="greater" value="0" type="Double"/>
                                                </and>
                                                <!-- make sure the inventoryItem is in the specified facility -->
                                                <if-compare-field field-name="parameters.facilityId" operator="not-equals" to-field-name="inventoryItem.facilityId"/>
                                            </or>
                                        </condition>
                                        <then>
                                            <string-to-field string="N" field-name="pickThisOrder"/>
                                        </then>
                                        <else>
                                            <!-- check InventoryItem->FacilityLocation (if exists), if it is of type FLT_BULK set needs stock move to true -->
                                            <get-related-one value-name="inventoryItem" relation-name="FacilityLocation" to-value-name="facilityLocation"/>
                                            <if-not-empty field-name="facilityLocation">
                                                <if-compare field-name="facilityLocation.locationTypeEnumId" operator="equals" value="FLT_BULK">
                                                    <string-to-field string="Y" field-name="needsStockMove"/>
                                                </if-compare>
                                            </if-not-empty>
    
                                            <!-- make the orderItemShipGrpInvResInfo and add it to the orderItemShipGrpInvResInfoList -->
                                            <env-to-env env-name="orderItemShipGrpInvRes" to-env-name="orderItemShipGrpInvResInfo.orderItemShipGrpInvRes"/>
                                            <env-to-env env-name="inventoryItem" to-env-name="orderItemShipGrpInvResInfo.inventoryItem"/>
                                            <env-to-env env-name="facilityLocation" to-env-name="orderItemShipGrpInvResInfo.facilityLocation"/>
                                            <field-to-list field-name="orderItemShipGrpInvResInfo" list-name="orderItemShipGrpInvResInfoList"/>
                                            <clear-field field-name="orderItemShipGrpInvResInfo"/>
                                        </else>
                                    </if>
                                </if-empty>
                            </if-compare>
                        </iterate>
    
                        <if>
                            <condition>
                                <and>
                                    <if-compare field-name="pickThisOrder" operator="equals" value="Y"/>
                                    <if-compare field-name="allPickStarted" operator="equals" value="N"/>
                                </and>
                            </condition>
                            <then>
                                <!-- make the info map for this orderHeader -->
                                <env-to-env env-name="orderHeader" to-env-name="orderHeaderInfo.orderHeader"/>
                                <env-to-env env-name="orderItemShipGroup" to-env-name="orderHeaderInfo.orderItemShipGroup"/>
                                <env-to-env env-name="orderItemAndShipGroupAssocList" to-env-name="orderHeaderInfo.orderItemAndShipGroupAssocList"/>
                                <env-to-env env-name="orderItemShipGrpInvResList" to-env-name="orderHeaderInfo.orderItemShipGrpInvResList"/>
                                <env-to-env env-name="orderItemShipGrpInvResInfoList" to-env-name="orderHeaderInfo.orderItemShipGrpInvResInfoList"/>
    
                                <!-- pick now, or needs stock move first? -->
                                <!-- put in pick or move lists for the given shipmentMethodTypeId -->
                                <env-to-env env-name="orderItemShipGroup.shipmentMethodTypeId" to-env-name="shipmentMethodTypeId"/>
                                <if-empty field-name="pickMoveByShipmentMethodInfoMap.${shipmentMethodTypeId}">
                                    <get-related-one value-name="orderItemShipGroup" relation-name="ShipmentMethodType" to-value-name="pickMoveByShipmentMethodInfoMap.${shipmentMethodTypeId}.shipmentMethodType"/>
                                </if-empty>
                                <if-compare field-name="needsStockMove" operator="equals" value="Y">
                                    <field-to-list field-name="orderHeaderInfo" list-name="pickMoveByShipmentMethodInfoMap.${shipmentMethodTypeId}.orderNeedsStockMoveInfoList"/>
                                <else>
                                    <field-to-list field-name="orderHeaderInfo" list-name="pickMoveByShipmentMethodInfoMap.${shipmentMethodTypeId}.orderReadyToPickInfoList"/>
                                </else>
                                </if-compare>
                                <clear-field field-name="orderHeaderInfo"/>
                            </then>
                        </if>
    
                        <clear-field field-name="orderItemAndShipGroupAssocList"/>
                        <clear-field field-name="orderItemShipGrpInvResInfoList"/>
                    </then>
                </if>
            </iterate>

            <clear-field field-name="orderHeaderInfo"/>
            <clear-field field-name="orderItemShipGroupList"/>
        </iterate>

        <!-- find all ShipmentMethodType in order by sequenceNum, for each one get the value from the pickMoveByShipmentMethodInfoMap and add it to the pickMoveByShipmentMethodInfoList -->
        <string-to-list string="+sequenceNum" list-name="shipmentMethodTypeOrdLst"/>
        <find-by-and list-name="shipmentMethodTypeList" entity-name="ShipmentMethodType" map-name="" order-by-list-name="shipmentMethodTypeOrdLst"/>
        <iterate entry-name="shipmentMethodType" list-name="shipmentMethodTypeList">
            <if-not-empty field-name="pickMoveByShipmentMethodInfoMap.${shipmentMethodType.shipmentMethodTypeId}">
                <field-to-list field-name="pickMoveByShipmentMethodInfoMap.${shipmentMethodType.shipmentMethodTypeId}" list-name="pickMoveByShipmentMethodInfoList"/>
            </if-not-empty>
        </iterate>

        <field-to-result field-name="pickMoveByShipmentMethodInfoList"/>
    </simple-method>

    <simple-method method-name="getPicklistData" short-description="Get Picklist Data">
        <!--
            Parameters:
                facilityId
                shipmentMethodTypeId
                maxNumberOfOrders
            Returns:
                facilityLocationInfoList: List of Maps with facilityLocation, productInfoList, being a List of Maps with product, quantity, inventoryItemList, orderItemList
                inventoryItemInfoList: List of Maps with inventoryItem, facilityLocation, orderItems, product, statusItem, quantity
                orderHeaderInfoList: List of Maps with orderHeader and orderItemInfoList which is List of Maps with orderItem, product and orderItemShipGrpInvResList
                wrongQuantityReservedList: List of Maps with reservedQuantity and orderItem
                insufficientQohList: List of Maps with inventoryItem and quantityNeeded
        -->

        <check-permission permission="FACILITY" action="_VIEW">
            <fail-message message="Security Error: to run getPicklistData you must have the FACILITY_VIEW or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run getPicklistData you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <now-timestamp-to-env env-name="nowTimestamp"/>

        <set-service-fields map-name="parameters" service-name="findOrdersToPickMove" to-map-name="findOrdersToPickMoveMap"/>
        <call-service service-name="findOrdersToPickMove" in-map-name="findOrdersToPickMoveMap">
            <result-to-field result-name="pickMoveByShipmentMethodInfoList"/>
        </call-service>

        <!-- This creates orderHeaderInfoList, wrongQuantityReservedList, insufficientQohList and inventoryItems, inventoryItemOrderItems, inventoryItemQuantities -->
        <call-simple-method method-name="assembleOrderHeaderInfoInline"/>

        <!-- This creates facilityLocationInfoList and inventoryItemInfoList -->
        <call-simple-method method-name="assembleFacilityLocationInfoInline"/>

        <field-to-result field-name="orderHeaderInfoList"/>
        <field-to-result field-name="wrongQuantityReservedList"/>
        <field-to-result field-name="insufficientQohList"/>

        <field-to-result field-name="facilityLocationInfoList"/>
        <field-to-result field-name="inventoryItemInfoList"/>
    </simple-method>

    <simple-method method-name="assembleOrderHeaderInfoInline" short-description="assembleOrderHeaderInfoInline">
        <!-- This uses pickMoveByShipmentMethodInfoList from the findOrdersToPickMove -->
        <!-- This creates orderHeaderInfoList, wrongQuantityReservedList, insufficientQohList and inventoryItems, inventoryItemOrderItems, inventoryItemQuantities -->

        <!-- if maxNumberOfOrders is passed, get at most that many orders and go over them -->
        <calculate field-name="numberSoFar" type="Long"><number value="0"/></calculate>
        <iterate entry-name="pickMoveByShipmentMethodInfo" list-name="pickMoveByShipmentMethodInfoList">
            <if>
                <condition>
                    <or>
                        <if-empty field-name="parameters.maxNumberOfOrders"/>
                        <if-compare-field field-name="numberSoFar" operator="less" to-field-name="parameters.maxNumberOfOrders"></if-compare-field>
                    </or>
                </condition>
                <then>
                    <field-to-list field-name="pickMoveByShipmentMethodInfo" list-name="limitedPickMoveByShipmentMethodInfoList"/>
                </then>
            </if>

            <calculate field-name="numberSoFar" type="Long">
                <calcop field-name="numberSoFar" operator="add"><number value="1"/></calcop>
            </calculate>
        </iterate>

        <iterate entry-name="pickMoveByShipmentMethodInfo" list-name="limitedPickMoveByShipmentMethodInfoList">
            <iterate entry-name="orderReadyToPickInfo" list-name="pickMoveByShipmentMethodInfo.orderReadyToPickInfoList">
                <iterate entry-name="orderItemAndShipGroupAssoc" list-name="orderReadyToPickInfo.orderItemAndShipGroupAssocList">
                    <if-compare value="ITEM_APPROVED" operator="equals" field-name="orderItemAndShipGroupAssoc.statusId">
                        <calculate field-name="reservedQuantity" type="Double"><number value="0"/></calculate>

                        <field-to-field field-name="orderItemSeqId" map-name="orderItemAndShipGroupAssoc" to-map-name="itemFilterMap"/>
                        <filter-list-by-and to-list-name="perItemResList" map-name="itemFilterMap" list-name="orderReadyToPickInfo.orderItemShipGrpInvResList"/>
                        <iterate entry-name="orderItemShipGrpInvRes" list-name="perItemResList">
                            <field-to-env field-name="inventoryItemId" map-name="orderItemShipGrpInvRes"/>
                            <!-- update reserved quantity per inventoryItem, keep track of orderItems this came from -->
                            <field-to-env field-name="${inventoryItemId}" map-name="inventoryItems" env-name="inventoryItem"/>
                            <if-empty field-name="inventoryItem">
                                <env-to-field env-name="inventoryItemId" map-name="invItmLookupMap"/>
                                <find-by-primary-key value-name="inventoryItem" entity-name="InventoryItem" map-name="invItmLookupMap"/>
                                <env-to-field env-name="inventoryItem" field-name="${inventoryItemId}" map-name="inventoryItems"/>
                            </if-empty>

                            <if-compare-field field-name="inventoryItem.facilityId" operator="equals" to-field-name="parameters.facilityId">
                                <field-to-list field-name="orderItemShipGrpInvRes" list-name="perItemResListValid"/>

                                <field-to-env field-name="${inventoryItemId}" map-name="inventoryItemOrderItems" env-name="inventoryItemOrderItemList"/>
                                <field-to-list field-name="orderItemAndShipGroupAssoc" list-name="inventoryItemOrderItemList"/>
                                <env-to-field env-name="inventoryItemOrderItemList" field-name="${orderItemShipGrpInvRes.inventoryItemId}" map-name="inventoryItemOrderItems"/>
                                <clear-field field-name="inventoryItemOrderItemList"/>
                                <if-not-empty field-name="inventoryItemQuantities.${inventoryItemId}">
                                    <calculate field-name="inventoryItemQuantities.${inventoryItemId}" type="Double">
                                        <calcop field-name="inventoryItemQuantities.${inventoryItemId}" operator="add">
                                            <calcop field-name="orderItemShipGrpInvRes.quantity" operator="get"/>
                                        </calcop>
                                    </calculate>
                                <else>
                                    <env-to-field env-name="orderItemShipGrpInvRes.quantity" field-name="inventoryItemQuantities.${inventoryItemId}"/>
                                </else>
                                </if-not-empty>
                            </if-compare-field>
                            <clear-field field-name="inventoryItem"/>
                            <!-- update total quantity reserved, picked, etc per line item to check to see if all and not more is reserved -->
                            <calculate field-name="reservedQuantity" type="Double">
                                <calcop field-name="reservedQuantity" operator="add">
                                    <calcop field-name="orderItemShipGrpInvRes.quantity" operator="get"/>
                                </calcop>
                            </calculate>

                            <!-- if setPickStartedDate == "Y" then set the OrderItemShipGrpInvRes.pickStartDate to now -->
                            <if-compare field-name="parameters.setPickStartedDate" operator="equals" value="Y">
                                <env-to-env env-name="nowTimestamp" to-env-name="orderItemShipGrpInvRes.pickStartDate"/>
                                <store-value value-name="orderItemShipGrpInvRes"/>
                            </if-compare>
                        </iterate>

                        <if-not-empty field-name="perItemResListValid">
                            <clear-field field-name="orderItemInfo"/>
                            <env-to-env env-name="orderItemAndShipGroupAssoc" to-env-name="orderItemInfo.orderItemAndShipGroupAssoc"/>
                            <env-to-env env-name="perItemResListValid" to-env-name="orderItemInfo.orderItemShipGrpInvResList"/>
                            <get-related-one value-name="orderItemAndShipGroupAssoc" relation-name="Product" to-value-name="orderItemInfo.product"/>
                            <field-to-list field-name="orderItemInfo" list-name="orderItemInfoList"/>
                        </if-not-empty>
                        <clear-field field-name="perItemResListValid"/>

                        <!-- warn if wrong inventory has been reserved+issued -->
                        <!-- must include issued items as well, otherwise can't really do an effective check... -->
                        <get-related value-name="orderItemAndShipGroupAssoc" relation-name="ItemIssuance" list-name="itemIssuances"/>
                        <calculate field-name="issuedQuantity" type="Double"><number value="0"/></calculate>
                        <iterate entry-name="itemIssuance" list-name="itemIssuances">
                            <calculate field-name="issuedQuantity" type="Double">
                                <calcop field-name="issuedQuantity" operator="add">
                                    <calcop field-name="itemIssuance.quantity" operator="get"/>
                                </calcop>
                            </calculate>
                        </iterate>
                        <calculate field-name="reservedIssuedQuantity">
                            <calcop operator="add">
                                <calcop operator="get" field-name="reservedQuantity"/>
                                <calcop operator="get" field-name="issuedQuantity"/>
                            </calcop>
                        </calculate>
                        <if-compare-field field-name="reservedIssuedQuantity" operator="not-equals" to-field-name="orderItemAndShipGroupAssoc.quantity" type="Double">
                            <env-to-field env-name="orderItemAndShipGroupAssoc" map-name="wrongQuantityReserved"/>
                            <env-to-field env-name="reservedQuantity" map-name="wrongQuantityReserved"/>
                            <env-to-field env-name="issuedQuantity" map-name="wrongQuantityReserved"/>
                            <env-to-field env-name="reservedIssuedQuantity" map-name="wrongQuantityReserved"/>
                            <field-to-list field-name="wrongQuantityReserved" list-name="wrongQuantityReservedList"/>
                            <clear-field field-name="wrongQuantityReserved"/>
                        </if-compare-field>
                    </if-compare>
                </iterate>

                <!-- keep the order info for easy handling of order pack info -->
                <if-not-empty field-name="orderItemInfoList">
                    <env-to-env env-name="orderReadyToPickInfo.orderHeader" to-env-name="orderHeaderInfo.orderHeader"/>
                    <env-to-field env-name="orderItemInfoList" map-name="orderHeaderInfo"/>
                    <field-to-list field-name="orderHeaderInfo" list-name="orderHeaderInfoList"/>
                </if-not-empty>

                <clear-field field-name="orderHeaderInfo"/>
                <clear-field field-name="orderItemInfoList"/>
            </iterate>
        </iterate>


        <!-- warn if insufficient QOH for reserved amount -->
        <iterate-map map-name="inventoryItemQuantities" key-name="inventoryItemId" value-name="quantityNeeded">
            <env-to-env env-name="inventoryItems.${inventoryItemId}" to-env-name="inventoryItem"/>
            <if>
                <condition>
                    <and>
                        <if-compare value="1" operator="less-equals" field-name="quantityNeeded" type="Double"/>
                        <or>
                            <and>
                                <if-compare value="SERIALIZED_INV_ITEM" operator="equals" field-name="inventoryItem.inventoryItemTypeId"/>
                                <if-compare value="1" operator="less" field-name="quantityNeeded" type="Double"/>
                            </and>
                            <and>
                                <if-compare value="NON_SERIAL_INV_ITEM" operator="equals" field-name="inventoryItem.inventoryItemTypeId"/>
                                <or>
                                    <if-empty field-name="inventoryItem.quantityOnHandTotal"/>
                                    <if-compare-field field-name="quantityNeeded" operator="greater" to-field-name="inventoryItem.quantityOnHandTotal" type="Double"/>
                                </or>
                            </and>
                        </or>
                    </and>
                </condition>
                <then>
                    <clear-field field-name="insufficientQoh"/>
                    <env-to-field env-name="inventoryItem" map-name="insufficientQoh"/>
                    <env-to-field env-name="quantityNeeded" map-name="insufficientQoh"/>
                    <field-to-list field-name="insufficientQoh" list-name="insufficientQohList"/>
                </then>
            </if>
        </iterate-map>
    </simple-method>
    
    <simple-method method-name="assembleFacilityLocationInfoInline" short-description="assembleFacilityLocationInfoInline">
        <!-- This uses inventoryItems, inventoryItemOrderItems, inventoryItemQuantities -->
        <!-- This creates facilityLocationInfoList and inventoryItemInfoList (and for internal use facilityLocationMap) -->

        <!-- go through all quantities and get inventoryItem and facilityLocation -->
        <iterate-map key-name="inventoryItemId" value-name="quantityNeeded" map-name="inventoryItemQuantities">
            <env-to-env env-name="inventoryItems.${inventoryItemId}" to-env-name="inventoryItem"/>

            <!-- create a list of locations, then sort it, will have to create a reverse Map to go from location to inventory item -->
            <clear-field field-name="facilityLocation"/>
            <get-related-one value-name="inventoryItem" relation-name="FacilityLocation" to-value-name="facilityLocation"/>
            <if-not-empty field-name="facilityLocation">
                <env-to-env env-name="facilityLocation" to-env-name="facilityLocationMap.${facilityLocation.locationSeqId}"/>
                <!-- support multiple invnetoryItemIds per facilityLocation.locationSeqId -->
                <clear-field field-name="inventoryItemIdList"/>
                <env-to-env env-name="inventoryItemsByLocation.${facilityLocation.locationSeqId}" to-env-name="inventoryItemIdList"/>
                <field-to-list field-name="inventoryItemId" list-name="inventoryItemIdList"/>
                <env-to-field env-name="inventoryItemIdList" to-env-name="inventoryItemsByLocation.${facilityLocation.locationSeqId}"/>
            <else>
                <field-to-list field-name="inventoryItemId" list-name="noLocationInventoryItemIds"/>
            </else>
            </if-not-empty>
        </iterate-map>

        <!-- make a facilityLocations List from the facilityLocationMap, which was used to guarantee uniqueness -->
        <iterate-map map-name="facilityLocationMap" key-name="locationSeqId" value-name="facilityLocation">
            <field-to-list field-name="facilityLocation" list-name="facilityLocations"/>
        </iterate-map>

        <!-- order the facilityLocations -->
        <string-to-list string="+areaId" list-name="facilityLocsOrdLst"/>
        <string-to-list string="+aisleId" list-name="facilityLocsOrdLst"/>
        <string-to-list string="+sectionId" list-name="facilityLocsOrdLst"/>
        <string-to-list string="+levelId" list-name="facilityLocsOrdLst"/>
        <string-to-list string="+positionId" list-name="facilityLocsOrdLst"/>
        <order-value-list list-name="facilityLocations" order-by-list-name="facilityLocsOrdLst"/>

        <!-- for each facility location add an entry to the inventoryItemInfoList -->
        <iterate entry-name="facilityLocation" list-name="facilityLocations">
            <!-- facilityLocationInfoList: facilityLocation, productInfoList (product, quantity, inventoryItemList, orderItemList) -->
            <clear-field field-name="facilityLocationInfo"/>
            <env-to-field env-name="facilityLocation" map-name="facilityLocationInfo"/>

            <!-- inventoryItemInfoList: facilityLocation, inventoryItem, orderItems, quantity, product, statusItems -->
            <env-to-env env-name="inventoryItemsByLocation.${facilityLocation.locationSeqId}" to-env-name="inventoryItemIdList"/>
            <iterate entry-name="inventoryItemId" list-name="inventoryItemIdList">
                <clear-field field-name="inventoryItemInfo"/>
                <env-to-field env-name="facilityLocation" map-name="inventoryItemInfo"/>
                <field-to-field field-name="inventoryItems.${inventoryItemId}" to-field-name="inventoryItemInfo.inventoryItem"/>
                <field-to-field field-name="inventoryItemOrderItems.${inventoryItemId}" to-field-name="inventoryItemInfo.orderItems"/>
                <field-to-field field-name="inventoryItemQuantities.${inventoryItemId}" to-field-name="inventoryItemInfo.quantity"/>
                <get-related-one value-name="inventoryItemInfo.inventoryItem" relation-name="Product" to-value-name="inventoryItemInfo.product"/>
                <get-related-one value-name="inventoryItemInfo.inventoryItem" relation-name="StatusItem" to-value-name="inventoryItemInfo.statusItem"/>

                <field-to-list field-name="inventoryItemInfo" list-name="inventoryItemInfoList"/>

                <!-- before destroying inventoryItemInfo, add info to the productInfoMap -->
                <env-to-env env-name="inventoryItemInfo.product" to-env-name="productInfoMap.${inventoryItemInfo.product.productId}.product"/>
                <calculate field-name="productInfoMap.${inventoryItemInfo.product.productId}.quantity" type="Double">
                    <calcop field-name="productInfoMap.${inventoryItemInfo.product.productId}.quantity" operator="get"/>
                    <calcop field-name="inventoryItemInfo.quantity" operator="get"/>
                </calculate>
                <field-to-list field-name="inventoryItemInfo.inventoryItem" list-name="productInfoMap.${inventoryItemInfo.product.productId}.inventoryItemList"/>
                <!-- put orderItems in Map by orderId:orderItemSeqId to make sure they are unique -->
                <iterate entry-name="orderItem" list-name="inventoryItemInfo.orderItems">
                    <env-to-env env-name="orderItem" to-env-name="orderItemMap.${orderItem.orderId}:${orderItem.orderItemSeqId}"/>
                </iterate>
            </iterate>

            <iterate-map key-name="orderItemCompositeId" value-name="orderItem" map-name="orderItemMap">
                <field-to-list field-name="orderItem" list-name="productInfoMap.${orderItem.productId}.orderItemList"/>
            </iterate-map>

            <!-- move all values from productInfoMap to facilityLocationInfo.productInfoList -->
            <iterate-map key-name="productId" value-name="productInfo" map-name="productInfoMap">
                <field-to-list field-name="productInfo" list-name="facilityLocationInfo.productInfoList"/>
            </iterate-map>

            <field-to-list field-name="facilityLocationInfo" list-name="facilityLocationInfoList"/>
            <clear-field field-name="orderItemMap"/>
            <clear-field field-name="productInfoMap"/>
        </iterate>

        <!-- add all noLocationInventoryItemIds to inventoryItemInfoList with all entries except facilityLocation -->
        <iterate entry-name="inventoryItemId" list-name="noLocationInventoryItemIds">
            <field-to-field field-name="${inventoryItemId}" map-name="inventoryItems" to-field-name="inventoryItem" to-map-name="inventoryItemInfo"/>
            <field-to-field field-name="${inventoryItemId}" map-name="inventoryItemOrderItems" to-field-name="orderItems" to-map-name="inventoryItemInfo"/>
            <field-to-field field-name="${inventoryItemId}" map-name="inventoryItemQuantities" to-field-name="quantity" to-map-name="inventoryItemInfo"/>
            <get-related-one value-name="inventoryItemInfo.inventoryItem" relation-name="Product" to-value-name="inventoryItemInfo.product"/>
            <get-related-one value-name="inventoryItemInfo.inventoryItem" relation-name="StatusItem" to-value-name="inventoryItemInfo.statusItem"/>

            <field-to-list field-name="inventoryItemInfo" list-name="inventoryItemInfoList"/>
            <clear-field field-name="inventoryItemInfo"/>
        </iterate>
    </simple-method>

    <simple-method method-name="clearPickStarted" short-description="Clear PickStarted Dates according to specified parameters">
        <check-permission permission="FACILITY" action="_UPDATE">
            <fail-message message="Security Error: to run getPicklistData you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value entity-name="OrderItemShipGrpInvRes" map-name="parameters" value-name="orderItemShipGrpInvResLkupValue"/>
        <find-by-and entity-name="OrderItemShipGrpInvRes" map-name="orderItemShipGrpInvResLkupValue" list-name="orderItemShipGrpInvResList"/>
        <iterate entry-name="orderItemShipGrpInvRes" list-name="orderItemShipGrpInvResList">
            <clear-field field-name="pickStartDate" map-name="orderItemShipGrpInvRes"/>
            <store-value value-name="orderItemShipGrpInvRes"/>
        </iterate>
    </simple-method>

    <!-- ========================================================= -->
    <!-- =========== Persisted Picklist Services ================= -->
    <!-- ========================================================= -->
    <simple-method method-name="createPicklistFromOrders" short-description="Create Picklist From Orders">
        <check-permission permission="FACILITY" action="_CREATE">
            <fail-message message="Security Error: to run createPicklistFromOrders you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>
        <!--
            <attribute name="facilityId" type="String" mode="IN" optional="false"/>
            <attribute name="shipmentMethodTypeId" type="String" mode="IN" optional="true"/>
            <attribute name="maxNumberOfOrders" type="Long" mode="IN" optional="true"/>
            <attribute name="picklistId" type="String" mode="OUT" optional="false"/>
        -->

        <now-timestamp-to-env env-name="nowTimestamp"/>

        <set-service-fields map-name="parameters" service-name="findOrdersToPickMove" to-map-name="findOrdersToPickMoveMap"/>
        <call-service service-name="findOrdersToPickMove" in-map-name="findOrdersToPickMoveMap">
            <result-to-field result-name="pickMoveByShipmentMethodInfoList"/>
        </call-service>

        <!-- This creates orderHeaderInfoList, wrongQuantityReservedList, insufficientQohList and inventoryItems, inventoryItemOrderItems, inventoryItemQuantities -->
        <call-simple-method method-name="assembleOrderHeaderInfoInline"/>

        <!-- TODO: if the orderHeaderInfoList is not empty, create a Picklist -->
        <if-not-empty field-name="orderHeaderInfoList">
            
            
            <!-- TODO: iterate over the orderHeaderInfoList and create a PicklistBin for each order and a PicklistItem for each item -->
            <iterate entry-name="orderHeaderInfo" list-name="orderHeaderInfoList">
                
            </iterate>
        <else>
            <!-- return error messages saying no orders ready to pick, not creating picklist -->
            <add-error><fail-message message="No orders ready to pick, not creating picklist."/></add-error>
            <check-errors/>
        </else>
        </if-not-empty>
    </simple-method>

</simple-methods>
