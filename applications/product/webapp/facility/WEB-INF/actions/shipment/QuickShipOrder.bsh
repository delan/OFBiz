/*
 *  Copyright (c) 2003-2005 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Rev$
 *@since      3.0
 */

import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.order.order.*;

facilityId = parameters.get("facilityId");
if (UtilValidate.isNotEmpty(facilityId)) {
    facility = delegator.findByPrimaryKey("Facility", UtilMisc.toMap("facilityId", facilityId));
    context.put("facilityId", facilityId);
    context.put("facility", facility);
}

orderId = parameters.get("orderId");
if (UtilValidate.isNotEmpty(orderId)) {
    orderHeader = delegator.findByPrimaryKey("OrderHeader", UtilMisc.toMap("orderId", orderId));
    if (orderHeader != null) {
        OrderReadHelper orh = new OrderReadHelper(orderHeader);
        context.put("orderId", orderId);
        context.put("orderHeader", orderHeader);
        context.put("orderReadHelper", orh);
    } else {
        request.setAttribute("_ERROR_MESSAGE_", "<li>Order #" + orderId + " cannot be found.");
    }
}

shipmentId = parameters.get("shipmentId");
if (UtilValidate.isNotEmpty(shipmentId)) {
    shipment = delegator.findByPrimaryKey("Shipment", UtilMisc.toMap("shipmentId", shipmentId));
    if (shipment != null) {
        // nuke event message - throws off the flow
        request.setAttribute("_EVENT_MESSAGE_", null);
        
        // set the shipment context info
        context.put("shipmentType", shipment.getRelatedOneCache("ShipmentType"));
        context.put("statusItem", shipment.getRelatedOne("StatusItem"));
        context.put("primaryOrderHeader", shipment.getRelatedOne("PrimaryOrderHeader"));
        context.put("toPerson", shipment.getRelatedOne("ToPerson"));
        context.put("toPartyGroup", shipment.getRelatedOne("ToPartyGroup"));
        context.put("fromPerson", shipment.getRelatedOne("FromPerson"));
        context.put("fromPartyGroup", shipment.getRelatedOne("FromPartyGroup"));
        context.put("originFacility", shipment.getRelatedOne("OriginFacility"));
        context.put("destinationFacility", shipment.getRelatedOne("DestinationFacility"));
        context.put("originPostalAddress", shipment.getRelatedOne("OriginPostalAddress"));
        context.put("destinationPostalAddress", shipment.getRelatedOne("DestinationPostalAddress"));
        context.put("shipmentPackages", shipment.getRelated("ShipmentPackage", null, UtilMisc.toList("shipmentPackageSeqId")));
        context.put("shipmentRoutes", shipment.getRelated("ShipmentRouteSegment", null, UtilMisc.toList("shipmentRouteSegmentId")));
        context.put("shipment", shipment);
        context.put("shipmentId", shipmentId);
        
        weightUoms = delegator.findByAnd("Uom", UtilMisc.toMap("uomTypeId", "WEIGHT_MEASURE"), UtilMisc.toList("description"));
        defaultWeightUom = UtilProperties.getPropertyValue("shipment.properties", "shipment.default.weight.uom");        
        if (UtilValidate.isNotEmpty(defaultWeightUom)) {
            defaultWeight = delegator.findByPrimaryKey("Uom", UtilMisc.toMap("uomId", defaultWeightUom));
            if (defaultWeight != null) {
                weightUoms.add(0, defaultWeight);
            }
        }
        context.put("weightUomList", weightUoms);
    }    
}
