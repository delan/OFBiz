/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Rev$
 *@since      2.2
 */
 
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;

delegator = request.getAttribute("delegator");
facilityId = request.getParameter("facilityId"); 
returnId = request.getParameter("returnId");

facility = null;
if (facilityId != null) {
    facility = delegator.findByPrimaryKey("Facility", UtilMisc.toMap("facilityId", facilityId));
}

returnHeader = null;
returnItems = null;
if (returnId != null) {
    returnHeader = delegator.findByPrimaryKey("ReturnHeader", UtilMisc.toMap("returnId", returnId));    
    if (returnHeader != null) {
        if (returnHeader.getString("statusId").equals("RETURN_ACCEPTED")) {
            returnItems = returnHeader.getRelated("ReturnItem");
        } else {
            request.setAttribute("_ERROR_MESSAGE_", "<li>This return is not yet accepted or already received.");
        }
    }
}

receivedQuantities = new HashMap();
if (returnItems != null && returnItems.size() > 0) {
    context.put("firstOrderItem", EntityUtil.getFirst(returnItems));
    context.put("returnItemsSize", returnItems.size());
    itemsIter = returnItems.iterator();
    while (itemsIter.hasNext()) {
        totalReceived = 0.0;
        thisItem = itemsIter.next();
        receipts = thisItem.getRelated("ShipmentReceipt");
        if (receipts != null && receipts.size() > 0) {
            recIter = receipts.iterator();
            while (recIter.hasNext()) {
                rec = recIter.next(); 
                accepted = rec.getDouble("quantityAccepted");
                rejected = rec.getDouble("quantityRejected");
                if (accepted != null)
                    totalReceived += accepted.doubleValue();
                if (rejected != null)
                    totalReceived += rejected.doubleValue();                                            
            }            
        }
        receivedQuantities.put(thisItem.getString("returnItemSeqId"), new Double(totalReceived));        
    }
}

receivedItems = null;
if (returnHeader != null) {
    receivedItems = delegator.findByAnd("ShipmentReceipt", UtilMisc.toMap("returnId", returnId));
    context.put("receivedItems", receivedItems);
}

// facilities
facilities = delegator.findAll("Facility");

//all possible inventory item types
inventoryItemTypes = delegator.findAllCache("InventoryItemType", UtilMisc.toList("description"));

context.put("facilityId", facilityId);
context.put("facility", facility);
context.put("returnHeader", returnHeader);
context.put("returnItems", returnItems);
context.put("receivedQuantities", receivedQuantities);
context.put("facilities", facilities);
context.put("inventoryItemTypes", inventoryItemTypes);
