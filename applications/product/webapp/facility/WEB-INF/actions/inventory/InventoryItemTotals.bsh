/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.util.*;
import javolution.util.FastList;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.transaction.*;

delegator = request.getAttribute("delegator");
dispatcher = request.getAttribute("dispatcher");

action = request.getParameter("action");

inventoryItemTotals = FastList.newInstance();
qohGrandTotal = 0.0;
atpGrandTotal = 0.0;
costPriceGrandTotal = 0.0;
retailPriceGrandTotal = 0.0;
totalCostPriceGrandTotal = 0.0;
totalRetailPriceGrandTotal = 0.0;
boolean beganTransaction = false;
if (action != null) {
    conditions = UtilMisc.toList(new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "INV_DELIVERED")); 
    conditions.add(new EntityExpr("statusId", EntityOperator.EQUALS, null));
    conditionList = new EntityConditionList(conditions, EntityOperator.OR);
    try {
        // create resultMap to stop issue with the first puts in the while loop
        resultMap = new HashMap();
        beganTransaction = TransactionUtil.begin();
        invItemListItr = delegator.findListIteratorByCondition("InventoryItem", conditionList, null, UtilMisc.toList("productId"));
        while ((inventoryItem = invItemListItr.next()) != null) {
            productId = inventoryItem.getString("productId");
            product = delegator.findByPrimaryKey("Product", UtilMisc.toMap("productId", productId));
            productFacility = delegator.findByPrimaryKey("ProductFacility", UtilMisc.toMap("productId", productId, "facilityId", facilityId));
            if (productFacility != null) {
                quantityOnHandTotal = inventoryItem.getDouble("quantityOnHandTotal");
                availableToPromiseTotal = inventoryItem.getDouble("availableToPromiseTotal");
                costPrice = inventoryItem.getDouble("unitCost");
                retailPrice = 0.0;
                productPrices = product.getRelated("ProductPrice");
                if (productPrices != null) {
                    productPriceItr = productPrices.iterator();
                    while (productPriceItr.hasNext()) {
                        productPrice = productPriceItr.next();
                        if (("DEFAULT_PRICE").equals(productPrice.getString("productPriceTypeId"))) {
                            retailPrice = productPrice.getDouble("price");
                        }
                    }
                }
                if(costPrice != null && quantityOnHandTotal != null){
                    totalCostPrice = costPrice * quantityOnHandTotal;
                    resultMap.put("totalCostPrice", totalCostPrice);
                    totalCostPriceGrandTotal += totalCostPrice;
                }
                if(retailPrice != null && quantityOnHandTotal != null){
                    totalRetailPrice = retailPrice * quantityOnHandTotal;
                    resultMap.put("totalRetailPrice", totalRetailPrice);
                    totalRetailPriceGrandTotal += totalRetailPrice;
                }
                if(quantityOnHandTotal != null){
                    qohGrandTotal += quantityOnHandTotal;
                }
                if(availableToPromiseTotal != null){
                    atpGrandTotal += availableToPromiseTotal;
                }
                if(costPrice != null){
                    costPriceGrandTotal += costPrice;
                }
                if(retailPrice != null){
                    retailPriceGrandTotal += retailPrice;
                }
                
                resultMap = UtilMisc.toMap("productId", product.getString("productId"), "quantityOnHand", quantityOnHandTotal, "availableToPromise", availableToPromiseTotal, 
                        "costPrice", costPrice, "retailPrice", retailPrice);
                inventoryItemTotals.add(resultMap);
            }
        }
        invItemListItr.close();
    } catch (GenericEntityException e) {
        String errMsg = "Failure in operation, rolling back transaction";
        Debug.logError(e, errMsg, "findInventoryItemsByLabels");
        try {
            // only rollback the transaction if we started one...
            TransactionUtil.rollback(beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError(e2, "Could not rollback transaction: " + e2.toString(), "findInventoryItemsByLabels");
        }
        // after rolling back, rethrow the exception
        throw e;
    } finally {
        // only commit the transaction if we started one... this will throw an exception if it fails
        TransactionUtil.commit(beganTransaction);
    }
    
}

inventoryItemGrandTotals = FastList.newInstance();
inventoryItemGrandTotals.add(UtilMisc.toMap("qohGrandTotal", qohGrandTotal, "atpGrandTotal", atpGrandTotal, 
        "totalCostPriceGrandTotal", totalCostPriceGrandTotal, "totalRetailPriceGrandTotal", totalRetailPriceGrandTotal));

context.put("inventoryItemTotals", inventoryItemTotals);
context.put("inventoryItemGrandTotals", inventoryItemGrandTotals);
