/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski
 *@author     Brad Steiner
 *@version    $Rev$
 *@since      2.2
 */
 
import java.util.*;
import java.io.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.widget.html.*;

delegator = request.getAttribute("delegator");

boolean tryEntity = true;
if(request.getAttribute("_ERROR_MESSAGE_") != null) tryEntity = false;

String facilityGroupId = request.getParameter("facilityGroupId");
if (UtilValidate.isEmpty(facilityGroupId) && UtilValidate.isNotEmpty((String) request.getAttribute("facilityGroupId"))) {
    facilityGroupId = (String) request.getAttribute("facilityGroupId");
}
if (facilityGroupId != null) context.put("facilityGroupId", facilityGroupId);

GenericValue facilityGroup = delegator.findByPrimaryKey("FacilityGroup", UtilMisc.toMap("facilityGroupId", facilityGroupId));
GenericValue facilityGroupType = null;
if(facilityGroup == null) {
    tryEntity = false;
} else {
    context.put("facilityGroup", facilityGroup);

    facilityGroupType = facilityGroup.getRelatedOne("FacilityGroupType");
    if (facilityGroupType != null) context.put("facilityGroupType", facilityGroupType);
}

// Facility Group types
List facilityGroupTypes = delegator.findAll("FacilityGroupType");
if (facilityGroupTypes != null) context.put("facilityGroupTypes", facilityGroupTypes);

// Facility Groups
List facilityGroups = delegator.findAll("FacilityGroup");
if (facilityGroups != null) context.put("facilityGroups", facilityGroups);
