/*
 *  Copyright (c) 2003-2006 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones (jonesde@ofbiz.org)
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Rev$
 *@since      2.1
 */

import org.ofbiz.base.util.*;
import org.ofbiz.product.catalog.*;
import org.ofbiz.product.feature.*;
import org.ofbiz.product.product.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;

module = "keywordsearch.bsh";

// note: this can be run multiple times in the same request without causing problems, will check to see on its own if it has run again
ProductSearchSession.processSearchParameters(parameters, request);
prodCatalogId = CatalogWorker.getCurrentCatalogId(request);
Map result = ProductSearchSession.getProductSearchResult(session, delegator, prodCatalogId);

applicationTypes = delegator.findAll("ProductFeatureApplType", UtilMisc.toList("description"));

//productCategories = delegator.findAll("ProductCategory", UtilMisc.toList("description"));
expr = new EntityExpr(new EntityExpr("showInSelect", EntityOperator.EQUALS, null),
        EntityOperator.OR,
        new EntityExpr("showInSelect", EntityOperator.NOT_EQUAL, "N"));
productCategories = delegator.findByCondition("ProductCategory", expr, null, UtilMisc.toList("description"));

context.put("applicationTypes", applicationTypes);
context.put("productCategories", productCategories);

context.put("productIds", result.get("productIds"));
context.put("viewIndex", result.get("viewIndex"));
context.put("viewSize", result.get("viewSize"));
context.put("listSize", result.get("listSize"));
context.put("lowIndex", result.get("lowIndex"));
context.put("highIndex", result.get("highIndex"));
context.put("searchCategory", result.get("searchCategory"));
context.put("searchConstraintStrings", result.get("searchConstraintStrings"));
context.put("searchSortOrderString", result.get("searchSortOrderString"));
