/*
 *  Copyright (c) 2003-2005 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones
 *@version    $Rev$
 *@since      3.5
 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;

List messageList = new LinkedList();

messageList.add("Loading Categories...");
UtilTimer ctimer = new UtilTimer();
messageList.add(ctimer.timerString("Before category find"));
EntityListIterator categories = delegator.findListIteratorByCondition("ProductCategory", null, null, null);
messageList.add(ctimer.timerString("Before load all categories into cache"));

GenericValue category = null;
long numCategories = 0;
while ((category = (GenericValue) categories.next()) != null) {
    delegator.putInPrimaryKeyCache(category.getPrimaryKey(), category);
    numCategories++;
}
categories.close();

messageList.add(ctimer.timerString("Finished Categories"));
messageList.add("Loaded " + numCategories + " Categories");

messageList.add("&nbsp;");

messageList.add("Loading Products...");
UtilTimer ptimer = new UtilTimer();
messageList.add(ptimer.timerString("Before product find"));
EntityListIterator products = delegator.findListIteratorByCondition("Product", null, null, null);
messageList.add(ptimer.timerString("Before load all products into cache"));
GenericValue product = null;
long numProducts = 0;
while ((product = (GenericValue) products.next()) != null) {
    delegator.putInPrimaryKeyCache(product.getPrimaryKey(), product);
    numProducts++;
}
products.close();

messageList.add(ptimer.timerString("Finished Products"));
messageList.add("Loaded " + numProducts + " products");

context.put("messageList", messageList);
