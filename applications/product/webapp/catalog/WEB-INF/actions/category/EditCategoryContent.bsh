/*
 *  Copyright (c) 2003-2005 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones
 *@author     Arukala
 *@author     Brad Steiner
 *@version    $Rev$
 *@since      2.2
 */

import org.ofbiz.base.util.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.entity.GenericValue;

if (productCategory != null) {
    productCategoryType = productCategory.getRelatedOne("ProductCategoryType");
    categoryContent = productCategory.getRelated("ProductCategoryContent", null, UtilMisc.toList("prodCatContentTypeId"));

    context.put("productCategoryType", productCategoryType);
    context.put("categoryContent", categoryContent);
}
//ProductCategoryTypes
productCategoryTypes = delegator.findAll("ProductCategoryType");
context.put("productCategoryTypes", productCategoryTypes);

// Start CategoryContent stuff
List categoryContentDatas = new LinkedList();
Iterator categoryContentIter = categoryContent.iterator();
while (categoryContentIter.hasNext()) {
    GenericValue categoryContent = (GenericValue) categoryContentIter.next();
    GenericValue content = categoryContent.getRelatedOne("Content");
    categoryContentDatas.add(UtilMisc.toMap("categoryContent", categoryContent, "content", content));
}


HtmlFormWrapper updateCategoryContentWrapper = new HtmlFormWrapper("/product/ProductForms.xml", "UpdateCategoryContentAssoc", request, response);
context.put("updateCategoryContentWrapper", updateCategoryContentWrapper);
updateCategoryContentWrapper.putInContext("categoryContentDatas", categoryContentDatas);

HtmlFormWrapper prepareAddCategoryContentWrapper = new HtmlFormWrapper("/product/ProductForms.xml", "PrepareAddCategoryContentAssoc", request, response);
context.put("prepareAddCategoryContentWrapper", prepareAddCategoryContentWrapper);

prepareAddCategoryContentWrapper.putInContext("productCategory", productCategory);


HtmlFormWrapper addCategoryContentWrapper = new HtmlFormWrapper("/product/ProductForms.xml", "AddCategoryContentAssoc", request, response);
context.put("addCategoryContentWrapper", addCategoryContentWrapper);
addCategoryContentWrapper.putInContext("productCategory", productCategory);

context.put("categoryContentList", categoryContentDatas);

// End ProductContent stuff

// UPLOADING STUFF
