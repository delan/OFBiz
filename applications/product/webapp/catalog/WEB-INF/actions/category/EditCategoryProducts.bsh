/*
 *  Copyright (c) 2003-2005 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones
 *@author     Brad Steiner
 *@version    $Rev$
 *@since      2.2
 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.transaction.*;

//default this to true, ie only show active
boolean activeOnly = !"false".equals(request.getParameter("activeOnly"));

context.put("activeOnly", activeOnly);

int viewIndex = 1;
int viewSize = 20;
int highIndex = 0;
int lowIndex = 0;
int listSize = 0;

try {
    viewIndex = Integer.valueOf((String) parameters.get("VIEW_INDEX")).intValue();
} catch (Exception e) {
    viewIndex = 1;
}

try {
    viewSize = Integer.valueOf((String) parameters.get("VIEW_SIZE")).intValue();
} catch (Exception e) {
    viewSize = 20;
}

if (productCategory != null) {
    boolean beganTransaction = false;
    try {
        beganTransaction = TransactionUtil.begin();
        
        mainCondList = UtilMisc.toList(new EntityExpr("productCategoryId", EntityOperator.EQUALS, productCategory.getString("productCategoryId")));
        if (activeOnly) {
            mainCondList.add(new EntityExpr("fromDate", EntityOperator.LESS_THAN_EQUAL_TO, nowTimestamp));
            mainCondList.add(new EntityExpr(new EntityExpr("thruDate", EntityOperator.EQUALS, null), EntityOperator.OR, new EntityExpr("thruDate", EntityOperator.GREATER_THAN, nowTimestamp)));
        }
        mainCond = new EntityConditionList(mainCondList, EntityOperator.AND);
    
        // set distinct on so we only get one row per order
        EntityFindOptions findOpts = new EntityFindOptions(true, EntityFindOptions.TYPE_SCROLL_INSENSITIVE, EntityFindOptions.CONCUR_READ_ONLY, true);
        // using list iterator
        EntityListIterator pli = delegator.findListIteratorByCondition("ProductCategoryMember", mainCond, null, null, UtilMisc.toList("sequenceNum", "productId"), findOpts);
    
        // get the indexes for the partial list
        lowIndex = (((viewIndex - 1) * viewSize) + 1);
        highIndex = viewIndex * viewSize;
    
        // get the partial list for this page
        productCategoryMembers = pli.getPartialList(lowIndex, viewSize);
        if (productCategoryMembers == null) {
            productCategoryMembers = new ArrayList();
        }
    
        // attempt to get the full size
        pli.last();
        listSize = pli.currentIndex();
        if (highIndex > listSize) {
            highIndex = listSize;
        }
    
        // close the list iterator
        pli.close();

        context.put("productCategoryMembers", productCategoryMembers);
    } catch (GenericEntityException e) {
        String errMsg = "Failure in operation, rolling back transaction";
        Debug.logError(e, errMsg, module);
        try {
            // only rollback the transaction if we started one...
            TransactionUtil.rollback(beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError(e2, "Could not rollback transaction: " + e2.toString(), module);
        }
        // after rolling back, rethrow the exception
        throw e;
    } finally {
        // only commit the transaction if we started one... this will throw an exception if it fails
        TransactionUtil.commit(beganTransaction);
    }
}

context.put("viewIndex", viewIndex);
context.put("viewSize", viewSize);
context.put("lowIndex", lowIndex);
context.put("listSize", listSize);
context.put("highIndex", highIndex);
