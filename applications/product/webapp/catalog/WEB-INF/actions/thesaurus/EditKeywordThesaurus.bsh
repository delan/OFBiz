/*
 *  Copyright (c) 2003-2005 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Nathan De Graw
 *@author     David E. Jones
 *@version    $Rev$
 *@since      3.0
 */

import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;

relationshipEnums = delegator.findByAndCache("Enumeration", UtilMisc.toMap("enumTypeId", "KW_THES_REL"), UtilMisc.toList("sequenceId"));

keywordThesauruses = delegator.findAll("KeywordThesaurus", UtilMisc.toList("enteredKeyword"));

//if no param sent in make firstLetter 'a' else use firstLetter passed in
firstLetterString = request.getParameter("firstLetter");
if (UtilValidate.isEmpty(firstLetterString)) {
    firstLetter = 'a';
}
else {
    firstLetter = firstLetterString.charAt(0);
}

//add elememts to new list as long as it is smaller then 20,
//  but always get all of the first letter
keywordThesaurusIter = keywordThesauruses.iterator();
newKeywordThesaurus=new LinkedList();
specialCharKeywordThesaurus=new LinkedList();
currentLetter=firstLetter;
if (keywordThesaurusIter.hasNext()) {
    while (keywordThesaurusIter.hasNext()) {
        keywordThesaurus =  keywordThesaurusIter.next();
        if (keywordThesaurus.get("enteredKeyword").charAt(0)<'a' ||
                keywordThesaurus.get("enteredKeyword").charAt(0)>'z') {
            specialCharKeywordThesaurus.add(keywordThesaurus);
        } else if (keywordThesaurus.get("enteredKeyword").charAt(0)>=firstLetter) {
            if (keywordThesaurus.get("enteredKeyword").charAt(0)==currentLetter ||
                    newKeywordThesaurus.size()<20){
                newKeywordThesaurus.add(keywordThesaurus);
                currentLetter=keywordThesaurus.get("enteredKeyword").charAt(0);
            }
        }
    }
}
if ((specialCharKeywordThesaurus.size() > 0 && newKeywordThesaurus.size()<20) || firstLetter=='z') {
    specialCharKeywordThesaurusIter = specialCharKeywordThesaurus.iterator();
    while (specialCharKeywordThesaurusIter.hasNext()) {
        keywordThesaurus = specialCharKeywordThesaurusIter.next();
        newKeywordThesaurus.add(keywordThesaurus);
    }
}

//create list for a-z
letterList=new LinkedList();
for (i='a'; i<='z'; i++) {
    letterList.add(i);
}

context.put("relationshipEnums", relationshipEnums);
context.put("keywordThesauruses", newKeywordThesaurus);
context.put("firstLetter", firstLetter);
context.put("letterList", letterList);
