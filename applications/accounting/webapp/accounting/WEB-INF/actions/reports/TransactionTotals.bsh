/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.condition.EntityCondition;
import org.ofbiz.entity.condition.EntityConditionList;
import org.ofbiz.entity.condition.EntityExpr;
import org.ofbiz.entity.condition.EntityOperator;
import org.ofbiz.entity.GenericDelegator;

import javolution.util.FastList;
import javolution.util.FastMap;

exprs = UtilMisc.toList(new EntityExpr("organizationPartyId", EntityOperator.EQUALS, organizationPartyId));
if (UtilValidate.isNotEmpty(fromDate)) {
    exprs.add(new EntityExpr("transactionDate", EntityOperator.GREATER_THAN_EQUAL_TO, fromDate));
}
if (UtilValidate.isNotEmpty(thruDate)) {
    exprs.add(new EntityExpr("transactionDate", EntityOperator.LESS_THAN_EQUAL_TO, thruDate));
}

List postedExprs = FastList.newInstance();
postedExprs.add(new EntityExpr("isPosted", EntityOperator.EQUALS, "Y"));
postedExprs.addAll(exprs);
fieldsToSelect = UtilMisc.toSet("glAccountId", "debitCreditFlag", "totalAmount");
orderBy = UtilMisc.toList("glAccountId");

List postedTransTotalList = FastList.newInstance();
List postedTrans = delegator.findList("GlAccOrgAndAcctgTransAndEntry", new EntityConditionList(postedExprs, EntityOperator.AND), fieldsToSelect, orderBy, null, false);
if (UtilValidate.isNotEmpty(postedTrans)) {
    iter = postedTrans.iterator();
    while (iter.hasNext()) {
        Map postedMap = FastMap.newInstance();
        GenericValue value = iter.next();
        postedMap.put("glAccountId", value.getString("glAccountId"));
        if ("C".equals(value.getString("debitCreditFlag"))) {
            postedMap.put("credit", value.getDouble("totalAmount"));
            postedMap.put("debit", new Double(0.0));
        } else {
            postedMap.put("credit", new Double(0.0));
            postedMap.put("debit", value.getDouble("totalAmount"));
        }
        postedTransTotalList.add(postedMap);
    }
}
context.put("postedTransTotalList", postedTransTotalList);

List unpostedExprs = FastList.newInstance();
unpostedExprs.add(new EntityExpr("isPosted", EntityOperator.EQUALS, "N"));
unpostedExprs.addAll(exprs);

List unpostedTransTotalList = FastList.newInstance();
List unpostedTrans = delegator.findList("GlAccOrgAndAcctgTransAndEntry", new EntityConditionList(unpostedExprs, EntityOperator.AND), fieldsToSelect, orderBy, null, false);
if (UtilValidate.isNotEmpty(unpostedTrans)) {
    iter = unpostedTrans.iterator();
    while (iter.hasNext()) {
        Map unpostedMap = FastMap.newInstance();
        GenericValue value = iter.next();
        unpostedMap.put("glAccountId", value.getString("glAccountId"));
        if ("C".equals(value.getString("debitCreditFlag"))) {
            unpostedMap.put("credit", value.getDouble("totalAmount"));
            unpostedMap.put("debit", new Double(0.0));
        } else {
            unpostedMap.put("credit", new Double(0.0));
            unpostedMap.put("debit", value.getDouble("totalAmount"));
        }
        unpostedTransTotalList.add(unpostedMap);
    }
}
context.put("unpostedTransTotalList", unpostedTransTotalList);