/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Rev$
 *@since      2.1
 */
 
 import java.util.*;
 import org.ofbiz.entity.*;
 import org.ofbiz.base.util.*;
 import org.ofbiz.base.util.collections.*;
 import org.ofbiz.accounting.invoice.*;
 
 delegator = request.getAttribute("delegator");
 invoiceId = request.getParameter("invoiceId");
 
 if (invoiceId != null) {
    invoice = delegator.findByPrimaryKey("Invoice", UtilMisc.toMap("invoiceId", invoiceId));
    context.put("invoice", invoice);
    
    invoiceItems = invoice.getRelated("InvoiceItem");
    context.put("invoiceItems", invoiceItems);
    
    invoiceTotal = InvoiceWorker.getInvoiceTotal(invoice);
    context.put("invoiceTotal", new Double(invoiceTotal));    
    
    // each invoice of course has two billing addresses, but the one that is relevant for purchase invoices is the PAYMENT_LOCATION of the invoice
    // (ie Accounts Payable address for the supplier), while the right one for sales invoices is the BILLING_LOCATION (ie Accounts Receivable or
    // home of the customer.)
    if ((invoice.getString("invoiceTypeId") != null) && (invoice.getString("invoiceTypeId").equals("PURCHASE_INVOICE"))) {
        billingAddress = InvoiceWorker.getSendFromAddress(invoice);
    } else {
        billingAddress = InvoiceWorker.getBillToAddress(invoice);
    }
    context.put("billingAddress", billingAddress);
    
    billingParty = InvoiceWorker.getBillToParty(invoice);
    context.put("billingParty", billingParty);

    sendingParty = InvoiceWorker.getSendFromParty(invoice);
    context.put("sendingParty", sendingParty);
    
    terms = invoice.getRelated("InvoiceTerm");
    context.put("terms", terms);
    
    paymentAppls = delegator.findByAnd("PaymentApplication", UtilMisc.toMap("invoiceId", invoiceId));
    context.put("payments", paymentAppls);
    
    orderItemBillings = delegator.findByAnd("OrderItemBilling", UtilMisc.toMap("invoiceId", invoiceId), UtilMisc.toList("orderId"));
    orders = new OrderedSet();
    oibIter = orderItemBillings.iterator();
    while (oibIter.hasNext()) {
        orderIb = oibIter.next();
        orders.add(orderIb.getString("orderId"));
    }
    context.put("orders", orders);
    
    invoiceStatus = invoice.getRelatedOne("StatusItem");            
    context.put("invoiceStatus", invoiceStatus);
    
    edit = request.getParameter("editInvoice");
    if (edit != null && edit.equalsIgnoreCase("true")) {            
        invoiceItemTypes = delegator.findAll("InvoiceItemType");
        context.put("invoiceItemTypes", invoiceItemTypes);  
        context.put("editInvoice", new Boolean(true));  
    }    
 }
   