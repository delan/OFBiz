/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Rev$
 *@since      2.1
 */

import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;

requestParams = UtilHttp.getParameterMap(request);
delegator = request.getAttribute("delegator");
billingAccountId = requestParams.get("billingAccountId");
if (billingAccountId == null)
    billingAccountId = request.getAttribute("billingAccountId");
if (billingAccountId != null) {
    billingAccount = delegator.findByPrimaryKey("BillingAccount", UtilMisc.toMap("billingAccountId", billingAccountId));
    context.put("billingAccount", billingAccount);
}

billingAccountTermId = requestParams.get("billingAccountTermId");
if (billingAccountTermId != null) {
    billingAccountTerm = delegator.findByPrimaryKey("BillingAccountTerm", UtilMisc.toMap("billingAccountTermId", billingAccountTermId));
    context.put("billingAccountTerm", billingAccountTerm);
}

tryEntity = true;
errorMessage = request.getAttribute("_ERROR_MESSAGE_");
if (errorMessage != null && errorMessage.length() > 0) {
    tryEntity = false;    
}

termData = context.get("billingAccountTerm");
if (!tryEntity) termData = requestParams;
if (termData == null) termData = new HashMap();
context.put("termData", termData);

billingAccountTerms = delegator.findByAnd("BillingAccountTerm", UtilMisc.toMap("billingAccountId", billingAccountId));
context.put("billingAccountTerms", billingAccountTerms);

termTypes = delegator.findByAnd("TermType", UtilMisc.toMap("parentTypeId", "FINANCIAL_TERM"), UtilMisc.toList("description"));
context.put("termTypes", termTypes);

uom = delegator.findAll("Uom", UtilMisc.toList("description"));
context.put("uoms", uom);

