<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <!-- ================================================================ -->
    <!-- FixedAsset Services -->
    <!-- ================================================================ -->
    
    <!-- create a new Fixed Asset header record -->
    <simple-method method-name="createFixedAsset" short-description="Create an FixedAsset">
          <!-- create new entity and create all the fields -->
        <make-value value-name="newEntity" entity-name="FixedAsset"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <!-- create a non existing ID if not supplied -->
        <if-empty field="parameters.fixedAssetId">
            <sequenced-id-to-env sequence-name="FixedAsset" env-name="newEntity.fixedAssetId"/>
        <else>
            <!-- check the Duplicate ID> -->
            <entity-one entity-name="FixedAsset" value-name="fixedAsset"/>
            <if-not-empty field="fixedAsset">
                <add-error><fail-property resource="AccountingUiLabels" property="AccountingFixedAssetIdAlreadyExists"/></add-error>
                <log level="info" message="${AccountingUiLabels.AccountingFixedAssetIdAlreadyExists} "/>
            </if-not-empty>
            <check-errors/>
            <set from-field="parameters.fixedAssetId" field="newEntity.fixedAssetId"/>
        </else>
        </if-empty>
        <field-to-result field-name="newEntity.fixedAssetId" result-name="fixedAssetId"/>
        
        <!-- finally create the record (should not exist already)-->
        <create-value value-name="newEntity"/>
    </simple-method>

    <!-- update an existing Fixed Asset header Record -->
    <simple-method method-name="updateFixedAsset" short-description="Update an existing FixedAsset">
        <entity-one entity-name="FixedAsset" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ================================================================ -->
    <!-- FixedAssetMember Services -->
    <!-- ================================================================ -->
    
    <!-- add a product to a fixed Asset -->
    <simple-method method-name="addFixedAssetProduct" short-description="Add Product to FixedAsset">
        <make-value value-name="newEntity" entity-name="FixedAssetProduct"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        
        <if-empty field="newEntity.fromDate">
            <now-timestamp-to-env env-name="newEntity.fromDate"/>
        </if-empty>
        
        <create-value value-name="newEntity"/>
    </simple-method>

    <!-- update the product to fixed Asset link -->    
    <simple-method method-name="updateFixedAssetProduct" short-description="Update Products of a FixedAsset">
        <entity-one entity-name="FixedAssetProduct" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    
    <!-- remove the productlink from the Fixed Asset -->
    <simple-method method-name="removeFixedAssetProduct" short-description="Remove Product From FixedAsset">
        <entity-one entity-name="FixedAssetProduct" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ================================================================ -->
    <!-- FixedAssetCalendar Services -->
    <!-- ================================================================ -->
    <!-- update the calendar of the fixed Asset -->    
<!--     <simple-method method-name="updateFixedAssetCalendar" short-description="Update the calendar of the FixedAsset">
        <check-permission permission="ACCOUNTING" action="_UPDATE">
            <alt-permission permission="ACCOUNTING_ROLE" action="_UPDATE"/>
            <fail-message message="Security Error: to run updateFixedAssetCalendar you must have the ACCOUNTING_UPDATE or ACCOUNTING_ADMIN permission, or the limited ACCOUNTING_ROLE_UPDATE permission"/>
        </check-permission>        
        <check-errors/>

        <entity-one entity-name="FixedAsset" value-name="fixedAsset"/>
        
        <make-value value-name="excDayPKMap" entity-name="TechDataCalendarExcDay"/>
        <set-pk-fields field-name= "calendarId" map-name="fixedAsset" value-name="excDayPKMap"/>
        <set-pk-fields fieldName= "exceptionDateStartTime" map-name="parameters" value-name="excDayPKMap"/>
        <find-by entity-name="TechDataCalendarExcDay" map-name="excDayPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields field-name="capacity" map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    

 -->


    <!-- create a new FixedAssetStdCost -->
    <simple-method method-name="createFixedAssetStdCost" short-description="Create a FixedAssetStdCost">
        <!-- TODO: we should cancel the existing costs of the same type -->
        <!-- create new entity and create all the fields -->

        <!-- Check, should not exist already -->
        <entity-one entity-name="FixedAssetStdCost" value-name="fixedAssetStdCost"/>
        <if-not-empty field="fixedAssetStdCost">
            <add-error><fail-property resource="AccountingUiLabels" property="AccountingFixedAssetStdCostAlreadyExists"/></add-error>
        </if-not-empty>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="FixedAssetStdCost"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        
        <!-- finally create the record (should not exist already)-->
        <create-value value-name="newEntity"/>
        <check-errors/>
    </simple-method>
    <!-- update an existing FixedAssetStdCost -->
    <simple-method method-name="updateFixedAssetStdCost" short-description="Update an existing FixedAssetStdCost">
        <entity-one entity-name="FixedAssetStdCost" value-name="fixedAssetStdCost"/>
        <set-nonpk-fields map-name="parameters" value-name="fixedAssetStdCost"/>
        <store-value value-name="fixedAssetStdCost"/>
    </simple-method>
    <!-- cancel an existing Agreement -->
    <simple-method method-name="cancelFixedAssetStdCost" short-description="Cancel an existing FixedAssetStdCost">
        <entity-one entity-name="FixedAssetStdCost" value-name="fixedAssetStdCost"/>
        <now-timestamp-to-env env-name="fixedAssetStdCost.thruDate"/>
        <store-value value-name="fixedAssetStdCost"/>
    </simple-method>

    <!-- Fixed Asset Identification "FIXED_ASSET_IDENT"-->
    <simple-method method-name="createFixedAssetIdent" short-description="Create an FixedAssetIdent">
        <make-value value-name="newEntity" entity-name="FixedAssetIdent"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateFixedAssetIdent" short-description="Update an existing FixedAssetIdent">
        <entity-one entity-name="FixedAssetIdent" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="removeFixedAssetIdent" short-description="Remove Fixed Assets Idents FixedAssetIdent">
        <entity-one entity-name="FixedAssetIdent" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- FixedAsset Registration Create/Update/Delete"-->
    <simple-method method-name="createFixedAssetRegistration" short-description="Create FixedAsset Registration">
        <make-value value-name="newEntity" entity-name="FixedAssetRegistration"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <if-empty field="newEntity.fromDate">
            <now-timestamp-to-env env-name="newEntity.fromDate"/>
        </if-empty>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateFixedAssetRegistration" short-description="Update an existing FixedAsset Registration">
        <entity-one entity-name="FixedAssetRegistration" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteFixedAssetRegistration" short-description="Delete FixedAsset Registration">
        <entity-one entity-name="FixedAssetRegistration" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!--  create/update/delete FixedAssetMaint -->
    <simple-method method-name="createFixedAssetMaint" short-description="create a FixedAssetMaint">
        <make-value entity-name="FixedAssetMaint" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <make-next-seq-id value-name="newEntity" seq-field-name="maintHistSeqId"/> <!-- this finds the next sub-sequence ID -->
        <field-to-result field-name="newEntity.maintHistSeqId" result-name="maintHistSeqId"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <if-not-empty field="parameters.productMaintSeqId">
            <entity-one entity-name="FixedAsset" value-name="fixedAsset"/>
            <entity-one entity-name="ProductMaint" value-name="productMaint">
                <field-map field-name="productId" env-name="fixedAsset.instanceOfProductId"/>
                <field-map field-name="productMaintSeqId" env-name="parameters.productMaintSeqId"/>
            </entity-one>
            <set field="newEntity.productMaintTypeId" from-field="productMaint.productMaintTypeId"/>
        </if-not-empty >
        <if-not-empty field="productMaint.maintTemplateWorkEffortId">
            <set field="maintTemplateWorkEffortId" from-field="productMaint.maintTemplateWorkEffortId"/>
            <else>
                <!-- User can still pick a Template workEffort -->
                <set field="maintTemplateWorkEffortId" from-field="parameters.maintTemplateWorkEffortId"/>
            </else>
        </if-not-empty>
        <if-not-empty field="maintTemplateWorkEffortId">
            
            <set field="duplicateTemplateWorkEffortMap.oldWorkEffortId" from-field="maintTemplateWorkEffortId"/>
            <sequenced-id-to-env sequence-name="WorkEffort" env-name="duplicateTemplateWorkEffortMap.workEffortId"/>
            <set field="duplicateTemplateWorkEffortMap.duplicateWorkEffortAssocs" value="Y"/>
            <set field="duplicateTemplateWorkEffortMap.duplicateWorkEffortNotes" value="Y"/>
            <set field="duplicateTemplateWorkEffortMap.duplicateWorkEffortContents" value="Y"/>
            <set field="duplicateTemplateWorkEffortMap.duplicateWorkEffortAssignmentRates" value="Y"/>
            <call-service service-name="duplicateWorkEffort" in-map-name="duplicateTemplateWorkEffortMap"/>
            <set field="newEntity.scheduleWorkEffortId" from-field="duplicateTemplateWorkEffortMap.workEffortId"/>
            
            <else>
                <!-- Create the WorkEfforts, dates not specified -->
                <!-- Maintenance WorkEffort entity -->
                <set value="Maintenance of Fixed Asset #${newEntity.fixedAssetId} " field="maintWorkEffortMap.workEffortName"/>
                <set value="TASK" field="maintWorkEffortMap.workEffortTypeId"/>
                <set value="WEPT_MAINTENANCE" field="maintWorkEffortMap.workEffortPurposeTypeId"/>
                <set value="CAL_TENTATIVE" field="maintWorkEffortMap.currentStatusId"/>
                <set from-field="userLogin.partyId" field="maintWorkEffortMap.quickAssignPartyId"/>
                <call-service service-name="createWorkEffort" in-map-name="maintWorkEffortMap">
                    <result-to-field result-name="workEffortId" field-name="newEntity.scheduleWorkEffortId"/>
                </call-service>
            </else>
        </if-not-empty>
        <create-value value-name="newEntity"/>  
    </simple-method>   
    <simple-method method-name="updateFixedAssetMaint" short-description="Update an existing FixedAsset Maintenance">
        <entity-one entity-name="FixedAssetMaint" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <if-not-empty field="parameters.productMaintSeqId">
            <entity-one entity-name="FixedAsset" value-name="fixedAsset"/>
            <entity-one entity-name="ProductMaint" value-name="productMaint">
                <field-map field-name="productId" env-name="fixedAsset.instanceOfProductId"/>
                <field-map field-name="productMaintSeqId" env-name="parameters.productMaintSeqId"/>
            </entity-one>
            <set field="lookedUpValue.productMaintTypeId" from-field="productMaint.productMaintTypeId"/>
        </if-not-empty>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteFixedAssetMaint" short-description="Delete FixedAsset Maintenance">
        <entity-one entity-name="FixedAssetMaint" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!--  create/update/delete FixedAssetMeter -->
    <simple-method method-name="createFixedAssetMeter" short-description="Create a Fixed Asset Meter Reading">
        <make-value entity-name="FixedAssetMeter" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>  
        <check-errors/>
        <set field="meterValue" from-field="newEntity"/>
        <call-simple-method method-name="createMaintsFromMeterReading"/>
    </simple-method>   
    <simple-method method-name="updateFixedAssetMeter" short-description="Update a Fixed Asset Meter Reading">
        <entity-one entity-name="FixedAssetMeter" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
        <check-errors/>
        <set field="meterValue" from-field="lookedUpValue"/>
        <call-simple-method method-name="createMaintsFromMeterReading"/>
    </simple-method>
    <simple-method method-name="deleteFixedAssetMeter" short-description="Delete a Fixed Asset Meter Reading">
        <entity-one entity-name="FixedAssetMeter" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="createMaintsFromMeterReading" short-description="Create Fixed Asset Maintenances From A Meter Reading">
        <if-not-empty field="meterValue.maintHistSeqId">
            <return/>
        </if-not-empty>
        <entity-one entity-name="FixedAsset" value-name="fixedAssetValue"/>
        <if-empty field="fixedAssetValue.instanceOfProductId">
            <return/>
        </if-empty>
        <entity-and list-name="productMaintList" entity-name="ProductMaint">
            <field-map field-name="productId" env-name="fixedAssetValue.instanceOfProductId"/>
            <field-map field-name="intervalMeterTypeId" env-name="meterValue.productMeterTypeId"/>
        </entity-and>
        <iterate list-name="productMaintList" entry-name="productMaintValue">
            <set field="repeatCount" from-field="productMaintValue.repeatCount" default-value="0" type="Long"/>
            <entity-condition list-name="maintList" entity-name="FixedAssetMaint">
                <condition-list combine="and">
                    <condition-expr field-name="fixedAssetId" operator="equals" env-name="fixedAssetValue.fixedAssetId"/>
                    <condition-expr field-name="productMaintTypeId" operator="equals" env-name="productMaintValue.productMaintTypeId"/>
                    <condition-expr field-name="intervalMeterTypeId" operator="equals" env-name="productMaintValue.intervalMeterTypeId"/>
                    <condition-expr field-name="statusId" operator="not-equals" value="FAM_CANCELLED"/>
                </condition-list>
            </entity-condition>
            <set field="listSize" value="0" type="Long"/>
            <if-not-empty field="maintList">
                <set field="listSize" value="${bsh:maintList.size();}" type="Long"/>
            </if-not-empty>
            <set field="maxIntervalQty" value="0" type="Double"/>
            <iterate list-name="maintList" entry-name="maintValue">
                <if-compare-field field="maintValue.intervalQuantity" operator="greater" to-field="maxIntervalQty" type="Double">
                    <set field="maxIntervalQty" from-field="maintValue.intervalQuantity" type="Double"/>
                </if-compare-field>
            </iterate>
            <set field="nextIntervalQty" value="${bsh:maxIntervalQty + productMaintValue.getDouble(&quot;intervalQuantity&quot;);}" type="Double"/>
            <if-compare-field field="nextIntervalQty" operator="less-equals" to-field="meterValue.meterValue" type="Double">
                <set field="maintDue" value="false"/>
                <if-compare field="repeatCount" operator="greater" value="0" type="Long">
                    <if-compare-field field="listSize" operator="less" to-field="repeatCount" type="Long">
                        <set field="maintDue" value="true"/>
                    </if-compare-field>
                    <else>
                        <set field="maintDue" value="true"/>
                    </else>
                </if-compare>
                <if-compare field="maintDue" operator="equals" value="true">
                    <set-service-fields service-name="createFixedAssetMaint" to-map-name="createMaintCxt" map-name="productMaintValue"/>
                    <set field="createMaintCxt.fixedAssetId" from-field="fixedAssetValue.fixedAssetId"/>
                    <set field="createMaintCxt.intervalQuantity" from-field="meterValue.meterValue"/>
                    <set field="createMaintCxt.statusId" value="FAM_CREATED"/>
                    <call-service service-name="createFixedAssetMaint" in-map-name="createMaintCxt"/>
                    <check-errors/>
                </if-compare>
            </if-compare-field>
        </iterate>
    </simple-method>
    <simple-method method-name="migrateFixedAssetMaintMeter" short-description="Copy FixedAssetMaintMeter To FixedAssetMeter">
        <entity-condition list-name="maintMeterList" entity-name="FixedAssetMaintMeter"/>
        <iterate list-name="maintMeterList" entry-name="maintMeter">
            <make-value value-name="newEntity" entity-name="FixedAssetMeter"/>
            <set-pk-fields map-name="maintMeter" value-name="newEntity"/>
            <set-nonpk-fields map-name="maintMeter" value-name="newEntity"/>
            <set field="newEntity.readingDate" from-field="maintMeter.createdStamp"/>
            <entity-one entity-name="FixedAssetMeter" value-name="lookedUpValue" auto-field-map="false">
                <field-map field-name="fixedAssetId" env-name="newEntity.fixedAssetId"/>
                <field-map field-name="productMeterTypeId" env-name="newEntity.productMeterTypeId"/>
                <field-map field-name="readingDate" env-name="newEntity.readingDate"/>
            </entity-one>
            <if-empty field="lookedUpValue">
                <create-value value-name="newEntity"/>
                <check-errors/>
            </if-empty>
        </iterate>
    </simple-method>
    
    <!--  create/update/delete FixedAssetMaintOrder -->
    <simple-method method-name="createFixedAssetMaintOrder" short-description="Create a FixedAsset Maintenance Order">
           <!-- Check, should exist orderId and orderItemId -->
        <entity-one entity-name="OrderHeader" value-name="lookedUpValue"/>
        <if-empty field="lookedUpValue">
            <set field="orderId" from-field="parameters.orderId"/>
            <add-error><fail-property resource="AccountingUiLabels" property="AccountingOrderWithIdNotFound"/></add-error>
        </if-empty>
        <check-errors/>
                
        <!-- Check if user has not passed in orderItemSeqId then get list of OrderItems from database and default to first item -->        
        <if-empty field="parameters.orderItemSeqId">
            <entity-and entity-name="OrderItem" list-name="orderItems">
                <field-map field-name="orderId" env-name="parameters.orderId"/>
            </entity-and>
            <if-not-empty field="orderItems">
                <set field="orderItem" from-field="orderItems[0]"/>
                <if-not-empty field="orderItem">
                  <set field="parameters.orderItemSeqId" from-field="orderItem.orderItemSeqId"/>
                </if-not-empty>
            </if-not-empty>
            
            <else>
               <!-- Check, should exist orderId and orderItemId -->
               <entity-one entity-name="OrderItem" value-name="lookedUpValue"/>
               <if-empty field="lookedUpValue">
                  <set field="orderItemSeqId" from-field="parameters.orderItemSeqId"/>
                  <add-error><fail-property resource="AccountingUiLabels" property="AccountingOrderItemWithIdNotFound"/></add-error>
               </if-empty>
            </else>
        </if-empty>
        <check-errors/>
        
        <make-value entity-name="FixedAssetMaintOrder" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>  
    </simple-method>   
    <simple-method method-name="deleteFixedAssetMaintOrder" short-description="Delete FixedAsset Maintenance Order">
        <entity-one entity-name="FixedAssetMaintOrder" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    
    <!-- ==============Party Fixed Asset Assignment============= -->
    <simple-method method-name="createPartyFixedAssetAssignment" short-description="Associate Party to Fixed Asset">
        <make-value entity-name="PartyFixedAssetAssignment" value-name="newEntity"/>
        <set-pk-fields value-name="newEntity" map-name="parameters"/>
        <set-nonpk-fields value-name="newEntity" map-name="parameters"/>
        <if-empty field="newEntity.fromDate">
            <now-timestamp-to-env env-name="nowTimestamp"/>
            <set field="newEntity.fromDate" from-field="nowTimestamp"/>
        </if-empty>
        <create-value value-name="newEntity"/>
    </simple-method>
        
    <simple-method method-name="updatePartyFixedAssetAssignment" short-description="Update Party to Fixed Asset">
        <entity-one entity-name="PartyFixedAssetAssignment" value-name="newEntity"/>
        <set-nonpk-fields value-name="newEntity" map-name="parameters"/>
        <store-value value-name="newEntity"/>
    </simple-method>
        
    <simple-method method-name="deletePartyFixedAssetAssignment" short-description="Delete Party to Fixed Asset">
        <entity-one entity-name="PartyFixedAssetAssignment" value-name="newEntity"/>
        <remove-value value-name="newEntity"/>
    </simple-method>
     
    <!-- ==============  Fixed Asset Depreciation methods  ============== -->   
    <simple-method method-name="straightLineDepreciation" short-description="Calculate straight line depreciation to Fixed Asset[ (PC-SV)/expLife ]">
        <set field="expEndOfLifeYear" from-field="parameters.expEndOfLifeYear" type="Integer"/>
        <set field="assetAcquiredYear" from-field="parameters.assetAcquiredYear" type="Integer"/>
        <set field="purchaseCost" from-field="parameters.purchaseCost" type="Double"/>
        <set field="salvageValue" from-field="parameters.salvageValue" type="Double"/>
        <call-object-method obj-field-name="parameters.usageYears" method-name="intValue" ret-field-name="intUsageYears"/>
        <if-not-empty field="parameters.fixedAssetId">
            <set field="depreciation" value="0.0" type="Double"/>
            <!--FORMULA :  depreciation = (purchaseCost - salvageValue) / (expectedEndOfLife - dateAcquired) -->
            <calculate field-name="depreciation" decimal-scale="2" type="Double">
                <calcop operator="divide">
                    <calcop operator="subtract">
                        <calcop operator="get" field-name="purchaseCost"/>
                        <calcop operator="get" field-name="salvageValue"/>
                    </calcop>
                    <calcop operator="subtract">
                        <calcop operator="get" field-name="expEndOfLifeYear"/>
                        <calcop operator="get" field-name="assetAcquiredYear"/>
                    </calcop>
                </calcop>
            </calculate>
            <loop count="${intUsageYears}">
                <calculate field-name="purchaseCost" type="Double">
                    <calcop operator="subtract">
                        <calcop operator="get" field-name="purchaseCost"/>
                        <calcop operator="get" field-name="depreciation"/>
                    </calcop>
                </calculate>
                <field-to-list list-name="assetDepreciationTillDate" field-name="depreciation"/>
                <field-to-list list-name="assetNBVAfterDepreciation" field-name="purchaseCost"/>
            </loop>
        </if-not-empty>
        <log level="info" message="Using straight line formula depreciation calculated for fixedAsset (${parameters.fixedAssetId}) is ${depreciation}"/>
        <field-to-result field-name="assetDepreciationTillDate"/>
        <field-to-result field-name="assetNBVAfterDepreciation"/>
    </simple-method>
    
    <simple-method method-name="doubleDecliningBalanceDepreciation" short-description="Calculate double declining balance depreciation to Fixed Asset">
        <set field="expEndOfLifeYear" from-field="parameters.expEndOfLifeYear" type="Integer"/>
        <set field="assetAcquiredYear" from-field="parameters.assetAcquiredYear" type="Integer"/>
        <set field="purchaseCost" from-field="parameters.purchaseCost" type="Double"/>
        <set field="salvageValue" from-field="parameters.salvageValue" type="Double"/>
        <call-object-method obj-field-name="parameters.usageYears" method-name="intValue" ret-field-name="intUsageYears"/>
        <if-not-empty field="parameters.fixedAssetId">
            <loop count="${intUsageYears}">
                <set field="depreciation" value="0.0" type="Double"/>
                <!--FORMULA : depreciation = (NBV - salvageValue) * 2 / (expectedEndOfLife - dateAcquired) -->
                <calculate field-name="depreciation" decimal-scale="2" type="Double">
                    <calcop operator="multiply">
                        <calcop operator="divide">
                           <calcop operator="subtract">
                                <calcop operator="get" field-name="purchaseCost"/>
                                <calcop operator="get" field-name="salvageValue"/>
                            </calcop>
                            <calcop operator="subtract">
                                <calcop operator="get" field-name="expEndOfLifeYear"/>
                                <calcop operator="get" field-name="assetAcquiredYear"/>
                            </calcop>
                        </calcop>
                        <number value="2"/>
                    </calcop>
                </calculate>
                <calculate field-name="assetAcquiredYear">
                    <calcop operator="add">
                       <calcop operator="get" field-name="assetAcquiredYear"/>
                       <number value="1"/>
                    </calcop>
                </calculate>
                <calculate field-name="purchaseCost">
                   <calcop operator="subtract">
                       <calcop operator="get" field-name="purchaseCost"/>
                       <calcop operator="get" field-name="depreciation"/>
                    </calcop>
                </calculate>
                <field-to-list list-name="assetDepreciationTillDate" field-name="depreciation"/>
                <field-to-list list-name="assetNBVAfterDepreciation" field-name="purchaseCost"/>
            </loop>
        </if-not-empty>
        <log level="info" message="Using double decline formula depreciation calculated for fixedAsset (${parameters.fixedAssetId}) is ${assetDepreciationTillDate}"/>
        <field-to-result field-name="assetDepreciationTillDate"/>
        <field-to-result field-name="assetNBVAfterDepreciation"/>
    </simple-method>
    
    <simple-method method-name="calculateFixedAssetDepreciation" short-description="Service to calculate the yearly depreciation from dateAcquired year to current financial year">
        <entity-one entity-name="FixedAsset" value-name="fixedAsset"/>
        <if-empty field="fixedAsset">
            <add-error><fail-property resource="ManufacturingUiLabels" property="ManufacturingFixedAssetNotExist"/></add-error>
            <check-errors/>
        </if-empty>
        <set field="startIndex" value="0" type="Integer"/>
        <set field="endIndex" value="4" type="Integer"/>

        <!-- Extract asset end of life year from field expectedEndOfLife -->
        <if-not-empty field="fixedAsset.expectedEndOfLife">
            <set field="expectedEndOfLife" from-field="fixedAsset.expectedEndOfLife"/>
            <to-string field-name="expectedEndOfLife"/>
            <call-object-method method-name="substring" obj-field-name="expectedEndOfLife" ret-field-name="expEndOfLifeYear">
                <field field-name="startIndex" type="int"/>
                <field field-name="endIndex" type="int"/>
            </call-object-method>
        <else>
            <add-error><fail-property resource="AccountingUiLabels" property="AccountingExpEndOfLifeIsEmpty"/></add-error>
            <check-errors/>
        </else>
        </if-not-empty>

        <!-- Extract asset acquired year from field dateAcquired -->
        <if-not-empty field="fixedAsset.dateAcquired">
            <set field="dateAcquired" from-field="fixedAsset.dateAcquired"/>
            <to-string field-name="dateAcquired"/>
            <call-object-method method-name="substring" obj-field-name="dateAcquired" ret-field-name="assetAcquiredYear">
                <field field-name="startIndex"  type="int"/>
                <field field-name="endIndex" type="int"/>
            </call-object-method>
        <else>
            <add-error><fail-property resource="AccountingUiLabels" property="AccountingDateAcquiredIsEmpty"/></add-error>
            <check-errors/>
        </else>
        </if-not-empty>

        <!-- if any asset's salvage value is empty then set it by 0 -->
        <if-empty field="fixedAsset.salvageValue">
            <set field="salvageValue" value="0.0" type="Double"/>
        <else>
            <set field="salvageValue" from-field="fixedAsset.salvageValue"/>
        </else>
        </if-empty>

        <!-- Get running year -->
        <now-timestamp-to-env env-name="nowTimestamp"/>
        <to-string field-name="nowTimestamp"/>
        <call-object-method method-name="substring" obj-field-name="nowTimestamp" ret-field-name="currentYear">
            <field field-name="startIndex" type="int"/>
            <field field-name="endIndex" type="int"/>
        </call-object-method>

        <!-- Calculate asset's total run in years -->
        <calculate field-name="usageYears" type="Integer">
            <calcop operator="subtract">
               <calcop operator="get" field-name="currentYear"/>
               <calcop operator="get" field-name="assetAcquiredYear"/>
            </calcop>
        </calculate>

        <entity-and entity-name="FixedAssetDepMethod" list-name="fixedAssetDepMethods" filter-by-date="true">
            <field-map field-name="fixedAssetId" env-name="parameters.fixedAssetId"/>
        </entity-and>
        <if-not-empty field="fixedAssetDepMethods">
            <first-from-list list-name="fixedAssetDepMethods" entry-name="fixedAssetDepMethod"/>
            <get-related-one relation-name="CustomMethod" value-name="fixedAssetDepMethod" to-value-name="customMethod"/>
            <log level="info" message="Depreciation service name for the FixedAsset ${parameters.fixedAssetId} is ${customMethod.customMethodName}"/>
            
            <set field="serviceInMap.fixedAssetId" from-field="parameters.fixedAssetId"/>
            <set field="serviceInMap.expEndOfLifeYear" from-field="expEndOfLifeYear" type="Integer"/>
            <set field="serviceInMap.assetAcquiredYear" from-field="assetAcquiredYear" type="Integer"/>
            <set field="serviceInMap.purchaseCost" from-field="fixedAsset.purchaseCost" type="Double"/>
            <set field="serviceInMap.salvageValue" from-field="salvageValue" type="Double"/>
            <set field="serviceInMap.usageYears" from-field="usageYears" type="Integer"/>
            <call-service service-name="${customMethod.customMethodName}" in-map-name="serviceInMap">
                <result-to-field result-name="assetDepreciationTillDate"/>
                <result-to-field result-name="assetNBVAfterDepreciation"/>
            </call-service>
            <log level="info" message="Asset's depreciation calculated till date are ${assetDepreciationTillDate}"/>
            <log level="info" message="Asset's Net Book Values (NBV) from acquired date after deducting depreciation are ${assetNBVAfterDepreciation}"/>
            <field-to-result field-name="assetDepreciationTillDate"/>
            <field-to-result field-name="assetNBVAfterDepreciation"/>
        </if-not-empty>    
    </simple-method>
</simple-methods>
