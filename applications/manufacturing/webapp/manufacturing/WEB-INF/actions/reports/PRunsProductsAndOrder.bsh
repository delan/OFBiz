/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Mario Cappellato (mario.cappellato@sastau.it)
 *
 */

// PRunsProductsAndOrder
// ReportD

import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.manufacturing.jobshopmgt.ProductionRunHelper;
import org.ofbiz.order.order.OrderReadHelper;
import org.ofbiz.product.category.CategoryWorker;

if (!UtilValidate.isEmpty(productCategoryIdPar)) {
    category = delegator.findByPrimaryKey("ProductCategory", UtilMisc.toMap("productCategoryId", productCategoryIdPar));
    context.put("category", category);
}

allProductionRuns = delegator.findByAnd("WorkEffortAndGoods", UtilMisc.toMap("workEffortName", planName, "statusId", "WIP_OUTGOING_FULFIL"), UtilMisc.toList("productId"));
productionRuns = new ArrayList();

if (allProductionRuns != null) {
    allProductionRunsIt = allProductionRuns.iterator();
    while (allProductionRunsIt.hasNext()) {
        productionRun = allProductionRunsIt.next();
        // verify if the product is a member of the given category (based on the report's parameter)
        if (!UtilValidate.isEmpty(productCategoryIdPar)) {
            if (!isProductInCategory(delegator, productionRun.getString("productId"), productCategoryIdPar)) {
                // the production run's product is not a member of the given category, skip it
                continue;
            }
        }
        productionRunProduct = delegator.findByPrimaryKey("Product", UtilMisc.toMap("productId", productionRun.getString("productId")));
        String rootProductionRunId = ProductionRunHelper.getRootProductionRun(delegator, productionRun.getString("workEffortId"));

        productionRunOrders = delegator.findByAnd("WorkOrderItemFulfillment", UtilMisc.toMap("workEffortId", rootProductionRunId));
        productionRunOrder = EntityUtil.getFirst(productionRunOrders);
        OrderReadHelper orh = new OrderReadHelper(delegator, productionRunOrder.getString("orderId"));
        locations = delegator.findByAnd("ProductFacilityLocation", UtilMisc.toMap("productId", productionRun.getString("productId"), "facilityId", productionRun.getString("facilityId")));
        location = EntityUtil.getFirst(locations);

        productionRunMap = UtilMisc.toMap("productionRun", productionRun,
                                          "product", productionRunProduct,
                                          "productionRunOrder", productionRunOrder,
                                          "customer", orh.getPlacingParty(),
                                          "address", orh.getShippingAddress(),
                                          "location", location);

        productionRunMap.put("plan", planName);
        quantity = productionRun.get("estimatedQuantity");
        for (int i = 0; i < quantity; i++) {
            productionRuns.add(productionRunMap);
        }
    }
}
context.put("productionRuns", productionRuns);
