/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@author     Jacopo Cappellato (tiz@sastau.it)
 *@author     Malin Nicolas (nicolas@ptimalin.net)
 *@version    $Rev$
 *@since      2.2
*/

import java.util.*;
import java.sql.Timestamp;
import org.ofbiz.base.util.*;
import org.ofbiz.service.*;
import org.ofbiz.service.LocalDispatcher;
import org.ofbiz.widget.html.*;
import org.ofbiz.entity.*;
import org.ofbiz.service.DispatchContext;
import org.ofbiz.entity.condition.*;
import org.ofbiz.manufacturing.mrp.MrpServices;
import org.ofbiz.manufacturing.techdata.ProductHelper;
import org.ofbiz.base.util.Debug;

GenericDelegator delegator = request.getAttribute("delegator");
LocalDispatcher dispatcher = request.getAttribute("dispatcher");

//get the inventory (inventoryEventPlanned)
productId = request.getParameter("productId");

// create the eventDate for calendar
UtilDateTime fromDate = new UtilDateTime();
Timestamp fromTs = fromDate.nowTimestamp();
fromTs = fromDate.getDayStart( fromTs );

String fromStr = fromTs.toString();
fromStr = fromStr.substring(0, fromStr.indexOf('.'));

context.put("eventDateStr", fromStr);
Debug.logInfo("eventDateStr =  " + fromStr, "truc");

// get the lookup flag
lookupFlag = request.getParameter("lookupFlag");

// blank param list
paramList = "";
inventoryList = null;

if (lookupFlag != null) {
    paramList = paramList + "&lookupFlag=" + lookupFlag;
    lookupErrorMessage = null;   
    andExprs = new ArrayList();
    entityName = "InventoryEventPlanned"; 
     
    //define main condition
    mainCond = null;

    // now do the filtering
    
    eventDate = request.getParameter("eventDate");
    if (eventDate != null && eventDate.length() > 8) {            
	eventDate = eventDate.trim();
	if (eventDate.length() < 14) eventDate = eventDate + " " + "00:00:00.000";
	paramList = paramList + "&eventDate=" + eventDate;
        andExprs.add(new EntityExpr("eventDate", EntityOperator.GREATER_THAN, eventDate));
    }
    
    if (productId != null && productId.length() > 0) {
            paramList = paramList + "&productId=" + productId;
	    if ( productId.length() > 0)
		andExprs.add(new EntityExpr("productId", EntityOperator.EQUALS, productId));
    } 

    mainCond = new EntityConditionList(andExprs, EntityOperator.AND); 
    
    if ( mainCond != null) {
	// do the lookup
        inventoryList = delegator.findByCondition(entityName, mainCond, null, UtilMisc.toList("productId", "eventDate"));
    }
    
    context.put("inventoryList", inventoryList);
}
context.put("paramList", paramList);

// set the page parameters
viewIndex = 0;
try {
    viewIndex = Integer.valueOf((String) request.getParameter("VIEW_INDEX")).intValue();
} catch (Exception e) {}
viewSize = 20;
try {
    viewSize = Integer.valueOf((String) request.getParameter("VIEW_SIZE")).intValue();
} catch (Exception e) {}
listSize = 0;
if (inventoryList != null)
    listSize = inventoryList.size();

lowIndex = viewIndex * viewSize;
highIndex = (viewIndex + 1) * viewSize;
if (listSize < highIndex) 
    highIndex = listSize;
if( highIndex < 1 )
    highIndex = 0;

context.put("viewIndex", viewIndex);
context.put("listSize", listSize);
context.put("highIndex", highIndex);
context.put("lowIndex", lowIndex);
context.put("viewSize", viewSize);

//Calcul variation quantity of product in stock 

if (inventoryList != null && !inventoryList.isEmpty() ){
    List numberProductList = ProductHelper.getVariationProduct(inventoryList.subList(0, highIndex), dispatcher);
    context.put("numberProductList", numberProductList);


    //Map productQoh
    List qohProduct = new LinkedList();
    String productTmp = new String("");
    GenericValue inventoryTmp;
    for( Iterator iter = inventoryList.iterator(); iter.hasNext(); ){
	inventoryTmp = iter.next();
	productId = inventoryTmp.getString("productId");
	if( ! productId.equals( productTmp ) ){
	    qohProduct.add( MrpServices.findProductMrpQoh(inventoryTmp.getRelatedOneCache("Product"), dispatcher) );
	    productTmp = productId;
	}
    }
    context.put("qohProduct", qohProduct );
}
