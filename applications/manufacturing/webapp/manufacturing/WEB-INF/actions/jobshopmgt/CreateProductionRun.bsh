/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@author      Olivier.Heintz@nereide.biz
 *@version    $Rev$
 *@since      3.0
 */

import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;


// Loads the newly created production run (for the tab bar)
delegator = request.getAttribute("delegator");

productionRunId = request.getAttribute("productionRunId");
if (!UtilValidate.isEmpty(productionRunId)) {
    GenericValue productionRun = delegator.findByPrimaryKey("WorkEffort", UtilMisc.toMap("workEffortId", productionRunId));
    if (productionRun != null) {
        context.put("productionRunId", productionRunId);
        context.put("productionRun", productionRun);
    }
}


// requestParams = UtilHttp.getParameterMap(request);
HashMap productionRunData= new HashMap();
productId = request.getParameter("productId");
if (productId != null) productionRunData.put("productId",productId);
pRQuantity = request.getParameter("pRQuantity");
if (pRQuantity != null) productionRunData.put("pRQuantity",pRQuantity);
startDate = request.getParameter("startDate");
if (startDate != null) productionRunData.put("startDate",startDate);
facilityId = request.getParameter("facilityId");
if (facilityId != null) productionRunData.put("facilityId", facilityId);
routingId = request.getParameter("routingId");
if (routingId != null) productionRunData.put("routingId",routingId);
workEffortName = request.getParameter("workEffortName");
if (workEffortName != null) productionRunData.put("workEffortName",workEffortName);
description = request.getParameter("description");
if (description != null) productionRunData.put("description",description);
List msgResult = new LinkedList();
msgResult = request.getParameter("msgResult");
if (msgResult == null) msgResult = request.getAttribute("msgResult");
// if (msgResult == null) { msgResult.add("truc"); }

tryEntity = true;
errorMessage = request.getAttribute("_ERROR_MESSAGE_");
if (errorMessage != null && errorMessage.length() > 0) {
    tryEntity = false;    
}

// get all the warehouses
delegator = request.getAttribute("delegator");
warehouses = delegator.findByAnd("Facility", UtilMisc.toMap("facilityTypeId", "WAREHOUSE"));
context.put("warehouses", warehouses);
if (facilityId != null && facilityId.length() > 0) {
    currentFacilityId = delegator.findByPrimaryKeyCache("Facility", UtilMisc.toMap("facilityId", facilityId));
    context.put("currentFacilityId", currentFacilityId);
}


context.put("msgResult", msgResult);
context.put("productionRunData", productionRunData);


