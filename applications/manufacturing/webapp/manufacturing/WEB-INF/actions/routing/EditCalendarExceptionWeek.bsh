/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Olivier.Heintz@nereide.biz
 *@version    $Rev$
 *@since      3.0
 */


import java.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.widget.html.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

if(security.hasEntityPermission("MANUFACTURING", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}
GenericValue techDataCalendar = null;
List calendarExceptionWeeks = null;

String calendarId = request.getParameter("calendarId");
if (calendarId == null) {
    calendarId = request.getAttribute("calendarId");
}
if (calendarId != null) {
    techDataCalendar = delegator.findByPrimaryKey("TechDataCalendar", UtilMisc.toMap("calendarId", calendarId));
}
if (techDataCalendar != null) {
    calendarExceptionWeeks = techDataCalendar.getRelated("TechDataCalendarExcWeek");
}
List calendarExceptionWeeksDatas = new LinkedList();
Iterator calendarExceptionWeeksIter = calendarExceptionWeeks.iterator();
while (calendarExceptionWeeksIter.hasNext()) {
    GenericValue calendarExceptionWeek = (GenericValue) calendarExceptionWeeksIter.next();
    GenericValue calendarWeek = calendarExceptionWeek.getRelatedOne("TechDataCalendarWeek");
    calendarExceptionWeeksDatas.add(UtilMisc.toMap("calendarExceptionWeek", calendarExceptionWeek, "calendarWeek", calendarWeek));
}

HtmlFormWrapper listCalendarExceptionWeekWrapper = new HtmlFormWrapper("/routing/CalendarForms.xml", "ListCalendarExceptionWeek", request, response);
listCalendarExceptionWeekWrapper.putInContext("calendarExceptionWeeksDatas", calendarExceptionWeeksDatas);

HtmlFormWrapper addCalendarExceptionWeekWrapper = new HtmlFormWrapper("/routing/CalendarForms.xml", "AddCalendarExceptionWeek", request, response);
addCalendarExceptionWeekWrapper.putInContext("techDatacalendar", techDataCalendar);

context.put("techDataCalendar", techDataCalendar);
context.put("listCalendarExceptionWeekWrapper", listCalendarExceptionWeekWrapper);
context.put("addCalendarExceptionWeekWrapper", addCalendarExceptionWeekWrapper);

String exceptionDateStart = request.getParameter("exceptionDateStart");
if (exceptionDateStart == null)
    exceptionDateStart = request.getAttribute("exceptionDateStart");
if (exceptionDateStart != null) {
    calendarExceptionWeek = delegator.findByPrimaryKey("TechDataCalendarExcWeek", UtilMisc.toMap("calendarId", calendarId,"exceptionDateStart", exceptionDateStart));
    if (calendarExceptionWeek != null) {
        HtmlFormWrapper updateCalendarExceptionWeekWrapper = new HtmlFormWrapper("/routing/CalendarForms.xml", "UpdateCalendarExceptionWeek", request, response);
        updateCalendarExceptionWeekWrapper.putInContext("calendarExceptionWeek", calendarExceptionWeek);
        context.put("calendarExceptionWeek", calendarExceptionWeek);
        context.put("updateCalendarExceptionWeekWrapper", updateCalendarExceptionWeekWrapper);
    }
}