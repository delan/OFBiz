<?xml version="1.0" encoding="UTF-8" ?>
<!--
 *  Copyright (c) 2002-2004 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author <a href="mailto:jonesde@ofbiz.org">David E. Jones</a>
 * @author <a href="mailto:tiz@sastau.it">Jacopo Cappellato</a>
 * @version 1.0
 -->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">

    <!-- Industrial Costs -->
    <simple-method method-name="calculateProductCosts" short-description="Calculates the production run's cost">
        <set from-field="parameters.productId" field="callSvcMap.productId"/>
        
        <!-- calculate the total materials' cost -->
        <call-service service-name="getManufacturingComponents" in-map-name="callSvcMap">
            <result-to-field result-name="componentsMap"/>
        </call-service>
        <iterate entry-name="componentMap" list-name="componentsMap">
            <clear-field field-name="inputMap"/>
            <set field="product" from-field="componentMap.product"/>
            <set field="inputMap.productId" from-field="product.productId"/>
            <set field="inputMap.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="inputMap.productPriceTypeId" value="AVERAGE_COST"/>
            <call-service service-name="getProductCost" in-map-name="inputMap">
                <result-to-field result-name="productCost"/>
            </call-service>
            <calculate field-name="totalProductsCost">
                <calcop field-name="totalProductsCost" operator="add">
                    <calcop field-name="componentMap.quantity" operator="multiply">
                        <calcop field-name="productCost" operator="get"/>
                    </calcop>
                </calcop>
            </calculate>
        </iterate>
        
        <!-- calculate the total tasks' cost -->
        <call-service service-name="getProductRouting" in-map-name="callSvcMap">
            <result-to-field result-name="tasks"/>
            <result-to-field result-name="routing"/>
        </call-service>
        <iterate entry-name="task" list-name="tasks">
            <clear-field field-name="callSvcMap"/>
            <set from-field="task.workEffortIdTo" field="callSvcMap.taskId"/>
            <set from-field="parameters.currencyUomId" field="callSvcMap.currencyUomId"/>
            <set from-field="parameters.productId" field="callSvcMap.productId"/>
            <set from-field="routing.workEffortId" field="callSvcMap.routingId"/>
            <call-service service-name="getTaskCost" in-map-name="callSvcMap">
                <result-to-field result-name="taskCost" field-name="taskCost"/>
            </call-service>
            <calculate field-name="totalTaskCost">
                <calcop field-name="taskCost" operator="add"/>
            </calculate>
        </iterate>
        
        <calculate field-name="totalCost">
            <calcop field-name="totalTaskCost" operator="add">
                <calcop field-name="totalProductsCost" operator="get"/>
            </calcop>
        </calculate>
        
        <!-- The CostComponent records are created. -->
        <if-not-empty field-name="totalTaskCost">
            <clear-field field-name="callSvcMap"/>
            <set value="ESTIMATED_LABOR_COST" field="callSvcMap.costComponentTypeId"/>
            <set from-field="parameters.productId" field="callSvcMap.productId"/>
            <set from-field="parameters.currencyUomId" field="callSvcMap.costUomId"/>
            <set from-field="totalTaskCost" field="callSvcMap.cost"/>
            <call-service service-name="createCostComponent" in-map-name="callSvcMap"/>
        </if-not-empty>
        <!--<if-compare field-name="totalProductsCost" operator="greater" value="0" type="Double">-->
        <if-not-empty field-name="totalProductsCost">
            <clear-field field-name="callSvcMap"/>
            <set value="ESTIMATED_MATERIALS_" field="callSvcMap.costComponentTypeId"/>
            <set from-field="parameters.productId" field="callSvcMap.productId"/>
            <set from-field="parameters.currencyUomId" field="callSvcMap.costUomId"/>
            <set from-field="totalProductsCost" field="callSvcMap.cost"/>
            <call-service service-name="createCostComponent" in-map-name="callSvcMap"/>
        </if-not-empty>
        
        <field-to-result field-name="totalCost"/>
    </simple-method>
    <simple-method method-name="getTaskCost" short-description="Gets the production run task's costs">
        <!-- First of all, the estimated task time is computed -->
        <set-service-fields service-name="getEstimatedTaskTime" map-name="parameters" to-map-name="inputMap"/>
        <call-service service-name="getEstimatedTaskTime" in-map-name="inputMap">
            <result-to-field result-name="estimatedTaskTime"/>
        </call-service>

        <entity-one entity-name="WorkEffort" value-name="task"/>
        <get-related-one value-name="task" relation-name="FixedAsset" to-value-name="fixedAsset"/>
        <set from-field="parameters.currencyUomId" field="costsAndMap.amountUomId"/>
        <set value="SETUP_COST" field="costsAndMap.fixedAssetStdCostTypeId"/>
        <get-related value-name="fixedAsset" relation-name="FixedAssetStdCost" map-name="costsAndMap" list-name="setupCosts"/>
        <filter-list-by-date list-name="setupCosts"/>
        <!--<filter-list-by-and list-name="costs" map-name="costsAndMap"/>-->
        <first-from-list list-name="setupCosts" entry-name="setupCost"/>
        <set value="USAGE_COST" field="costsAndMap.fixedAssetStdCostTypeId"/>
        <get-related value-name="fixedAsset" relation-name="FixedAssetStdCost" map-name="costsAndMap" list-name="usageCosts"/>
        <filter-list-by-date list-name="usageCosts"/>
        <first-from-list list-name="usageCosts" entry-name="usageCost"/>
        
        <calculate field-name="taskCost">
            <calcop field-name="setupCost.amount" operator="add">
                <calcop field-name="estimatedTaskTime" operator="multiply">
                    <calcop field-name="usageCost.amount" operator="get"/>
                </calcop>
            </calcop>
        </calculate>
        
        <field-to-result field-name="taskCost"/>
    </simple-method>

    <simple-method method-name="getProductCost" short-description="Gets the product's costs (from CostComponent or ProductPrice)">
        <set from-field="parameters.productId" field="costsAndMap.productId"/>
        <set from-field="parameters.currencyUomId" field="costsAndMap.costUomId"/>
        <!-- Labor costs -->
        <set value="ESTIMATED_LABOR_COST" field="costsAndMap.costComponentTypeId"/>
        <find-by-and entity-name="CostComponent" map-name="costsAndMap" list-name="laborCosts"/>
        <filter-list-by-date list-name="laborCosts"/>
        <first-from-list list-name="laborCosts" entry-name="laborCost"/>
        <!-- Materials costs -->
        <set value="ESTIMATED_MATERIALS_" field="costsAndMap.costComponentTypeId"/>
        <find-by-and entity-name="CostComponent" map-name="costsAndMap" list-name="materialsCosts"/>
        <filter-list-by-date list-name="materialsCosts"/>
        <first-from-list list-name="materialsCosts" entry-name="materialsCost"/>
        <!-- Other costs -->
        <set value="ESTIMATED_OTHER_COST" field="costsAndMap.costComponentTypeId"/>
        <find-by-and entity-name="CostComponent" map-name="costsAndMap" list-name="otherCosts"/>
        <filter-list-by-date list-name="otherCosts"/>
        <first-from-list list-name="otherCosts" entry-name="otherCost"/>
        
        <calculate field-name="productCost">
            <calcop field-name="laborCost.cost" operator="add">
                <calcop field-name="materialsCost.cost" operator="get"/>
                <calcop field-name="otherCost.cost" operator="get"/>
            </calcop>
        </calculate>
        <if-compare field-name="productCost" operator="equals" value="0" type="Double">
            <clear-field field-name="costsAndMap"/>
            <set from-field="parameters.productId" field="costsAndMap.productId"/>
            <set from-field="parameters.currencyUomId" field="costsAndMap.currencyUomId"/>
            <set from-field="parameters.productPriceTypeId" field="costsAndMap.productPriceTypeId"/>
            <find-by-and entity-name="ProductPrice" map-name="costsAndMap" list-name="priceCosts"/>
            <filter-list-by-date list-name="priceCosts"/>
            <first-from-list list-name="priceCosts" entry-name="priceCost"/>
            <if-not-empty field-name="priceCost.price">
                <set from-field="priceCost.price" field="productCost"/>
            </if-not-empty>
        </if-compare>
        <field-to-result field-name="productCost"/>
    </simple-method>
    
    <simple-method method-name="createCostComponent" short-description="Create a CostComponent">
        <!-- The existing costs of the same type are expired -->
        <set from-field="parameters.productId" field="costsAndMap.productId"/>
        <set from-field="parameters.costUomId" field="costsAndMap.costUomId"/>
        <set from-field="parameters.costComponentTypeId" field="costsAndMap.costComponentTypeId"/>
        <find-by-and entity-name="CostComponent" map-name="costsAndMap" list-name="existingCosts"/>
        <filter-list-by-date list-name="existingCosts"/>
        <iterate list-name="existingCosts" entry-name="existingCost">
            <now-timestamp-to-env env-name="existingCost.thruDate"/>
            <store-value value-name="existingCost"/>
        </iterate>
        <!-- The new cost is created -->
        <make-value value-name="newEntity" entity-name="CostComponent"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <sequenced-id-to-env sequence-name="CostComponent" env-name="newEntity.costComponentId"/>
        <if-empty field-name="newEntity.fromDate">
            <now-timestamp-to-env env-name="newEntity.fromDate"/>
        </if-empty>
        <create-value value-name="newEntity"/>
        <field-to-result field-name="newEntity.costComponentId" result-name="costComponentId"/>
    </simple-method>

</simple-methods>

