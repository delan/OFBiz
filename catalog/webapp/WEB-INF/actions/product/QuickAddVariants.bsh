/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones
 *@author     Brad Steiner
 *@version    $Revision$
 *@since      2.2
 */

import java.util.*;
import java.io.*;
import java.sql.Timestamp;
import java.lang.Integer;
import org.ofbiz.core.entity.*;
import org.ofbiz.core.util.*;
import org.ofbiz.core.widgetimpl.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

if(security.hasEntityPermission("CATALOG", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}

String productId = request.getParameter("productId");
if (productId != null) context.put("productId", productId);

GenericValue product = delegator.findByPrimaryKey("Product", UtilMisc.toMap("productId", productId));
if (product != null) context.put("product", product);

List featureTypes = new ArrayList();

//just get the selectable features
List productFeatureAndAppls = EntityUtil.filterByDate(delegator.findByAnd("ProductFeatureAndAppl", 
        UtilMisc.toMap("productId", productId, "productFeatureApplTypeId", "SELECTABLE_FEATURE"), 
        UtilMisc.toList("sequenceNum", "productFeatureApplTypeId", "productFeatureTypeId", "description")), true);
if (productFeatureAndAppls != null) {
    context.put("productFeatureAndAppls", productFeatureAndAppls);

    //get the list of unique feature types in the order they came from the db
    Iterator productFeatureAndApplIter = productFeatureAndAppls.iterator();
    while (productFeatureAndApplIter.hasNext()) {
        GenericValue productFeatureAndAppl = (GenericValue) productFeatureAndApplIter.next();
        String featureType = productFeatureAndAppl.getString("productFeatureTypeId");
        if (!featureTypes.contains(featureType)) {
            featureTypes.add(featureType);
        }
    }
}
if (featureTypes.size() > 0) context.put("featureTypes", featureTypes);

int featureTypeSize = featureTypes.size();
int[] indices = new int[featureTypeSize];

//this will contain a list of ProductFeatureAndAppls for each feature type
List featureTypeValues = new ArrayList();\

//for each feature type get the list of features
for (int i = 0; i < featureTypes.size(); i++) {
    String featureType = (String) featureTypes.get(i);
    featureTypeValues.add(i, EntityUtil.filterByAnd(productFeatureAndAppls, UtilMisc.toMap("productFeatureTypeId", featureType)));
    indices[i] = 0;
}
if (featureTypeValues.size() > 0) context.put("featureTypeValues", featureTypeValues);
