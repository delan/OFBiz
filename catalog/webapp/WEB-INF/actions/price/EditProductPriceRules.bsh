import java.util.*;
import java.io.*;
import java.sql.Timestamp;
import java.lang.Integer;
import org.ofbiz.core.entity.*;
import org.ofbiz.core.util.*;
import org.ofbiz.core.widgetimpl.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

if(security.hasEntityPermission("CATALOG", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}

Timestamp nowTimestamp = UtilDateTime.nowTimestamp();
context.put("nowTimestamp", nowTimestamp);

String priceRuleId = request.getParameter("productPriceRuleId");
GenericValue productPriceRule = null;
if (priceRuleId != null) {
    productPriceRule = delegator.findByPrimaryKey("ProductPriceRule", UtilMisc.toMap("productPriceRuleId", priceRuleId));
    
    if (productPriceRule != null) context.put("productPriceRule", productPriceRule);
}

List inputParamEnums = delegator.findByAndCache("Enumeration", UtilMisc.toMap("enumTypeId", "PROD_PRICE_IN_PARAM"), UtilMisc.toList("sequenceId"));
if (inputParamEnums != null) context.put("inputParamEnums", inputParamEnums);

List condOperEnums = delegator.findByAndCache("Enumeration", UtilMisc.toMap("enumTypeId", "PROD_PRICE_COND"), UtilMisc.toList("sequenceId"));
if (condOperEnums != null) context.put("condOperEnums", condOperEnums);

List productPriceActionTypes = delegator.findAllCache("ProductPriceActionType", UtilMisc.toList("description"));
if (productPriceActionTypes != null) context.put("productPriceActionTypes", productPriceActionTypes);
