import java.util.*;
import java.sql.*;
import java.io.*;
import org.ofbiz.core.entity.*;
import org.ofbiz.core.util.*;
import org.ofbiz.core.widgetimpl.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

if(security.hasEntityPermission("CATALOG", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}    

String nowTimestampString = UtilDateTime.nowTimestamp().toString();
context.put("nowTimestampString", nowTimestampString);

//default this to true, ie only show active
boolean activeOnly = !"false".equals(request.getParameter("activeOnly"));
context.put("activeOnly", activeOnly);

boolean useValues = true;
if (request.getAttribute(SiteDefs.ERROR_MESSAGE) != null) useValues = false;

String productCategoryId = request.getParameter("productCategoryId");
context.put("productCategoryId", productCategoryId);

GenericValue productCategory = delegator.findByPrimaryKey("ProductCategory", UtilMisc.toMap("productCategoryId", productCategoryId));
if (productCategory == null) useValues = false; else context.put("productCategory", productCategory);

List productCategoryMembers = productCategory.getRelated("ProductCategoryMember", null, UtilMisc.toList("sequenceNum", "productId"));
if (activeOnly) {
    productCategoryMembers = EntityUtil.filterByDate(productCategoryMembers, true);
}
if (productCategoryMembers != null) context.put("productCategoryMembers", productCategoryMembers);

List productCategories = delegator.findAll("ProductCategory", UtilMisc.toList("description"));
if (productCategories != null) context.put("productCategories", productCategories);

if ("true".equalsIgnoreCase((String)request.getParameter("useValues"))) useValues = true;
context.put("useValues", useValues);

int viewIndex = 0;
int viewSize = 20;
int highIndex = 0;
int lowIndex = 0;
int listSize = 0;

try {
    viewIndex = Integer.valueOf((String) context.getRequest().getParameter("VIEW_INDEX")).intValue();
} catch (Exception e) {
    viewIndex = 0;
}
context.put("viewIndex", viewIndex);

try {
    viewSize = Integer.valueOf((String) context.getRequest().getParameter("VIEW_SIZE")).intValue();
} catch (Exception e) {
    viewSize = 20;
}
context.put("viewSize", viewSize);

if (productCategoryMembers != null) {
    listSize = productCategoryMembers.size();
}
context.put("listSize", listSize);

lowIndex = viewIndex * viewSize;
highIndex = (viewIndex + 1) * viewSize;
if (listSize < highIndex) { 
    if (listSize > 0) { 
        highIndex = listSize-1;
    } else {
        highIndex = 0;
    }
} 
context.put("lowIndex", lowIndex);
context.put("highIndex", highIndex);
