import org.ofbiz.core.util.*;
import org.ofbiz.core.entity.*;

security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

if(security.hasEntityPermission("CATALOG", "_VIEW", session)) {
    context.put("hasPermission", Boolean.TRUE);
} else {
    context.put("hasPermission", Boolean.FALSE);
}

    String nowTimestampString = UtilDateTime.nowTimestamp().toString();

    boolean useValues = true;
    if(request.getAttribute(SiteDefs.ERROR_MESSAGE) != null) useValues = false;

    String productCategoryId = request.getParameter("showProductCategoryId");
    GenericValue productCategory = delegator.findByPrimaryKey("ProductCategory", UtilMisc.toMap("productCategoryId", productCategoryId));
    Collection parentProductCategoryRollups = null;
    Collection currentProductCategoryRollups = null;
    if(productCategory == null) {
        useValues = false;
    } else {
        parentProductCategoryRollups = productCategory.getRelated("ParentProductCategoryRollup");
        if (parentProductCategoryRollups != null) context.put("parentProductCategoryRollups", parentProductCategoryRollups);

        currentProductCategoryRollups = productCategory.getRelated("CurrentProductCategoryRollup");
        if (currentProductCategoryRollups != null) context.put("currentProductCategoryRollups", currentProductCategoryRollups);
    }

    Collection productCategoryCol = delegator.findAll("ProductCategory", UtilMisc.toList("description"));

context.put("productCategoryId", productCategoryId);
context.put("productCategory", productCategory);
context.put("productCategoryCol", productCategoryCol);
