/*
 *  Copyright (c) 2001-2005 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Rev: 5462 $
 *@since      3.0
 */

import java.util.*;
import java.math.*;
import java.sql.Timestamp;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import org.ofbiz.webapp.control.*;
import org.ofbiz.accounting.invoice.*;
import org.ofbiz.entity.condition.*;

delegator = parameters.get("delegator");
String organizationPartyId = parameters.get("organizationPartyId");
GenericValue partyAcctgPreference = delegator.findByPrimaryKey("PartyAcctgPreference",UtilMisc.toMap("partyId",organizationPartyId));
String prefix = new Srting("");
if (partyAcctgPreference != null
	prefix = partyAcctgPreference.getString("invoiceIdPrefix");

String year = parameters.get("year");
if (year.equals("")) {
	year = UtilDateTime.nowTimestamp().toString().substring(0,4);
}

Timestamp startDate = null;
Timestamp endDate = null;
startDate = Timestamp.valueOf(year.concat("-01-01 00:00:00"));
endDate = Timestamp.valueOf(year.concat("-12-31 23:59:59"));

// Create totals:
BigDecimal salesTaxInTot = new BigDecimal("0");
BigDecimal salesTaxOutTot = new BigDecimal("0");
BigDecimal revenueTot = new BigDecimal("0");
BigDecimal expensesTot = new BigDecimal("0");
BigDecimal MiscInTot = new BigDecimal("0");
BigDecimal MiscOutTot = new BigDecimal("0");
BigDecimal totalValueTot = new BigDecimal("0");

// set up basic search condition for the invoiceTable
// avoid invoices which are cancelled and only select with the according prefixes
EntityExpr invoiceNotCancelled = new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "INVOICE_CANCELLED");
EntityExpr invoicePrefixExpr = new EntityExpr("invoiceId", EntityOperator.LIKE, prefix.concat("%"));
// the date of the requested year
List dateExprs = new LinkedList();
	dateExprs.add(new EntityExpr("invoiceDate", EntityOperator.GREATER_THAN_EQUAL_TO, startDate));
	dateExprs.add(new EntityExpr("invoiceDate", EntityOperator.LESS_THAN_EQUAL_TO, endDate));

// set up basic search condition for the party Table
List partyExp = new LinkedList();
// only selected partyIds with invoiceprefix
partyExp.add(new EntityExpr("partyId", EntityOperator.LIKE, prefix.concat("%")));
if (organizationPartyId.equals("anet")) {
	partyExp.add(new EntityExpr("partyId", EntityOperator.EQUALS, "BelastingDienst"));
	partyExp.add(new EntityExpr("partyId", EntityOperator.EQUALS, "Sidin"));
	partyExp.add(new EntityExpr("partyId", EntityOperator.EQUALS, "Stulemeijer"));
}
EntityCondition partyCond = new EntityConditionList(partyExp, EntityOperator.OR);

List orderList = new LinkedList();
orderList.add("partyId");

companies = delegator.findByCondition("PartyNameView",partyCond, null, orderList);
List invoiceList = new LinkedList(); // list to put on screen
List compCheck = new LinkedList();	// for crosschecking totals
Iterator comp = companies.iterator();
while (comp.hasNext())	{
	company = comp.next();
	partyId = company.getString("partyId");
	compCheck.add(partyId);
	if (partyId.equals(organizationPartyId)) continue;  // do not process own company
	name = company.getString("groupName");
	if (name == null) 	{
		if (company.getString("lastName") != null)	{
			name = company.getString("lastName");
			if (company.getString("firstName") != null)	{
				name = name.concat(", ").concat(company.getString("lastName"));
			}
		}
	}
	BigDecimal salesTaxIn = new BigDecimal("0");
	BigDecimal salesTaxOut = new BigDecimal("0");
	BigDecimal revenue = new BigDecimal("0");
	BigDecimal expenses = new BigDecimal("0");
	BigDecimal MiscIn = new BigDecimal("0");
	BigDecimal MiscOut = new BigDecimal("0");
	BigDecimal totalValue = new BigDecimal("0");

	// purchase invoices
	List pExprs = new LinkedList();
		pExprs.add(invoicePrefixExpr);												// prefix
		pExprs.add(new EntityExpr("partyIdFrom", EntityOperator.EQUALS, partyId));	// party
		pExprs.add(new EntityConditionList(dateExprs, EntityOperator.AND));			// date limitation
		pExprs.add(invoiceNotCancelled);											// not cancelled
	EntityCondition pinvoiceCond = new EntityConditionList(pExprs, EntityOperator.AND);
	invoices = delegator.findByCondition("Invoice",pinvoiceCond,null,null);
	Iterator inv = invoices.iterator();
	while (inv.hasNext())	{
		invoice = inv.next();
		invoiceItems = invoice.getRelated("InvoiceItem");
		Iterator invit = invoiceItems.iterator();
		while (invit.hasNext())	{
			invoiceItem = invit.next();
			BigDecimal total = new BigDecimal("0");
			if (invoiceItem.getBigDecimal("amount") != null) {
				if (invoiceItem.getBigDecimal("quantity") != null)
					total = invoiceItem.getBigDecimal("amount").multiply(invoiceItem.getBigDecimal("quantity")).setScale(2,4);
				else
					total = invoiceItem.getBigDecimal("amount").setScale(2,4);
			}
			if (invoiceItem.getString("invoiceItemTypeId").equals("PINV_SALES_TAX"))	{
				salesTaxOut = salesTaxOut.add(total);
				salesTaxOutTot = salesTaxOutTot.add(total);
			}
			else {
				expenses = expenses.add(total);
				expensesTot = expensesTot.add(total);
			}
		}
	}
			
	// Sales invoices
	List sExprs = new LinkedList();
		sExprs.add(invoicePrefixExpr);												// prefix
		sExprs.add(new EntityExpr("partyId", EntityOperator.EQUALS, partyId));		// party
		sExprs.add(new EntityConditionList(dateExprs, EntityOperator.AND));			// date limitation
		sExprs.add(invoiceNotCancelled);											// not cancelled
	EntityCondition sinvoiceCond = new EntityConditionList(sExprs, EntityOperator.AND);
	
	invoices = delegator.findByCondition("Invoice",sinvoiceCond,null,null);
	Iterator inv = invoices.iterator();
	while (inv.hasNext())	{
		invoice = inv.next();
		invoiceItems = invoice.getRelated("InvoiceItem");
		Iterator invit = invoiceItems.iterator();
		while (invit.hasNext())	{
			invoiceItem = invit.next();
			BigDecimal total = new BigDecimal("0");
			if (invoiceItem.getBigDecimal("amount") != null) {
				if (invoiceItem.getBigDecimal("quantity") != null)
					total = invoiceItem.getBigDecimal("amount").multiply(invoiceItem.getBigDecimal("quantity")).setScale(2,4);
				else
					total = invoiceItem.getBigDecimal("amount").setScale(2,4);
			}
			if (invoiceItem.getString("invoiceItemTypeId").equals("INV_SALES_TAX"))	{
				salesTaxIn = salesTaxIn.add(total);
				salesTaxInTot = salesTaxInTot.add(total);
			}
			else {
				revenue = revenue.add(total);
				revenueTot = revenueTot.add(total);
			}
		}
	}
			
	Map listItem = UtilMisc.toMap("company",partyId,"name", name, "salesTaxIn",salesTaxIn.toString(),"salesTaxOut",salesTaxOut.toString());
	listItem.put("expenses", expenses.toString());
	listItem.put("revenue", revenue.toString());
	listItem.put("miscIn", MiscIn.toString());
	listItem.put("miscOut", MiscOut.toString());
	BigDecimal totalValue = salesTaxIn.add(salesTaxOut).add(revenue).add(expenses).add(MiscOut).add(MiscIn);
	listItem.put("totalValue", totalValue.toString());
	if (!totalValue.equals(new BigDecimal("0"))) invoiceList.add(listItem);
}

Map listItem = UtilMisc.toMap("company","Total.","name", " ", "salesTaxIn",salesTaxInTot,"salesTaxOut",salesTaxOutTot);
listItem.put("expenses", expensesTot);
listItem.put("revenue", revenueTot);
listItem.put("miscIn", MiscInTot);
listItem.put("miscOut", MiscOutTot);
BigDecimal totalValueTot = salesTaxInTot.add(salesTaxOutTot).add(revenueTot).add(expensesTot).add(MiscOutTot).add(MiscInTot);
listItem.put("totalValue", totalValueTot);
invoiceList.add(listItem);

// create total check of all values
BigDecimal generalTotal = new BigDecimal("0");
ii = delegator.findByCondition("InvoiceItem",invoicePrefixExpr,null,null);
	Iterator it = ii.iterator();
	while (it.hasNext())	{
		invoiceItem = it.next();
		GenericValue invoice = invoiceItem.getRelatedOne("Invoice");
		if (invoice.getString("statusId").equals("INVOICE_CANCELLED")) continue; // ignore cancelled items
		if (invoice.getTimestamp("invoiceDate").before(startDate)) continue;
		if (invoice.getTimestamp("invoiceDate").after(endDate)) continue;
		BigDecimal total = new BigDecimal("0");
		if (invoiceItem.getBigDecimal("amount") != null) {
			if (invoiceItem.getBigDecimal("quantity") != null)
				total = invoiceItem.getBigDecimal("amount").multiply(invoiceItem.getBigDecimal("quantity")).setScale(2,4);
			else
				total = invoiceItem.getBigDecimal("amount").setScale(2,4);
		}
		if (compCheck.indexOf(invoice.getString("partyId")) == -1) {
			Debug.logInfo(" not found to Party (" + invoice.getString("partyId") + ") in list: " + 
			 					invoiceItem.getString("invoiceItemTypeId") + " Id:" + invoiceItem.getString("invoiceId") +"/" + invoiceItem.getString("invoiceItemSeqId")  + " value: " + total,"ListInvoices.bsh");
			continue;
		}
		if (compCheck.indexOf(invoice.getString("partyIdFrom")) == -1) {
			Debug.logInfo(" not found from Party (" + invoice.getString("partyIdFrom") + ") in list: " + 
			 					invoiceItem.getString("invoiceItemTypeId") + " Id:" + invoiceItem.getString("invoiceId") +"/" + invoiceItem.getString("invoiceItemSeqId") + " value: " + total,"ListInvoices.bsh");
			continue;
		}
		generalTotal = generalTotal.add(total);
	}
invoiceList.add(UtilMisc.toMap("company","GeneralTotal","totalValue", generalTotal));

/*  testing
BigDecimal invoiceTotal = new BigDecimal("0");
	List invExprs = new LinkedList();
		invExprs.add(invoicePrefixExpr);												// prefix
		invExprs.add(new EntityExpr("invoiceTypeId", EntityOperator.EQUALS, "PURCHASE_INVOICE"));
		invExprs.add(new EntityConditionList(dateExprs, EntityOperator.AND));			// date limitation
		invExprs.add(invoiceNotCancelled);											// not cancelled
	EntityCondition invCond = new EntityConditionList(invExprs, EntityOperator.AND);
jj = delegator.findByCondition("Invoice",invCond,null,null);
	Iterator inv = jj.iterator();
	while (inv.hasNext())	{
		invoice = inv.next();
		invoiceTotal = invoiceTotal.add(InvoiceWorker.getInvoiceTotalBd(invoice));
	}
	Debug.logInfo("Invoice file total for prefix :" + prefix + " -- " + invoiceTotal,"");	
*/


context.put("invoiceList",invoiceList);
context.put("year",year);
context.put("organizationPartyId",organizationPartyId);