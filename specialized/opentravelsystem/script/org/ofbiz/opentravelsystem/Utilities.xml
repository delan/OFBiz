<?xml version="1.0" encoding="UTF-8" ?>
<!--
 * Copyright (c) 2001-2005 The Open Travel System project and repective authors.
 * Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author <a href="mailto:support@opentravelsystem.org">Hans Bakker</a>
 * @version 1.0
 -->
 
 <simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">
     
     <!-- create an invoice from a payment and apply the payment -->
     <simple-method method-name="CreateInvoicesFromPayments" short-description="--Create an Invoice header and detail records from a payment">
         <!--check-permission permission="CATALOG" action="_CREATE">
            <alt-permission permission="CATALOG_ROLE" action="_CREATE"/>
            <fail-message message="Security Error: to update you need CATALOG_CREATE or CATALOG_ADMIN permission, or the limited CATALOG_ROLE_CREATE permission"/>
        </check-permission>        
        <check-errors/-->
         <entity-condition entity-name="Payment" list-name="payments">
             <condition-list combine="and">
                 <condition-list combine="or">
                     <condition-expr field-name="partyIdFrom" operator="equals" value="${parameters.organizationPartyId}"/>
                     <condition-expr field-name="partyIdTo" operator="equals" value="${parameters.organizationPartyId}"/>
                 </condition-list>
                 <condition-list combine="or">
                     <condition-expr field-name="statusId" operator="equals" value="PMNT_NOT_PAID"/>
                 </condition-list>
             </condition-list>
         </entity-condition>
         <calculate field-name="invoicesCreated"><number value="0"/></calculate><!-- counter for totals..... -->
         <iterate entry-name="payment" list-name="payments">
             <!-- only select payments which do not have been (partly) applied and optionally generate also sales invoices-->
             <get-related value-name="payment" relation-name="PaymentApplication" list-name="paymentApplications"/>
             <get-related value-name="payment" relation-name="ToPaymentApplication" list-name="toPaymentApplications"/>
             <if-not-empty field-name="toPaymentApplications">
                 <list-to-list list-name="toPaymentApplications" to-list-name="paymentApplications"/>
             </if-not-empty>
             <if>
                 <condition>
                     <and>
                         <if-empty field-name="paymentApplications"/>
                         <or>
                             <not>
                                 <if-empty field-name="parameters.generateSalesInvoicesToo"/>
                             </not>
                             <if-compare field-name="payment.partyIdFrom" operator="equals" value="${parameters.organizationPartyId}"/>
                         </or>     
                     </and>
                 </condition>
                 <then>
                     <!--  create invoice header -->
                     <set from-field="payment.partyIdFrom" field="createInvoice.partyId"/>
                     <set from-field="payment.partyIdTo" field="createInvoice.partyIdFrom"/>
                     <set from-field="payment.currencyUomId" field="createInvoice.currencyUomId"/>
                     <set from-field="payment.effectiveDate" field="createInvoice.invoiceDate"/>
                     <set from-field="payment.effectiveDate" field="createInvoice.dueDate"/>
                     <set value="Generated from Payment ${payment.paymentId}" field="createInvoice.description"/>
                     <set value="INVOICE_IN_PROCESS" field="createInvoice.statusId"/>
                     <if-compare field-name="payment.partyIdFrom" operator="equals" value="${parameters.organizationPartyId}">
                         <set value="PURCHASE_INVOICE" field="createInvoice.invoiceTypeId"/>
                         <else>
                             <set value="SALES_INVOICE" field="createInvoice.invoiceTypeId"/>
                         </else>
                     </if-compare>
                     <call-service service-name="createInvoice" in-map-name="createInvoice">
                         <result-to-field result-name="invoiceId" field-name="invoiceItem.invoiceId"/>
                     </call-service>
                     <clear-field field-name="createInvoice"/><!-- required because the invoiceId gets inserted in here, not good to create the next one.-->                    
                     <calculate field-name="invoicesCreated">
                         <calcop operator="add">
                             <calcop operator="get" field-name="invoicesCreated"/>
                             <number value="1"/>
                         </calcop>
                     </calculate>
                     
                     <!-- check if party does not need a sales tax -->
                     <if-compare-field field-name="payment.partyIdFrom" operator="equals" to-field-name="parameters.organizationPartyId">
                         <set field="partyTaxInfoSearch.partyId" from-field="payment.partyIdTo"/>
                         <else>
                             <set field="partyTaxInfoSearch.partyId" from-field="payment.partyIdFrom"/>
                         </else>
                     </if-compare-field>
                     <set field="partyTaxInfoSearch.taxAuthGeoId" value="NLD"/>
                     <find-by-and entity-name="PartyTaxAuthInfo" map-name="partyTaxInfoSearch" list-name="partyTaxInfos"/>
                     <filter-list-by-date list-name="partyTaxInfos" to-list-name="fPartyTaxInfos"/>
                     <first-from-list entry-name="partyTaxInfo" list-name="fPartyTaxInfos"/>
                     <if>
                         <condition>
                             <and>
                                 <if-compare-field field-name="partyTaxInfo.partyId" operator="equals" to-field-name="partyTaxInfoSearch.partyId"/>
                                 <if-compare field-name="partyTaxInfo.isExempt" value="Y" operator="equals"/>
                             </and>
                         </condition>
                         <then>
                             <log level="always" message="+++Party: ${partyTaxInfoSearch.partyId}/${partyTaxInfo.partyId}, no VAT..."></log>
                             <!--  create one item record only, no tax required -->
                             <set value="N" field="invoiceItem.taxableFlag"/>
                             <set field="invoiceItem.amount" from-field="payment.amount"/>
                             <if-compare field-name="payment.partyIdFrom" operator="equals" value="${parameters.organizationPartyId}">
                                 <if-compare field-name="payment.paymentTypeId" value="SALES_TAX_PAYMENT" operator="equals">
                                     <set value="PINV_SALES_TAX" field="invoiceItem.invoiceItemTypeId"/>
                                     <else>
                                         <set value="PINV_SPROD_ITEM" field="invoiceItem.invoiceItemTypeId"/>
                                     </else>
                                 </if-compare>
                                 <else>
                                     <if-compare field-name="payment.paymentTypeId" value="SALES_TAX_PAYMENT" operator="equals">
                                         <set value="INV_SALES_TAX" field="invoiceItem.invoiceItemTypeId"/>
                                         <else>
                                             <set value="INV_MISC_CHARGE" field="invoiceItem.invoiceItemTypeId"/>
                                         </else>
                                     </if-compare>
                                 </else>
                             </if-compare>
                             <set value="Amount no VAT required" field="invoiceItem.description"/>
                             <call-service service-name="createInvoiceItem" in-map-name="invoiceItem"/>
                         </then>
                         <else> <!-- create two records one for the sales tax 19% -->
                             <log level="always" message="+++Party: ${partyTaxInfoSearch.partyId}, should pay VAT..."></log>
                             <!-- first invoiceItem -->
                             <set value="Y" field="invoiceItem.taxableFlag"/>
                             <calculate field-name="invoiceItem.amount" rounding-mode="HalfUp" >
                                 <calcop operator="divide">
                                     <calcop operator="multiply">
                                         <calcop operator="get" field-name="payment.amount"/>
                                         <number value="100"/>
                                     </calcop>
                                     <number value="119"/>
                                 </calcop>
                             </calculate>
                             <if-compare field-name="payment.partyIdFrom" operator="equals" value="${parameters.organizationPartyId}">
                                 <set value="PINV_SPROD_ITEM" field="invoiceItem.invoiceItemTypeId"/>
                                 <else>
                                     <set value="INV_SPROD_ITEM" field="invoiceItem.invoiceItemTypeId"/>
                                 </else>
                             </if-compare>
                             <set value="Amount ex. VAT" field="invoiceItem.description"/>
                             <call-service service-name="createInvoiceItem" in-map-name="invoiceItem"/>
                             
                             <!-- second record: create VAT record -->            
                             <calculate field-name="invoiceItem.amount" rounding-mode="HalfUp" >
                                 <calcop operator="divide">
                                     <calcop operator="multiply">
                                         <calcop operator="get" field-name="payment.amount"/>
                                         <number value="19"/>
                                     </calcop>
                                     <number value="119"/>
                                 </calcop>
                             </calculate>
                             <if-compare field-name="payment.partyIdFrom" operator="equals" value="${parameters.organizationPartyId}">
                                 <set value="PINV_SALES_TAX" field="invoiceItem.invoiceItemTypeId"/>
                                 <else>
                                     <set value="INV_SALES_TAX" field="invoiceItem.invoiceItemTypeId"/>
                                 </else>
                             </if-compare>
                             <set value="VAT 19%" field="invoiceItem.description"/>
                             <call-service service-name="createInvoiceItem" in-map-name="invoiceItem"/>
                         </else>                     
                     </if>
                     
                     <!-- apply the payment to the invoice -->
                     <set field="application.invoiceId" from-field="invoiceItem.invoiceId"/>
                     <set field="application.paymentId" from-field="payment.paymentId"/> 
                     <set field="application.amountApplied" from-field="payment.amount" />
                     <call-service service-name="updatePaymentApplication" in-map-name="application"/>
                     
                 </then>
             </if>
             <if-compare field-name="invoicesCreated" value="100" operator="greater-equals" type="Double">
                 <to-string field-name="invoicesCreated"/>
                 <string-append field-name="invoicesCreated" string=" invoices created, more to be processed, rerun action....."/>
                 <set value="${invoicesCreated}" field="_event_message_"/>
                 <return/>                 
             </if-compare>
         </iterate>
         <to-string field-name="invoicesCreated"/>
         <string-append field-name="invoicesCreated" string=" invoices created, all processed."/>
         <set value="${invoicesCreated}" field="_event_message_"/>
     </simple-method>
     
     <simple-method method-name="SendReceivePayments" 
         short-description="Set all payments with the 'not paid' status to send/received i.e. post payment" use-transaction="true">
         <!--check-permission permission="CATALOG" action="_CREATE">
            <alt-permission permission="CATALOG_ROLE" action="_CREATE"/>
            <fail-message message="Security Error: to update you need CATALOG_CREATE or CATALOG_ADMIN permission, or the limited CATALOG_ROLE_CREATE permission"/>
        </check-permission>        
        <check-errors/-->
         <entity-condition entity-name="Payment" list-name="payments">
             <condition-list combine="and">
                 <condition-list combine="or">
                     <condition-expr field-name="partyIdFrom" operator="equals" value="${parameters.organizationPartyId}"/>
                     <condition-expr field-name="partyIdTo" operator="equals" value="${parameters.organizationPartyId}"/>
                 </condition-list>
                 <condition-expr field-name="statusId" operator="equals" value="PMNT_NOT_PAID"/>
             </condition-list>
         </entity-condition>
         <set field="paymentsUpdated" value="0" type="Double"/>
         <iterate entry-name="payment" list-name="payments">
             <transaction-begin/>
             <log level="always" message="====== Processing Payment: ${payment.paymentId}"/>
             <set field="param.paymentId" from-field="payment.paymentId"/>
             
             <if-compare-field field-name="payment.partyIdFrom" operator="equals" to-field-name="parameters.organizationPartyId">
                 <set field="param.statusId" value="PMNT_SENT"/>
             </if-compare-field>
             
             <if-compare-field field-name="payment.partyIdTo" operator="equals" to-field-name="parameters.organizationPartyId">
                 <set field="param.statusId" value="PMNT_RECEIVED"/>
             </if-compare-field>
             
             <call-service service-name="setPaymentStatus" in-map-name="param">
                 <result-to-result result-name="result" service-result-name="result"/>
             </call-service>
             
             
             <calculate field-name="paymentsUpdated" type="Double">
                 <calcop operator="add">
                     <calcop operator="get" field-name="paymentsUpdated"/>
                     <number value="1"/>
                 </calcop>
             </calculate>
             
             <transaction-commit/>
             <if-compare field-name="paymentsUpdated" value="100" operator="greater-equals"  type="Double">
                 <to-string field-name="paymentsUpdated"/>
                 <string-append field-name="paymentsUpdated" string=" payments updated"/>
                 <set value="${paymentsUpdated}" field="_event_message_"/>
                 <return/>
             </if-compare>
         </iterate>
         <to-string field-name="paymentsUpdated"/>
         <string-append field-name="paymentsUpdated" string=" payments updated"/>
         <set value="${paymentsUpdated}" field="_event_message_"/>
     </simple-method>
     
     <!-- Post invoices and confirm payments -->
     <simple-method method-name="PostInvoicesStatements" short-description="--Post Invoices and Payments" use-transaction="true">
         <!--check-permission permission="CATALOG" action="_CREATE">
            <alt-permission permission="CATALOG_ROLE" action="_CREATE"/>
            <fail-message message="Security Error: to update you need CATALOG_CREATE or CATALOG_ADMIN permission, or the limited CATALOG_ROLE_CREATE permission"/>
        </check-permission>        
        <check-errors/-->
         <entity-condition entity-name="Payment" list-name="payments">
             <condition-list combine="and">
                 <condition-list combine="or">
                     <condition-expr field-name="partyIdFrom" operator="equals" value="${parameters.organizationPartyId}"/>
                     <condition-expr field-name="partyIdTo" operator="equals" value="${parameters.organizationPartyId}"/>
                 </condition-list>
                 <condition-list combine="or">
                     <condition-expr field-name="statusId" operator="equals" value="PMNT_RECEIVED"/>
                     <condition-expr field-name="statusId" operator="equals" value="PMNT_SENT"/>
                 </condition-list>
             </condition-list>
         </entity-condition>
         <calculate field-name="invoicesUpdated"><number value="0"/></calculate>
         <calculate field-name="paymentsUpdated"><number value="0"/></calculate>
         <iterate entry-name="payment" list-name="payments">
             <log level="always" message="Processing Payment ${payment.paymentId}"></log>
             <!-- only process fully applied payments -->
             <set field="applied" value="${bsh:org.ofbiz.accounting.payment.PaymentWorker.getPaymentAppliedBd(payment)}" />
             <if-compare-field field-name="applied" operator="equals" to-field-name="payment.amount" type="Double">
                 <set field="updStatus.statusId" value="PMNT_CONFIRMED"/>
                 <set field="updStatus.paymentId" from-field="payment.paymentId"/>
                 <call-service service-name="setPaymentStatus" in-map-name="updStatus"/>
                 <calculate field-name="paymentsUpdated">
                     <calcop operator="add">
                         <calcop operator="get" field-name="paymentsUpdated"/>
                         <number value="1"/>
                     </calcop>
                 </calculate>
             </if-compare-field>
         </iterate>
         <!-- find invoices with the status non paid and which are fully applied -->
         <entity-condition entity-name="Invoice" list-name="invoices">
             <condition-list combine="and">
                 <condition-expr field-name="statusId" operator="not-equals" value="INVOICE_PAID"/>
             </condition-list>
         </entity-condition>
         <iterate entry-name="invoice" list-name="invoices">
             <set field="notApplied" value="${bsh:org.ofbiz.accounting.invoice.InvoiceWorker.getInvoiceNotApplied(invoice)}"/>
             <log level="always" message="Looking at Invoice ${invoice.invoiceId} not applied value: ${notApplied}"></log>
             <if-compare field-name="notApplied" operator="equals" value="0.00"> <!-- only fully applied invoices required -->
                 <log level="always" message="Processing Invoice ${invoice.invoiceId}"></log>
                 <set-service-fields service-name="setInvoiceStatus" map-name="invoice" to-map-name="param"/>
                 <if-compare field-name="invoice.invoiceTypeId" value="SALES_INVOICE" operator="equals">
                     <if-compare field-name="param.statusId" value="INVOICE_IN_PROCESS" operator="equals">
                         <set field="param.statusId" value="INVOICE_READY"/>
                         <call-service service-name="setInvoiceStatus" in-map-name="param"/>
                     </if-compare>
                     <if-compare field-name="param.statusId" value="INVOICE_READY" operator="equals">
                         <set field="param.statusId" value="INVOICE_SENT"/>
                         <call-service service-name="setInvoiceStatus" in-map-name="param"/>
                     </if-compare>
                     <if-compare field-name="param.statusId" value="INVOICE_SENT" operator="equals">
                         <set field="param.statusId" value="INVOICE_PAID"/>
                         <call-service service-name="setInvoiceStatus" in-map-name="param"/>
                     </if-compare>
                 </if-compare>
                 
                 <if-compare field-name="invoice.invoiceTypeId" value="PURCHASE_INVOICE" operator="equals">
                     <if-compare field-name="param.statusId" value="INVOICE_IN_PROCESS" operator="equals">
                         <set field="param.statusId" value="INVOICE_RECEIVED"/>
                         <call-service service-name="setInvoiceStatus" in-map-name="param"/>
                     </if-compare>
                     <if-compare field-name="param.statusId" value="INVOICE_RECEIVED" operator="equals">
                         <set field="param.statusId" value="INVOICE_PAID"/>
                         <call-service service-name="setInvoiceStatus" in-map-name="param"/>
                     </if-compare>
                 </if-compare>
             </if-compare>
             
             <check-errors/>                 
             
             <calculate field-name="invoicesUpdated">
                 <calcop operator="add">
                     <calcop operator="get" field-name="invoicesUpdated"/>
                     <number value="1"/>
                 </calcop>
             </calculate>
             <if-compare field-name="invoicesUpdated" operator="greater" value="99" type="Double">
                 <set field="message" value="Posting payments and related invoices. "/>
                 <to-string field-name="invoicesUpdated"/>
                 <string-append field-name="message"  string="${invoicesUpdated}"/>
                 <string-append field-name="message" string=" invoices updated"/>
                 <to-string field-name="paymentsUpdated"/>
                 <string-append field-name="message"  string="${paymentsUpdated}"/>
                 <string-append field-name="message" string=" payments updated"/>
                 <set value="${message}" field="_event_message_"/>
                 <return/>
             </if-compare>
         </iterate>
         <set field="message" value="Posting payments and related invoices. "/>
         <to-string field-name="invoicesUpdated"/>
         <string-append field-name="message"  string="${invoicesUpdated}"/>
         <string-append field-name="message" string=" invoices updated"/>
         <to-string field-name="paymentsUpdated"/>
         <string-append field-name="message"  string="${paymentsUpdated}"/>
         <string-append field-name="message" string=" payments updated"/>
         <set value="${message}" field="_event_message_"/>
     </simple-method>    
     
 </simple-methods>