<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Id: $
    
    Copyright 2001-2006 The Apache Software Foundation
    
    Licensed under the Apache License, Version 2.0 (the "License"); you may not
    use this file except in compliance with the License. You may obtain a copy of
    the License at
    
    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and limitations
    under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">

    <!-- ================================================================ -->
    <!-- Opentravelsystem Party Services -->
    <!-- ================================================================ -->
    
    <simple-method method-name="getOrganizationParty" short-description="-get all info about the organizational party-">
        <set field="partyData.partyId" from-field="parameters.userLogin.partyId"/>
        <call-service service-name="otsGetParty" in-map-name="partyData">
            <result-to-result service-result-name="groupName" result-name="groupName"/>
            <result-to-result service-result-name="logoImageUrl" result-name="logoImageUrl"/>
            <result-to-result service-result-name="address1"  result-name="address1"/>
            <result-to-result service-result-name="address2" result-name="address2"/>
            <result-to-result service-result-name="city" result-name="city"/>
            <result-to-result service-result-name="postalCode" result-name="postalCode"/>
            <result-to-result service-result-name="countryGeoId" result-name="countryGeoId"/>
            <result-to-result service-result-name="emailAddress" result-name="emailAddress"/>
            <result-to-result service-result-name="telephone" result-name="telephone"/>
            <result-to-result service-result-name="fax" result-name="fax"/>
            <result-to-result service-result-name="webAddress" result-name="webAddress"/>
            <result-to-result service-result-name="bankName" result-name="bankName"/>
            <result-to-result service-result-name="accountNumber" result-name="accountNumber"/>
            <result-to-result service-result-name="routingNumber" result-name="routingNumber"/>
        </call-service>
        <entity-one entity-name="PartyAcctgPreference" value-name="partyAcctgPreference" auto-field-map="false">
            <field-map field-name="partyId" env-name="parameters.userLogin.partyId"/>
        </entity-one>
        <field-to-result field-name="partyAcctgPreference.baseCurrencyUomId" result-name="baseCurrencyUomId"/>
    </simple-method>
    
    <simple-method method-name="updateOrganizationParty" short-description="-get all info about the organizational party-">
        <set-service-fields service-name="otsUpdateParty" map-name="parameters" to-map-name="updParty"/>
        <set field="updParty.partyId" from-field="parameters.userLogin.partyId"/>
        <call-service service-name="otsUpdateParty" in-map-name="updParty"/>
    </simple-method>
    
    <simple-method method-name="addParty" short-description="--Add a Party--">
        <check-permission permission="OPENTRAVELSYSTEM" action="_RW">
            <alt-permission permission="${parameters.userLogin.partyId}" action="_RW"/>
            <fail-message message="Security Error: to update you need RW access to &quot;${userLogin.partyId}&quot; in the &quot;OPENTRAVELSYSTEM&quot;"/>
        </check-permission>        
        <check-errors/>
        
        <if-empty field-name="parameters.groupName">
            <add-error>
                <fail-message message="Name of the new party is missing"/>
            </add-error>
        </if-empty>    
        <check-errors/>

        <!-- partygroup -->
        <!-- create id using the invoice prefix -->
        <entity-one entity-name="PartyAcctgPreference" value-name="partyAcctgPreference" auto-field-map="false">
            <field-map field-name="partyId" env-name="parameters.userLogin.partyId"/>
        </entity-one>
        <set field="createPartyGroup.groupName" from-field="parameters.groupName"/>
        <!--loop count="100"-->
            <sequenced-id-to-env sequence-name="${partyAcctgPreference.invoiceIdPrefix}Party" env-name="nextPartyId"/>
        <!--/loop-->
        <set-service-fields service-name="createPartyGroup" map-name="parameters" to-map-name="createPartyGroup"/>
        <set field="createPartyGroup.partyId" value="${partyAcctgPreference.invoiceIdPrefix}${nextPartyId}"/>        
        <call-service service-name="createPartyGroup" in-map-name="createPartyGroup">
            <result-to-field result-name="partyId" field-name="partyId"/>
        </call-service>    
        <check-errors/>

        <!-- postal address -->
        <if-not-empty field-name="parameters.address1">
            <set-service-fields service-name="otsUpdatePostalAddress" map-name="parameters" to-map-name="createPostalAddress"/>
            <set field="createPostalAddress.partyId" from-field="partyId"/>
            <call-service service-name="otsUpdatePostalAddress" in-map-name="createPostalAddress"/>
        </if-not-empty>
        
        <!-- email address -->
        <if-not-empty field-name="parameters.emailAddress">
            <set field="createEmailAddress.infoString" from-field="parameters.emailAddress"/>
            <set field="createEmailAddress.contactMechTypeId" value="EMAIL_ADDRESS"/>
            <set field="createEmailAddress.partyId" from-field="partyId"/>
            <set field="createEmailAddress.contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
            <call-service service-name="createPartyContactMech" in-map-name="createEmailAddress"/>    
        </if-not-empty>
        
        <!-- work phone -->
        <if-not-empty field-name="telephone" map-name="parameters">
            <set field="workPhoneContext.partyId" from-field="partyId"/>
            <set field="workPhoneContext.contactNumber" from-field="parameters.telephone"/>
            <call-service service-name="createPartyTelecomNumber" in-map-name="workPhoneContext">
                <result-to-field result-name="contactMechId" map-name="workPhonePurposeContext"/>
            </call-service>
            <set field="workPhonePurposeContext.partyId" from-field="partyId"/>
            <set field="workPhonePurposeContext.contactMechPurposeTypeId" value="PHONE_WORK"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="workPhonePurposeContext"/>
        </if-not-empty>
        
        <!-- fax phone -->
        <if-not-empty field-name="fax" map-name="parameters">
            <set field="faxPhoneContext.partyId" from-field="partyId"/>
            <set field="faxPhoneContext.contactNumber" from-field="parameters.fax"/>
            <call-service service-name="createPartyTelecomNumber" in-map-name="faxPhoneContext">
                <result-to-field result-name="contactMechId" map-name="faxPhonePurposeContext"/>
            </call-service>
            <set field="faxPhonePurposeContext.partyId" from-field="partyId"/>
            <set field="faxPhonePurposeContext.contactMechPurposeTypeId" value="FAX_NUMBER"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="faxPhonePurposeContext"/>
        </if-not-empty>
        
        <!-- bank account -->        
        <if-not-empty field-name="parameters.accountNumber">
            <set field="createEftAccount.partyId" from-field="partyId"/>
            <set field="createEftAccount.accountNumber" from-field="parameters.accountNumber"/>
            <set field="createEftAccount.accountType" value=" "/>
            <if-not-empty field-name="parameters.bankName">
                <set field="createEftAccount.bankName" from-field="parameters.bankName"/>
                <else>
                    <set field="createEftAccount.bankName" value=" "/>
                </else>
            </if-not-empty>
            <if-not-empty field-name="parameters.routingNumber">
                <set field="createEftAccount.routingNumber" from-field="parameters.routingNumber"/>
                <else>
                    <set field="createEftAccount.routingNumber" value=" "/>
                </else>
            </if-not-empty>
            <set field="createEftAccount.nameOnAccount" value=" "/>
            <call-service service-name="createEftAccount" in-map-name="createEftAccount"/>
        </if-not-empty>
        
        <field-to-result field-name="partyId" result-name="partyId"/>
        <field-to-request field-name="partyId" request-name="partyId"/>

        <!-- party relationship -->
        <set field="rel.partyIdFrom" from-field="parameters.userLogin.partyId"/>
        <set field="rel.partyIdTo" from-field="partyId"/>
        <set field="rel.partyRelationshipTypeId" from-field="parameters.partyRelationshipTypeId"/>
        <set field="rel.statusId" value="PARTYREL-ACTIVE"/>
        <call-service service-name="createPartyRelationship" in-map-name="rel"/>

    </simple-method>
    
    <simple-method method-name="updateParty" short-description="--Update an existingParty--">
        <check-permission permission="OPENTRAVELSYSTEM" action="_RW">
            <alt-permission permission="${parameters.userLogin.partyId}" action="_RW"/>
            <fail-message message="Security Error: to update you need RW access to &quot;${parameters.userLogin.partyId}&quot; in the &quot;OPENTRAVELSYSTEM&quot;"/>
        </check-permission>        
        <check-errors/>
        
        <!-- get the partygroup -->
        <entity-one entity-name="PartyGroup" value-name="partyGroup">
            <field-map field-name="partyId" value="${parameters.partyId}"/>
        </entity-one>
        
        <if-empty field-name="partyGroup">
            <add-error><fail-message message="party group ${parameters.partyId} not found"/></add-error>
        </if-empty>
        <check-errors/>
        
        <set-service-fields service-name="updatePartyGroup" map-name="parameters" to-map-name="pg"/>
        <call-service service-name="updatePartyGroup" in-map-name="pg"/>
        
        <!-- postal address -->
        <if-not-empty field-name="parameters.address1">
            <set-service-fields service-name="otsUpdatePostalAddress" map-name="parameters" to-map-name="pa"/>
            <call-service service-name="otsUpdatePostalAddress" in-map-name="pa"/>
        </if-not-empty>
        
        <!-- telephone  -->
        <if-not-empty field-name="parameters.telephone">
            <entity-and entity-name="PartyContactMechPurpose" list-name="partyContactMechPurposesU">
                <field-map field-name="partyId" value="${parameters.partyId}"/>
                <field-map field-name="contactMechPurposeTypeId" value="PHONE_WORK"/>
            </entity-and> 
            <filter-list-by-date list-name="partyContactMechPurposesU" to-list-name="partyContactMechPurposes"/>
            <if-not-empty field-name="partyContactMechPurposes">
                <first-from-list entry-name="partyContactMechPurpose" list-name="partyContactMechPurposes"/>
                <get-related-one value-name="partyContactMechPurpose" relation-name="TelecomNumber" to-value-name="telecomNumber"/>
            </if-not-empty>
            <if-compare-field field-name="parameters.telephone" operator="not-equals" to-field-name="telecomnumber.contactNumber">
                <set field="workPhonePurposeContext.contactMechPurposeTypeId" value="PRIMARY_PHONE"/>
                <if-empty field-name="partyContactMechPurposes"><!-- create new -->
                    <set field="workPhoneContext.partyId" from-field="parameters.partyId"/>
                    <set field="workPhoneContext.contactNumber" from-field="parameters.telephone"/>
                    <call-service service-name="createPartyTelecomNumber" in-map-name="workPhoneContext">
                        <result-to-field result-name="contactMechId" map-name="workPhonePurposeContext"/>
                    </call-service>
                    <set field="workPhonePurposeContext.partyId" from-field="parameters.partyId"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="workPhonePurposeContext"/>
                    <else><!-- update existing -->
                        <set field="telecomNumber.contactNumber" from-field="parameters.telephone"/>
                        <store-value value-name="telecomNumber"/>
                    </else>
                </if-empty>
            </if-compare-field>            
        </if-not-empty>
        
        <!-- fax  -->
        <if-not-empty field-name="parameters.fax">
            <entity-and entity-name="PartyContactMechPurpose" list-name="partyContactMechPurposeU">
                <field-map field-name="partyId" value="${parameters.partyId}"/>
                <field-map field-name="contactMechPurposeTypeId" value="FAX_NUMBER"/>
            </entity-and> 
            <filter-list-by-date list-name="partyContactMechPurposeU" to-list-name="partyContactMechPurposes"/>
            <if-not-empty field-name="partyContactMechPurposes">
                <first-from-list entry-name="partyContactMechPurpose" list-name="partyContactMechPurposes"/>
                <get-related-one value-name="partyContactMechPurpose" relation-name="TelecomNumber" to-value-name="telecomNumber"/>
            </if-not-empty>
            
            <if-compare-field field-name="parameters.fax" operator="not-equals" to-field-name="telecomNumber.contactNumber">
                <if-empty field-name="partyContactMechPurposes">
                    <set field="faxPhoneContext.partyId" from-field="parameters.partyId"/>
                    <set field="faxPhoneContext.contactNumber" from-field="parameters.fax"/>
                    <call-service service-name="createPartyTelecomNumber" in-map-name="faxPhoneContext">
                        <result-to-field result-name="contactMechId" map-name="faxPhonePurposeContext"/>
                    </call-service>
                    <set field="faxPhonePurposeContext.partyId" from-field="parameters.partyId"/>
                    <set field="faxPhonePurposeContext.contactMechPurposeTypeId" value="FAX_NUMBER"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="faxPhonePurposeContext"/>
                    <else><!-- update existing -->
                        <set field="telecomNumber.contactNumber" from-field="parameters.fax"/>
                        <store-value value-name="telecomNumber"/>
                    </else>
                </if-empty>
            </if-compare-field>
        </if-not-empty>        
        
        <!-- email address  -->
        <if-not-empty field-name="parameters.emailAddress">
            <entity-and entity-name="PartyAndContactMech" list-name="emailsU">
                <field-map field-name="partyId" value="${parameters.partyId}"/>
                <field-map field-name="contactMechTypeId" value="EMAIL_ADDRESS"/>
            </entity-and> 
            <filter-list-by-date list-name="emailsU" to-list-name="emails"/>
            <if-not-empty field-name="emails">
                <first-from-list entry-name="email" list-name="emails"/>
            </if-not-empty>
            <if-compare-field field-name="parameters.emailAddress" operator="not-equals" to-field-name="email.infoString">
                <set field="updEmailAddress.infoString" from-field="parameters.emailAddress"/>
                <set field="updEmailAddress.partyId" from-field="parameters.partyId"/>
                <set field="updEmailAddress.contactMechTypeId" value="EMAIL_ADDRESS"/>
                <set field="createEmailAddress.contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
                <if-empty field-name="emails">
                    <call-service service-name="createPartyContactMech" in-map-name="updEmailAddress"/>    
                    <else>
                        <set field="updEmailAddress.contactMechId" value="${email.contactMechId}"/>
                        <call-service service-name="updatePartyContactMech" in-map-name="updEmailAddress"/>    
                    </else>                
                </if-empty>
            </if-compare-field>
        </if-not-empty>
        
        <!-- website address  -->
        <if-not-empty field-name="parameters.webAddress">
            <entity-and entity-name="PartyAndContactMech" list-name="websitesU">
                <field-map field-name="partyId" value="${parameters.partyId}"/>
                <field-map field-name="contactMechTypeId" value="WEB_ADDRESS"/>
            </entity-and> 
            <filter-list-by-date list-name="websitesU" to-list-name="websites"/>
            <if-not-empty field-name="websites">
                <first-from-list entry-name="website" list-name="websites"/>
            </if-not-empty>
            <if-compare-field field-name="parameters.webAddress" operator="not-equals" to-field-name="website.infoString">
                <set field="updWebsiteAddress.infoString" from-field="parameters.webAddress"/>
                <set field="updWebsiteAddress.partyId" from-field="parameters.partyId"/>
                <set field="updWebsiteAddress.contactMechTypeId" value="WEB_ADDRESS"/>
                <if-empty field-name="websites">
                    <call-service service-name="createPartyContactMech" in-map-name="updWebsiteAddress"/>    
                    <else>
                        <set field="updWebsiteAddress.contactMechId" value="${website.contactMechId}"/>
                        <call-service service-name="updatePartyContactMech" in-map-name="updWebsiteAddress"/>    
                    </else>                
                </if-empty>
            </if-compare-field>
        </if-not-empty>
        
        <!-- Bank account number/name/routing -->
        <if>
            <condition>
                <or>
                    <not><if-empty field-name="parameters.accountNumber"/></not>
                    <not><if-empty field-name="parameters.bankName"/></not>
                    <not><if-empty field-name="parameters.routingNumber"/></not>
                </or>
            </condition>
            <then>
                <entity-and entity-name="PaymentMethod" list-name="paymentMethods">
                    <field-map field-name="partyId" value="${parameters.partyId}"/>
                    <field-map field-name="paymentMethodTypeId" value="EFT_ACCOUNT"/>
                </entity-and>
                <if-not-empty field-name="paymentMethods">
                    <first-from-list entry-name="paymentMethod" list-name="paymentMethods"/>
                    <get-related-one value-name="paymentMethod" relation-name="EftAccount" to-value-name="eftAccount"/>
                </if-not-empty>
                <if-empty field-name="paymentMethods"><!-- add -->
                    <set field="createEftAccount.partyId" from-field="parameters.partyId"/>
                    <set field="createEftAccount.accountNumber" from-field="parameters.accountNumber"/>
                    <set field="createEftAccount.accountType" value=" "/>
                    <if-not-empty field-name="parameters.bankName">
                        <set field="createEftAccount.bankName" from-field="parameters.bankName"/>
                        <else>
                            <set field="createEftAccount.bankName" value=" "/>
                        </else>
                    </if-not-empty>
                    <if-not-empty field-name="parameters.routingNumber">
                        <set field="createEftAccount.routingNumber" from-field="parameters.routingNumber"/>
                        <else>
                            <set field="createEftAccount.routingNumber" value=" "/>
                        </else>
                    </if-not-empty>
                    <set field="createEftAccount.nameOnAccount" value=" "/>
                    <call-service service-name="createEftAccount" in-map-name="createEftAccount"/>
                    <else><!-- update -->
                        <set field="eftAccount.accountNumber" from-field="parameters.accountNumber"/>
                        <if-not-empty field-name="parameters.bankName">
                            <set field="eftAccount.bankName" from-field="parameters.bankName"/>
                        </if-not-empty>
                        <if-not-empty field-name="parameters.routingNumber">
                            <set field="eftAccount.routingNumber" from-field="parameters.routingNumber"/>
                        </if-not-empty>
                        <store-value value-name="eftAccount"/><!-- had a problem with the updateEftAccount service -->
                    </else>
                </if-empty>
            </then>
        </if>
        
        <!-- party relationship -->
        <entity-and entity-name="PartyRelationship" list-name="partyRelationships">
            <field-map field-name="partyIdFrom" value="${parameters.userLogin.partyId}"/>
            <field-map field-name="partyIdTo" value="${parameters.partyId}"/>
        </entity-and>
        <first-from-list entry-name="partyRelationship" list-name="partyRelationships"/>
        <if-not-empty field-name="partyRelationship">
            <if-compare-field field-name="parameters.partyRelationshipTypeId" operator="not-equals" to-field-name="partyRelationship.partyRelationshipTypeId">
            <set field="newPartyRelationship.partyRelationshipTypeId" from-field="parameters.partyRelationshipTypeId"/>
            <set field="newPartyRelationship.partyIdFrom" from-field="partyRelationship.partyIdFrom"/>
            <set field="newPartyRelationship.partyIdTo" from-field="partyRelationship.partyIdTo"/>
            <set field="newPartyRelationship.roleTypeIdFrom" from-field="partyRelationship.roleTypeIdFrom"/>
            <set field="newPartyRelationship.roleTypeIdTo" from-field="partyRelationship.roleTypeIdTo"/>
            <set field="newPartyRelationship.fromDate" from-field="partyRelationship.fromDate"/>
            <call-service service-name="updatePartyRelationship" in-map-name="newPartyRelationship"/>
            </if-compare-field>
            <else><!-- old records -->
                <set field="rel.partyIdFrom" from-field="parameters.userLogin.partyId"/>
                <set field="rel.partyIdTo" from-field="parameters.partyId"/>
                <set field="rel.partyRelationshipTypeId" from-field="parameters.partyRelationshipTypeId"/>
                <set field="rel.statusId" value="PARTYREL-ACTIVE"/>
                <call-service service-name="createPartyRelationship" in-map-name="rel"/>
            </else>
        </if-not-empty>
        <field-to-result field-name="parameters.partyId" result-name="partyId"/>
        
    </simple-method>

    <simple-method method-name="getParty" short-description="--retrieve Party Information--">
        <check-permission permission="OPENTRAVELSYSTEM" action="_R">
            <alt-permission permission="${parameters.userLogin.partyId}" action="_RW"/>
            <fail-message message="Security Error: to read you need R access to &quot;${parameters.userLogin.partyId}&quot; in the &quot;OPENTRAVELSYSTEM&quot;"/>
        </check-permission>        
        <check-errors/>
        
        <if-empty field-name="parameters.partyId">
            <add-error><fail-message message="Party ID is missing"/></add-error>
            <check-errors/>
        </if-empty>

        <!-- party relationship -->
        <entity-and entity-name="PartyRelationship" list-name="partyRelationships">
            <field-map field-name="partyIdFrom" value="${parameters.userLogin.partyId}"/>
            <field-map field-name="partyIdTo" value="${parameters.partyId}"/>
        </entity-and>
        <first-from-list entry-name="partyRelationship" list-name="partyRelationships"/>
        <if-empty field-name="partyRelationship">
            <add-error><fail-message message="Partyrelationship type is missing"/></add-error>
        </if-empty>
        
        <field-to-result field-name="partyRelationship.partyRelationshipTypeId" result-name="partyRelationshipTypeId"/>

        <!-- get the partygroup -->
        <entity-one entity-name="PartyGroup" value-name="partyGroup">
            <field-map field-name="partyId" value="${parameters.partyId}"/>
        </entity-one>
        <if-empty field-name="partyGroup">
            <add-error><fail-message message="Partygroup not found"/></add-error>
            <return/>
        </if-empty>
        <field-to-result field-name="partyGroup.groupName" result-name="groupName"/>
        <field-to-result field-name="partyGroup.logoImageUrl" result-name="logoImageUrl"/>
        
        <!-- get the postal address defined as GENERAL LOCATION -->
        <set field="getKey.partyId" from-field="parameters.partyId"/>
        <call-service service-name="otsGetPostalAddress" in-map-name="getKey">
            <result-to-result service-result-name="address1"  result-name="address1"/>
            <result-to-result service-result-name="address2" result-name="address2"/>
            <result-to-result service-result-name="city" result-name="city"/>
            <result-to-result service-result-name="postalCode" result-name="postalCode"/>
            <result-to-result service-result-name="countryGeoId" result-name="countryGeoId"/>
        </call-service>
        
        <!-- email address  -->
        <entity-and entity-name="PartyAndContactMech" list-name="emailsU">
            <field-map field-name="partyId" value="${parameters.partyId}"/>
            <field-map field-name="contactMechTypeId" value="EMAIL_ADDRESS"/>
        </entity-and> 
        <filter-list-by-date list-name="emailsU" to-list-name="emails"/>
        <if-not-empty field-name="emails">
            <first-from-list entry-name="email" list-name="emails"/>
            <field-to-result field-name="email.infoString" result-name="emailAddress"/>
        </if-not-empty>
        
        <!-- website address  -->
        <entity-and entity-name="PartyAndContactMech" list-name="websitesU">
            <field-map field-name="partyId" value="${parameters.partyId}"/>
            <field-map field-name="contactMechTypeId" value="WEB_ADDRESS"/>
        </entity-and> 
        <filter-list-by-date list-name="websitesU" to-list-name="websites"/>
        <if-not-empty field-name="websites">
            <first-from-list entry-name="website" list-name="websites"/>
            <field-to-result field-name="website.infoString" result-name="webAddress"/>
        </if-not-empty>
        
        <!-- telephone  -->
        <entity-and entity-name="PartyContactMechPurpose" list-name="partyContactMechPurposesU">
            <field-map field-name="partyId" value="${parameters.partyId}"/>
            <field-map field-name="contactMechPurposeTypeId" value="PHONE_WORK"/>
        </entity-and> 
        <filter-list-by-date list-name="partyContactMechPurposesU" to-list-name="partyContactMechPurposes"/>
        <if-not-empty field-name="partyContactMechPurposes">
            <first-from-list entry-name="partyContactMechPurpose" list-name="partyContactMechPurposes"/>
            <get-related-one value-name="partyContactMechPurpose" relation-name="TelecomNumber" to-value-name="telecomNumber"/>
            <field-to-result field-name="telecomNumber.contactNumber" result-name="telephone"/>
        </if-not-empty>
        
        <!-- fax  -->
        <entity-and entity-name="PartyContactMechPurpose" list-name="partyContactMechPurposeU">
            <field-map field-name="partyId" value="${parameters.partyId}"/>
            <field-map field-name="contactMechPurposeTypeId" value="FAX_NUMBER"/>
        </entity-and> 
        <filter-list-by-date list-name="partyContactMechPurposeU" to-list-name="partyContactMechPurposes"/>
        <if-not-empty field-name="partyContactMechPurposes">
            <first-from-list entry-name="partyContactMechPurpose" list-name="partyContactMechPurposes"/>
            <get-related-one value-name="partyContactMechPurpose" relation-name="TelecomNumber" to-value-name="telecomNumber"/>
            <field-to-result field-name="telecomNumber.contactNumber" result-name="fax"/>
        </if-not-empty>
        
        <!-- Bank account number -->
        <entity-and entity-name="PaymentMethod" list-name="paymentMethods">
            <field-map field-name="partyId" value="${parameters.partyId}"/>
            <field-map field-name="paymentMethodTypeId" value="EFT_ACCOUNT"/>
        </entity-and>
        <if-not-empty field-name="paymentMethods">
            <first-from-list entry-name="paymentMethod" list-name="paymentMethods"/>
            <get-related-one value-name="paymentMethod" relation-name="EftAccount" to-value-name="eftAccount"/>
            <field-to-result field-name="eftAccount.accountNumber" result-name="accountNumber"/>
            <field-to-result field-name="eftAccount.bankName" result-name="bankName"/>
            <field-to-result field-name="eftAccount.routingNumber" result-name="routingNumber"/>
        </if-not-empty>

    </simple-method>
    
    <simple-method method-name="setStatusParty" short-description="--unDelete a Party--">
        <check-permission permission="OPENTRAVELSYSTEM" action="_RW">
            <alt-permission permission="${parameters.userLogin.partyId}" action="_RW"/>
            <fail-message message="Security Error: to update you need RW access to &quot;${parameters.userLogin.partyId}&quot; in the &quot;OPENTRAVELSYSTEM&quot;"/>
        </check-permission>        
        <check-errors/>
        
        <entity-and entity-name="PartyRelationship" list-name="relations">
            <field-map field-name="partyIdFrom" value="${parameters.userLogin.partyId}"/>
            <field-map field-name="partyIdTo" value="${parameters.partyId}"/>
        </entity-and>
        <filter-list-by-date list-name="relations" to-list-name="selRelations"/>
        <first-from-list entry-name="relation" list-name="selRelations"/>
        
        <set-service-fields service-name="updatePartyRelationship" map-name="relation" to-map-name="sRelation"/>
        <set field="sRelation.statusId" value="${parameters.statusId}"/>
        <call-service service-name="updatePartyRelationship" in-map-name="sRelation"/>
        <!--field-to-result field-name="sRelation.partyIdTo" result-name="partyId"/-->
    </simple-method>
    
    <simple-method method-name="createPartyRelationship" short-description="set the relationship between the party and the organizationParty">
        <check-permission permission="OPENTRAVELSYSTEM" action="_RW">
            <alt-permission permission="${parameters.userLogin.partyId}" action="_RW"/>
            <fail-message message="Security Error: to update you need RW access to &quot;${parameters.userLogin.partyId}&quot; in the &quot;OPENTRAVELSYSTEM&quot;"/>
        </check-permission>        
        <check-errors/>
        
        <entity-and entity-name="PartyRelationship" list-name="relations">
            <field-map field-name="partyIdFrom" value="${parameters.userLogin.partyId}"/>
            <field-map field-name="partyIdTo" value="${parameters.partyId}"/>
        </entity-and>
        <filter-list-by-date list-name="relations" to-list-name="selRelations"/>
        <first-from-list entry-name="relation" list-name="selRelations"/>
        
        <if-empty field-name="relation">
            <set field="rel.partyIdFrom" from-field="parameters.userLogin.partyId"/>
            <set field="rel.partyIdTo" from-field="partyId"/>
            <set field="rel.partyRelationshipTypeId" from-field="parameters.partyRelationshipTypeId"/>
            <set field="rel.statusId" value="PARTYREL-ACTIVE"/>
            <call-service service-name="createPartyRelationship" in-map-name="rel"/>
        </if-empty>        
        
    </simple-method>
    
    <simple-method method-name="updatePostalAddress" short-description="--add/update a postal address for a party--">
        <check-permission permission="OPENTRAVELSYSTEM" action="_RW">
            <alt-permission permission="${parameters.userLogin.partyId}" action="_RW"/>
            <fail-message message="Security Error: to update you need RW access to &quot;${parameters.userLogin.partyId}&quot; in the &quot;OPENTRAVELSYSTEM&quot;"/>
        </check-permission>        
        <check-errors/>
        
        <!-- check input -->        
        <if-empty field-name="parameters.countryGeoId"><!-- get countryGeoId from organizationparty if empty -->
            <entity-and entity-name="PartyAndPostalAddress" list-name="orgAddressesU">
                <field-map field-name="partyId" value="${parameters.userLogin.partyId}"/>
                <field-map field-name="contactMechTypeId" value="POSTAL_ADDRESS"/>
            </entity-and>
            <filter-list-by-date list-name="orgAddressesU" to-list-name="orgAddresses"/>
            <if-not-empty field-name="orgAddresses">
                <first-from-list entry-name="orgAddress" list-name="orgAddresses"/>
                <set field="parameters.countryGeoId" from-field="orgAddress.countryGeoId"/>
            </if-not-empty>
        </if-empty>
        <call-map-processor in-map-name="parameters" out-map-name="createPostalAddress">
            <simple-map-processor name="dummy">
                <process field="address1"><copy to-field="address1"/></process>
                <process field="address2"><copy to-field="address2"/></process>
                <process field="city"><copy/><not-empty><fail-message message="City is required too..."/></not-empty></process>
                <process field="postalCode"><copy/><not-empty><fail-message message="Postalcode is required"/></not-empty></process>
                <process field="countryGeoId"><copy to-field="countryGeoId"/><not-empty><fail-message message="Country is required"/></not-empty></process>
            </simple-map-processor>
        </call-map-processor>
        <check-errors/>
        
        <!-- get the postal address defined as GENERAL LOCATION -->
        <set field="getKey.partyId" from-field="parameters.partyId"/>
        <call-service service-name="otsGetPostalAddress" in-map-name="getKey">
            <result-to-field result-name="contactMechId" field-name="contactMechId"/><!-- required for update -->
            <result-to-field result-name="address1" field-name="postalAddress.address1"/>
            <result-to-field result-name="address2" field-name="postalAddress.address2"/>
            <result-to-field result-name="city" field-name="postalAddress.city"/>
            <result-to-field result-name="postalCode" field-name="postalAddress.postalCode"/>
            <result-to-field result-name="countryGeoId" field-name="postalAddress.countryGeoId"/>
        </call-service>
        
        <if><!-- check if we really need an update -->
            <condition>
                <or>
                    <if-empty field-name="contactMechId"/>  <!-- old address not present so add new one -->
                    <if-compare-field field-name="postalAddress.address1" operator="not-equals" to-field-name="parameters.address1"/>
                    <if-compare-field field-name="postalAddress.address2" operator="not-equals" to-field-name="parameters.address2"/>
                    <if-compare-field field-name="postalAddress.city" operator="not-equals" to-field-name="parameters.city"/>
                    <if-compare-field field-name="postalAddress.postalCode" operator="not-equals" to-field-name="parameters.postalCode"/>
                    <if-compare-field field-name="postalAddress.countryGeoId" operator="not-equals" to-field-name="parameters.countryGeoId"/>
                </or>
            </condition>
            <then>
                <if-empty field-name="contactMechId">  <!-- old address not present so add new one -->
                    <set field="createPartyPostaAddress.partyId" from-field="parameters.partyId"/>
                    <call-service service-name="createPartyPostalAddress" in-map-name="createPostalAddress">
                        <result-to-field result-name="contactMechId" field-name="addressPurposeContext.contactMechId"/>
                    </call-service>
                    <set field="addressPurposeContext.partyId" from-field="parameters.partyId"/>
                    <set field="addressPurposeContext.contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
                    <else> <!-- update existing one -->
                        <make-value value-name="newPostalAddress" entity-name="PostalAddress"/>
                        <set-nonpk-fields value-name="newPostalAddress" map-name="parameters"/>
                        <set field="newPostalAddress.contactMechId" from-field="contactMechId" />
                        <store-value value-name="newPostalAddress"/><!-- seems that updatePostalAddress service does not work -->
                    </else>
                </if-empty>
            </then>
        </if>
        
    </simple-method>
    
    <simple-method method-name="getPostalAddress" short-description="--get postal address for a party--">
        <check-permission permission="OPENTRAVELSYSTEM" action="_R">
            <alt-permission permission="${parameters.userLogin.partyId}" action="_RW"/>
            <fail-message message="Security Error: to update you need R access to &quot;${parameters.userLogin.partyId}&quot; in the &quot;OPENTRAVELSYSTEM&quot;"/>
        </check-permission>        
        <check-errors/>
        
        <!-- get the postal address defined as GENERAL LOCATION -->
        <entity-and entity-name="PartyContactMechPurpose" list-name="addressesU">
            <field-map field-name="partyId" value="${parameters.partyId}"/>
            <field-map field-name="contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
        </entity-and> 
        <filter-list-by-date list-name="addressesU" to-list-name="addresses"/>
        <if-not-empty field-name="addresses">
            <first-from-list entry-name="address" list-name="addresses"/>
            <get-related-one value-name="address" relation-name="PostalAddress" to-value-name="postalAddress"/>
            <field-to-result field-name="postalAddress.contactMechId" result-name="contactMechId"/>
            <field-to-result field-name="postalAddress.address1" result-name="address1"/>
            <field-to-result field-name="postalAddress.address2" result-name="address2"/>
            <field-to-result field-name="postalAddress.city" result-name="city"/>
            <field-to-result field-name="postalAddress.postalCode" result-name="postalCode"/>
            <field-to-result field-name="postalAddress.countryGeoId" result-name="countryGeoId"/>
        </if-not-empty>
    
    </simple-method>

    <simple-method method-name="createContactList" short-description="Create an ContactList">
        <entity-one entity-name="PartyAcctgPreference" value-name="partyAcctgPreference" auto-field-map="false" use-cache="true">
            <field-map field-name="partyId" env-name="parameters.userLogin.partyId"/>
        </entity-one>
        <if-not-empty field-name="partyAcctgPreference">
            <check-permission permission="OPENTRAVELSYSTEM" action="_RW">
                <alt-permission permission="${parameters.userLogin.partyId}" action="_RW"/>
                <fail-message message="Security Error: to update you need RW access to &quot;${parameters.partyId}&quot; in the &quot;OPENTRAVELSYSTEM&quot;"/>
            </check-permission>        
            <check-errors/>
            <sequenced-id-to-env sequence-name="${partyAcctgPreference.invoiceIdPrefix}ContactList" env-name="nextContactListId"/>
            <set field="parameters.contactListId" value="${partyAcctgPreference.invoiceIdPrefix}${nextContactListId}"/>
        </if-not-empty>
        <!-- call original ofbiz service with preset contactListId -->
        <set-service-fields service-name="createContactListOfbiz" map-name="parameters" to-map-name="createContactList"/>
        <call-service service-name="createContactListOfbiz" in-map-name="createContactList">
            <result-to-result result-name="contactListId" service-result-name="contactListId"/>
        </call-service>
    </simple-method>
    
</simple-methods>