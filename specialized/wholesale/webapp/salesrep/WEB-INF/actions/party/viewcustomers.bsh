<#--
*  Copyright (c) 2005 The Open For Business Project - www.ofbiz.org
*
*  Permission is hereby granted, free of charge, to any person obtaining a 
*  copy of this software and associated documentation files (the "Software"), 
*  to deal in the Software without restriction, including without limitation 
*  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
*  and/or sell copies of the Software, and to permit persons to whom the 
*  Software is furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included 
*  in all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
*  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
*  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
*  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
*  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
*  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*
*@author     Si Chen (sichen@sinfoniasolutions.com)
-->
import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import org.ofbiz.product.store.ProductStoreWorker;

String externalLoginKey = LoginEvents.getExternalLoginKey(request);
String externalKeyParam = externalLoginKey == null ? "" : "&externalLoginKey=" + externalLoginKey;
context.put("externalKeyParam",externalKeyParam);

delegator = request.getAttribute("delegator");
session = request.getSession(true);
dispatcher = request.getAttribute("dispatcher");
userLogin = session.getAttribute("userLogin");

rep_cust = session.getAttribute("rep_cust");
context.put("rep_cust",rep_cust);

GenericValue productStore = ProductStoreWorker.getProductStore(request);

if (productStore != null) {
  String productStoreId = productStore.getString("productStoreId");
  session.setAttribute("productStoreId", productStoreId);
}

    result = dispatcher.runSync("getPartiesFromRelationship", UtilMisc.toMap("partyId", userLogin.getString("partyId"), "roleTypeIdFrom", "AGENT", 
            "roleTypeIdTo", "CUSTOMER", "partyRelationshipTypeId", "CUSTOMER_REL"));
 
    parties = result.get("parties");
    if (parties != null) {
       partyIter = parties.iterator();
    }
    
    List partyList = new LinkedList();
    if (partyIter != null) { 
        GenericValue party = null; 
        while (partyIter.hasNext()) {
            Map serviceMap = null;

            serviceMap = (Map) partyIter.next();
            party = (GenericValue) serviceMap.get("party");
            if(party == null) continue;      
            
            GenericValue curPartyType = party.getRelatedOneCache("PartyType");
            GenericValue partyPersonType = delegator.findByPrimaryKeyCache("PartyType", UtilMisc.toMap("partyTypeId", "PERSON"));
       
            GenericValue person = null;
            GenericValue partyGroup = null;
            
            if (EntityTypeUtil.isType(curPartyType, partyPersonType)) {
                person = party.getRelatedOne("Person");
            } else {
                GenericValue partyGroupType = delegator.findByPrimaryKeyCache("PartyType", UtilMisc.toMap("partyTypeId", "PARTY_GROUP"));
                if (EntityTypeUtil.isType(curPartyType, partyGroupType)) {
                    partyGroup = party.getRelatedOne("PartyGroup");
                }
            }
             
            List userLogins = null;
            if (party != null) {
                userLogins = (List) delegator.findByAnd("UserLogin", UtilMisc.toMap("partyId", party.getString("partyId")));
            }
            StringBuffer sb = new StringBuffer();
            Iterator uli = UtilMisc.toIterator(userLogins);
            while (uli != null && uli.hasNext()) {
                GenericValue curUserLogin = (GenericValue) uli.next();
                sb.append(curUserLogin.getString("userLoginId"));
                if (uli.hasNext()) {
                    sb.append(", ");
                }
            }
            String userLoginString = sb.toString();
            partyList.add(UtilMisc.toMap("party", party, "person", person, "group", partyGroup, "userLogins", userLoginString));            
        }
  }
    context.put("parties", partyList);
    
donePage = request.getAttribute("DONE_PAGE");
if (donePage == null || donePage.length() <= 0)
	donePage = "";
context.put("donePage", donePage);