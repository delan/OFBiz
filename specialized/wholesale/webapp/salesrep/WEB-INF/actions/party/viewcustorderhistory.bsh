<#--
*  Copyright (c) 2005 The Open For Business Project - www.ofbiz.org
*
*  Permission is hereby granted, free of charge, to any person obtaining a 
*  copy of this software and associated documentation files (the "Software"), 
*  to deal in the Software without restriction, including without limitation 
*  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
*  and/or sell copies of the Software, and to permit persons to whom the 
*  Software is furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included 
*  in all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
*  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
*  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
*  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
*  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
*  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*
*@author     Si Chen (sichen@sinfoniasolutions.com)
-->
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.securityext.login.*;

String externalLoginKey = LoginEvents.getExternalLoginKey(request);
String externalKeyParam = externalLoginKey == null ? "" : "&externalLoginKey=" + externalLoginKey;
context.put("externalKeyParam",externalKeyParam);

delegator = request.getAttribute("delegator");
session = request.getSession(true);
dispatcher = request.getAttribute("dispatcher");
userLogin = session.getAttribute("userLogin");
filter = context.get("historyfilter");
partyId = context.get("partyId");

// if no partyId is specified, then get all parties for this rep
if ((filter != null) && (filter.equals("partyId")) && (partyId != null)) {
	parties = new LinkedList();
	GenericValue party = delegator.makeValue("Party", UtilMisc.toMap("partyId", partyId));
	parties.add(UtilMisc.toMap("party", party));
} else {
    result = dispatcher.runSync("getPartyFromRepId", UtilMisc.toMap("repPartyId", userLogin.getString("partyId")));
    if (result.get("parties") != null) {    
       parties = result.get("parties");
    }
}   

List orderHeaderList = new LinkedList();
    
// for each party, get a list of orders and related data
if (parties != null) {
	partyIter = parties.iterator();
    while (partyIter.hasNext()) {
        serviceMap = (Map) partyIter.next();
        party = (GenericValue) serviceMap.get("party");
               
        if (party == null) continue;      
           
        orderCollection = delegator.findByAnd("OrderHeaderPersonGroupRoleNote", UtilMisc.toMap("partyId", party.get("partyId"), "roleTypeId", "PLACING_CUSTOMER"));
        orderHeaderList.addAll(EntityUtil.orderBy(orderCollection, UtilMisc.toList("orderDate DESC")));
    }
      
    context.put("orderHeaderList", orderHeaderList);
}
