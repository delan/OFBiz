/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones (jonesde@ofbiz.org)
 *@version    $Revision$
 *@since      2.2
*/

import java.util.*;
import java.sql.Timestamp;
import org.ofbiz.core.entity.*;
import org.ofbiz.core.service.*;
import org.ofbiz.core.util.*;

dispatcher = request.getAttribute("dispatcher");
userLogin = session.getAttribute("userLogin");

orderHeaderList = null;
if (true) {
    paramList = paramList + "&lookupFlag=" + lookupFlag;
    lookupErrorMessage = null;   
    andExprs = new ArrayList();
    entityName = "OrderHeader"; 
    
    // find the orders for party    
    partyId = request.getParameter("partyId");
    userLoginId = request.getParameter("userLoginId");
    if (userLoginId != null && userLoginId.length() > 0) {        
        requestedUserLogin = delegator.findByPrimaryKeyCache("UserLogin", UtilMisc.toMap("userLoginId", userLoginId));
        if (requestedUserLogin != null) {
            partyId = requestedUserLogin.getString("partyId");
        } else {
            lookupErrorMessage = "No userLogin found for userLoginId: " + userLoginId;
        }
    }
        
    if (partyId != null && partyId.length() > 0) {
        paramList = paramList + "&partyId=" + partyId;
        entityName = "OrderHeaderAndRoles";
        andExprs.add(new EntityExpr("partyId", EntityOperator.EQUALS, partyId));      
    }
    
    // define the main condition
    mainCond = null;
    
    // now do the filtering
    if (lookupErrorMessage == null) {        
        roleType = request.getParameter("roleTypeId");
        orderType = request.getParameter("orderTypeId");
        orderStatus = request.getParameter("orderStatusId");
        webSiteId = request.getParameter("webSiteId");
        createdBy = request.getParameter("createdBy");
        billAcct = request.getParameter("billingAccountId");
        minDate = request.getParameter("minDate");
        maxDate = request.getParameter("maxDate");
        
        paramList = paramList + "&webSiteId=" + webSiteId;
        if (!"ANY".equals(webSiteId)) {           
            andExprs.add(new EntityExpr("webSiteId", EntityOperator.EQUALS, webSiteId));
        }               
        paramList = paramList + "&roleTypeId=" + roleType;
        if (!"ANY".equals(roleType)) {
            entityName = "OrderHeaderAndRoles";
            andExprs.add(new EntityExpr("roleTypeId", EntityOperator.EQUALS, roleType));
        }        
        paramList = paramList + "&orderTypeId=" + orderType;        
        if (!"ANY".equals(orderType)) {            
            andExprs.add(new EntityExpr("orderTypeId", EntityOperator.EQUALS, orderType));
        }
        paramList = paramList + "&orderStatusId=" + orderStatus;
        if (!"ANY". equals(orderStatus)) {            
            andExprs.add(new EntityExpr("statusId", EntityOperator.EQUALS, orderStatus));
        }
        if (billAcct != null && billAcct.length() > 0) {
            paramList = paramList + "&billingAccountId=" + billAcct;
            andExprs.add(new EntityExpr("billingAccountId", EntityOperator.EQUALS, billAcct));
        }     
        if (createdBy != null && createdBy.length() > 0) {
            paramList = paramList + "&createdBy=" + createdBy;
            andExprs.add(new EntityExpr("createdBy", EntityOperator.EQUALS, createdBy));
        }
        if (minDate != null && minDate.length() > 8) {            
            minDate = minDate.trim();
            if (minDate.length() < 14) minDate = minDate + " " + "00:00:00.000";
            paramList = paramList + "&minDate=" + minDate;
            andExprs.add(new EntityExpr("orderDate", EntityOperator.GREATER_THAN_EQUAL_TO, ObjectType.simpleTypeConvert(minDate, "Timestamp", null, null)));        
        }
        if (maxDate != null && maxDate.length() > 8) {
            maxDate = maxDate.trim();
            if (maxDate.length() < 14) maxDate = maxDate + " " + "23:59:59.999";
            paramList = paramList + "&maxDate=" + maxDate;
            andExprs.add(new EntityExpr("orderDate", EntityOperator.LESS_THAN_EQUAL_TO, ObjectType.simpleTypeConvert(maxDate, "Timestamp", null, null)));
        }
                
        if (andExprs.size() > 0) mainCond = new EntityConditionList(andExprs, EntityOperator.AND);        
                                                       
    }
    
    if (lookupErrorMessage == null && mainCond != null) {
        // do the lookup
        orderHeaderList = delegator.findByCondition(entityName, mainCond, null, UtilMisc.toList("-orderDate"));            
    }
    
    context.put("orderHeaderList", orderHeaderList);
    
    if (lookupErrorMessage != null) {
        context.put("lookupErrorMessage", lookupErrorMessage);
    }
}

// if orderHeaderList is null or empty the service will get all approved orders
inMap = UtilMisc.toMap("orderHeaderList", orderHeaderList, "userLogin", userLogin);
outMap = dispatcher.runSync("getPicklistData", inMap);
     
context.put("inventoryItemInfoList", outMap.get("inventoryItemInfoList"));
context.put("orderHeaderInfoList", outMap.get("orderHeaderInfoList"));
context.put("wrongQuantityReservedList", outMap.get("wrongQuantityReservedList"));
context.put("insufficientQohList", outMap.get("insufficientQohList"));

if ("error".equals(outMap.get("responseMessage"))) {
    Debug.logError("errorMessage: " + ServiceUtil.makeErrorMessage(outMap, "", "", "", ""));
}
