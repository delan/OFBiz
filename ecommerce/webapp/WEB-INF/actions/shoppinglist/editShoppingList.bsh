/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Andy Zeneski (jaz@ofbiz.org)
 *@version    $Revision$
 *@since      2.1.1
 */
 
import java.util.*;
import org.ofbiz.core.entity.*;
import org.ofbiz.core.util.*;

delegator = request.getAttribute("delegator");
userLogin = session.getAttribute("userLogin");
 
// get the top level shopping lists for the logged in user
allShoppingLists = delegator.findByAnd("ShoppingList", UtilMisc.toMap("partyId", userLogin.getString("partyId")), UtilMisc.toList("listName"));
shoppingLists = EntityUtil.filterByAnd(allShoppingLists, UtilMisc.toMap("parentShoppingListId", null));
context.put("allShoppingLists", allShoppingLists);
context.put("shoppingLists", shoppingLists);

// get all shoppingListTypes
shoppingListTypes = delegator.findAllCache("ShoppingListType", UtilMisc.toList("description"));
context.put("shoppingListTypes", shoppingListTypes);

// get the shoppingListId for this reqest
parameterMap = UtilHttp.getParameterMap(request);
shoppingListId = parameterMap.get("shoppingListId");
if (shoppingListId == null || shoppingListId.equals("")) 
    shoppingListId = request.getAttribute("shoppingListId");
 
// if we passed a shoppingListId get the shopping list info
if (shoppingListId != null) {
    shoppingList = delegator.findByPrimaryKey("ShoppingList", UtilMisc.toMap("shoppingListId", shoppingListId));
    context.put("shoppingList", shoppingList);

    if (shoppingList != null) {
        shoppingListItems = shoppingList.getRelated("ShoppingListItem");
        context.put("shoppingListItems", shoppingListItems);
        
        shoppingListType = shoppingList.getRelatedOne("ShoppingListType");
        context.put("shoppingListType", shoppingListType);
	
        // get the child shopping lists of the current list for the logged in user
        childShoppingLists = delegator.findByAnd("ShoppingList", UtilMisc.toMap("partyId", userLogin.getString("partyId"), "parentShoppingListId", shoppingListId), UtilMisc.toList("listName"));
        context.put("childShoppingLists", childShoppingLists);

        // get the parent shopping list if there is one
        parentShoppingList = shoppingList.getRelatedOne("ParentShoppingList");
        context.put("parentShoppingList", parentShoppingList);

        if (userLogin.getString("partyId").equals(shoppingList.getString("partyId"))) {
            context.put("canView", Boolean.TRUE);
        } else {
            context.put("canView", Boolean.FALSE);
        }
    }
}
 