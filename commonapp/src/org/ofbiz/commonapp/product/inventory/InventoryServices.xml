<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE simple-methods PUBLIC "-//OFBiz//DTD Simple Methods//EN" "http://www.ofbiz.org/dtds/simple-methods.dtd">

<!--
  *  Copyright (c) 2002 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author <a href="mailto:jonesde@ofbiz.org">David E. Jones</a>
 * @version 1.0
 * Created on April 2, 2002
 -->

<simple-methods>
    <!-- InventoryItem methods -->
    <simple-method method-name="createInventoryItem" short-description="Create an InventoryItem">
    <!-- BIG NOTE and TODO: need some way of easily doing either the CATALOG_* or the FACILITY_* permissions, ie allowing both... -->
        <check-permission permission="CATALOG" action="_CREATE">
        	<alt-permission permission="FACILITY" action="_CREATE"/>
        	<fail-message message="Security Error: to run createInventoryItem you must have the CATALOG_CREATE, CATALOG_ADMIN, FACILITY_CREATE, or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="InventoryItem"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>

        <sequenced-id-to-env sequence-name="InventoryItem" env-name="inventoryItemId"/>
        <to-string field-name="inventoryItemId"/>
        <env-to-field env-name="inventoryItemId" map-name="newEntity"/>
        <field-to-result field-name="inventoryItemId" result-name="inventoryItemId"/>

        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateInventoryItem" short-description="Update an InventoryItem">
        <check-permission permission="CATALOG" action="_UPDATE">
        	<alt-permission permission="FACILITY" action="_UPDATE"/>
        	<fail-message message="Security Error: to run updateInventoryItem you must have the CATALOG_UPDATE, CATALOG_ADMIN, FACILITY_UPDATE, or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value entity-name="InventoryItem" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="InventoryItem" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteInventoryItem" short-description="Delete an InventoryItem">
        <check-permission permission="CATALOG" action="_DELETE">
        	<alt-permission permission="FACILITY" action="_DELETE"/>
        	<fail-message message="Security Error: to run deleteInventoryItem you must have the CATALOG_DELETE, CATALOG_ADMIN, FACILITY_DELETE, or FACILITY_ADMIN permission"/>
        </check-permission>
        <check-errors/>

        <make-value entity-name="InventoryItem" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="InventoryItem" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ProductFacility methods -->
    <simple-method method-name="createProductFacility" short-description="Create a ProductFacility">
		<string-to-field string="createProductFacility" field-name="callingMethodName"/>
		<string-to-field string="CREATE" field-name="checkAction"/>
		<string-to-field string="FACILITY" field-name="alternatePermissionRoot"/>
    	<call-simple-method method-name="checkProductRelatedPermission" xml-resource="org/ofbiz/commonapp/product/product/ProductServices.xml"/>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="ProductFacility"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateProductFacility" short-description="Update a ProductFacility">
		<string-to-field string="updateProductFacility" field-name="callingMethodName"/>
		<string-to-field string="UPDATE" field-name="checkAction"/>
		<string-to-field string="FACILITY" field-name="alternatePermissionRoot"/>
    	<call-simple-method method-name="checkProductRelatedPermission" xml-resource="org/ofbiz/commonapp/product/product/ProductServices.xml"/>
        <check-errors/>

        <make-value entity-name="ProductFacility" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ProductFacility" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteProductFacility" short-description="Delete a ProductFacility">
		<string-to-field string="deleteProductFacility" field-name="callingMethodName"/>
		<string-to-field string="DELETE" field-name="checkAction"/>
		<string-to-field string="FACILITY" field-name="alternatePermissionRoot"/>
    	<call-simple-method method-name="checkProductRelatedPermission" xml-resource="org/ofbiz/commonapp/product/product/ProductServices.xml"/>
        <check-errors/>

        <make-value entity-name="ProductFacility" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="ProductFacility" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>

    <!-- ================================================================ -->
    <!-- Check/Reserve Inventory Services -->
    <!-- ================================================================ -->

    <simple-method method-name="getProductInventoryAvailable" short-description="Get Inventory Available for a Product" login-required="false" use-transaction="false">
        <!--
            this method can be called with some optional parameters:
                -facilityId
                -containerId
            If the service definitions are used then only one of these two will ever be specified, or neither of them.

            Whatever it is called with, it will basicly get a list of InventoryItems and total the available amount.
        -->

        <!-- this is not normally needed...
        <log level="info"><string value="Getting inventory available to promise count; parameters are: "/><field field-name="parameters"/></log>
        <log level="info" message="foo foo: "><string value="Getting inventory available to promise count; productId is: "/><field field-name="productId" map-name="parameters"/></log>
        -->
        
        <field-to-field field-name="productId" map-name="parameters" to-map-name="lookupFieldMap"/>
        <field-to-field field-name="facilityId" map-name="parameters" to-map-name="lookupFieldMap"/>
        <field-to-field field-name="containerId" map-name="parameters" to-map-name="lookupFieldMap"/>

        <!-- we might get away with a cache here since real serious errors will occur during the reservation service... but only if we need the speed -->
        <find-by-and entity-name="InventoryItem" map-name="lookupFieldMap" list-name="inventoryItems"/> <!-- use-cache="true" -->

        <calculate field-name="availableToPromise" map-name="parameters"><number value="0"/></calculate>
        <iterate entry-name="inventoryItem" list-name="inventoryItems">
            <if-compare value="SERIALIZED_INV_ITEM" operator="equals" field-name="inventoryItemTypeId" map-name="inventoryItem">
                <if-compare value="INV_AVAILABLE" operator="equals" field-name="statusId" map-name="inventoryItem">
                    <calculate field-name="availableToPromise" map-name="parameters">
                        <calcop operator="get" field-name="availableToPromise" map-name="parameters"/>
                        <number value="1.0"/>
                    </calculate>
                </if-compare>
            </if-compare>
            <if-compare value="NON_SERIAL_INV_ITEM" operator="equals" field-name="inventoryItemTypeId" map-name="inventoryItem">
                <if-not-empty field-name="availableToPromise" map-name="inventoryItem">
                    <calculate field-name="availableToPromise" map-name="parameters">
                        <calcop operator="get" field-name="availableToPromise" map-name="parameters"/>
                        <calcop operator="get" field-name="availableToPromise" map-name="inventoryItem"/>
                    </calculate>
                </if-not-empty>
            </if-compare>
        </iterate>

        <field-to-result field-name="availableToPromise" map-name="parameters"/>
    </simple-method>
    
    <simple-method method-name="getInventoryAlerts" short-description="getInventoryAlerts" login-required="false">
        <field-to-field field-name="catalogId" map-name="parameters" to-map-name="lookupFieldMap"/>
        <find-by-and entity-name="InventoryAlert" map-name="lookupFieldMap" list-name="inventoryAlerts" />
        <iterate entry-name="inventoryAlert" list-name="inventoryAlerts">
            <field-to-field map-name="inventoryAlert" field-name="productId" to-map-name="inventoryLookup" />
            <call-service service-name="getProductInventoryAvailable" in-map-name="inventoryLookup">
                <result-to-field result-name="availableToPromise" map-name="getInventoryResults" />
            </call-service>
            <if-compare-field field-name="availableToPromise" map-name="getInventoryResults" operator="less" to-map-name="inventoryAlert" to-field-name="inventoryLevel" type="Double" >
                <field-to-field map-name="inventoryAlert" field-name="productId" to-map-name="alertResult" />
                <field-to-field map-name="getInventoryResults" field-name="availableToPromise" to-map-name="alertResult" />
                <field-to-list field-name="alertResult" list-name="alertResults" />
            </if-compare-field>
        </iterate>
        <field-to-result result-name="alertResults" field-name="alertResults" />
        <field-to-request field-name="alertResults" request-name="alertResults" />
    </simple-method>
    
    <simple-method method-name="emailInventoryAlerts" short-description="Email Inventory Alerts" login-required="false">
        <field-to-field map-name="parameters" field-name="catalogId" to-map-name="urlParams" />
        <field-to-field field-name="urlParams" to-map-name="emailParams" to-field-name="bodyUrlParameters" />
        <string-to-field string="mail.smtp.host" field-name="sendType" map-name="emailParams" />
        
        <property-to-field resource="inventoryalerts" property="mailhost" field-name="sendVia" map-name="emailParams"/>
        <property-to-field resource="inventoryalerts" property="sendTo" field-name="sendTo" map-name="emailParams"/>
        <property-to-field resource="inventoryalerts" property="sendFrom" field-name="sendFrom" map-name="emailParams"/>
        <property-to-field resource="inventoryalerts" property="subject" field-name="subject" map-name="emailParams"/>
        <property-to-field resource="inventoryalerts" property="bodyUrl" field-name="bodyUrl" map-name="emailParams"/>
        <call-service service-name="getInventoryAlerts" in-map-name="parameters" >
            <result-to-field result-name="alertResults" map-name="getInventoryResults" />
        </call-service>
        <if-not-empty map-name="getInventoryResults" field-name="alertResults">
            <call-service service-name="sendMailFromUrl" in-map-name="emailParams"/>
        </if-not-empty>
    </simple-method>
        
    <simple-method method-name="reserveProductInventory" short-description="Reserve Inventory for a Product">
        <!--
            this method can be called with some optional parameters:
                -facilityId
                -containerId
            If the service definitions are used then only one of these two will ever be specified, or neither of them.

            Whatever it is called with, it will basicly get a list of InventoryItems and reserve the first available inventory.

            If requireInventory is Y the quantity not reserved is returned, if N then a negative
            availableToPromise will be used to track quantity ordered beyond what is in stock.
        -->

        <field-to-field field-name="productId" map-name="parameters" to-map-name="lookupFieldMap"/>
        <field-to-field field-name="facilityId" map-name="parameters" to-map-name="lookupFieldMap"/>
        <field-to-field field-name="containerId" map-name="parameters" to-map-name="lookupFieldMap"/>
        <now-timestamp-to-env env-name="nowTimestamp"/>

        <!-- before we do the find, put together the orderBy list based on which reserveOrderEnumId is specified -->
        <if-compare value="INVRO_FIFO_EXP" operator="equals" field-name="reserveOrderEnumId" map-name="parameters">
            <string-to-field string="+expireDate" field-name="orderByString"/>

            <else>
            <if-compare value="INVRO_LIFO_EXP" operator="equals" field-name="reserveOrderEnumId" map-name="parameters">
                <string-to-field string="-expireDate" field-name="orderByString"/>

                <else>
                <if-compare value="INVRO_LIFO_REC" operator="equals" field-name="reserveOrderEnumId" map-name="parameters">
                    <string-to-field string="+dateReceived" field-name="orderByString"/>

                    <else>
                        <!-- the default reserveOrderEnumId is INVRO_FIFO_REC, ie FIFO based on date received -->
                        <string-to-field string="-dateReceived" field-name="orderByString"/>
                    </else>
                </if-compare>
                </else>
            </if-compare>
            </else>
        </if-compare>
        <field-to-list field-name="orderByString" list-name="orderByList"/>

        <find-by-and entity-name="InventoryItem" map-name="lookupFieldMap" list-name="inventoryItems" order-by-list-name="orderByList"/>

        <field-to-field field-name="quantity" map-name="parameters" to-field-name="quantityNotReserved"/>
        <iterate entry-name="inventoryItem" list-name="inventoryItems">
            <!-- only do something with this inventoryItem if there is more inventory to reserve -->
            <if-compare field-name="quantityNotReserved" map-name="parameters" type="Double" operator="greater" value="0.0">
                <if-compare value="SERIALIZED_INV_ITEM" operator="equals" field-name="inventoryItemTypeId" map-name="inventoryItem">
                    <if-compare value="INV_AVAILABLE" operator="equals" field-name="statusId" map-name="inventoryItem">
                        <!-- change status on inventoryItem -->
                        <string-to-field string="INV_PROMISED" field-name="statusId" map-name="inventoryItem"/>
                        <store-value value-name="inventoryItem"/>

                        <!-- store OrderItemInventoryRes record -->
                        <make-value entity-name="OrderItemInventoryRes" value-name="newOiirEntity"/>
                        <field-to-field field-name="orderId" map-name="parameters" to-map-name="newOiirEntity"/>
                        <field-to-field field-name="orderItemSeqId" map-name="parameters" to-map-name="newOiirEntity"/>
                        <field-to-field field-name="inventoryItemId" map-name="inventoryItem" to-map-name="newOiirEntity"/>
                        <field-to-field field-name="reservedDatetime" map-name="parameters" to-map-name="newOiirEntity"/>
                        <string-to-field string="OIIR_RESERVED" field-name="statusId" map-name="newOiirEntity"/>
                        <calculate field-name="quantity" map-name="newOiirEntity"><number value="1"/></calculate>
                        <if-empty field-name="reservedDatetime" map-name="newOiirEntity">
                            <env-to-field env-name="nowTimestamp" field-name="reservedDatetime" map-name="newOiirEntity"/>
                        </if-empty>                        
                        <create-value value-name="newOiirEntity"/>

                        <calculate field-name="quantityNotReserved" map-name="parameters">
                            <calcop operator="subtract" field-name="quantityNotReserved" map-name="parameters">
                                <number value="1.0"/>
                            </calcop>
                        </calculate>
                    </if-compare>
                </if-compare>
                <if-compare value="NON_SERIAL_INV_ITEM" operator="equals" field-name="inventoryItemTypeId" map-name="inventoryItem">
                    <if-not-empty field-name="availableToPromise" map-name="inventoryItem">
                        <!-- reduce atp on inventoryItem if availableToPromise greater than 0, if not the code at the end of this method will handle it -->
                        <if-compare field-name="availableToPromise" map-name="inventoryItem" operator="greater" value="0.0" type="Double">
                            <if-compare-field field-name="quantityNotReserved" map-name="parameters" operator="greater" type="Double"
                                    to-field-name="availableToPromise" to-map-name="inventoryItem">
                                <field-to-field field-name="availableToPromise" map-name="inventoryItem" to-field-name="deductAmount" to-map-name="parameters"/>
                                <else>
                                    <field-to-field field-name="quantityNotReserved" map-name="parameters" to-field-name="deductAmount" to-map-name="parameters"/>
                                </else>
                            </if-compare-field>
                            <calculate field-name="availableToPromise" map-name="inventoryItem">
                                <calcop operator="subtract" field-name="availableToPromise" map-name="inventoryItem">
                                    <calcop operator="get" field-name="deductAmount" map-name="parameters"/>
                                </calcop>
                            </calculate>
                            <store-value value-name="inventoryItem"/>

                            <!-- create OrderItemInventoryRes record -->
                            <make-value entity-name="OrderItemInventoryRes" value-name="newOiirEntity"/>
                            <field-to-field field-name="orderId" map-name="parameters" to-map-name="newOiirEntity"/>
                            <field-to-field field-name="orderItemSeqId" map-name="parameters" to-map-name="newOiirEntity"/>
                            <field-to-field field-name="inventoryItemId" map-name="inventoryItem" to-map-name="newOiirEntity"/>
                            <field-to-field field-name="reservedDatetime" map-name="parameters" to-map-name="newOiirEntity"/>
                            <field-to-field field-name="deductAmount" map-name="parameters" to-field-name="quantity" to-map-name="newOiirEntity"/>
                            <string-to-field string="OIIR_RESERVED" field-name="statusId" map-name="newOiirEntity"/>
                            <if-empty field-name="reservedDatetime" map-name="newOiirEntity">
                                <env-to-field env-name="nowTimestamp" field-name="reservedDatetime" map-name="newOiirEntity"/>
                            </if-empty>
                            <create-value value-name="newOiirEntity"/>

                            <!-- keep track of the last non-serialized inventory item and corresponding order item inv res for use if inventory is not required for purchase -->
                            <!-- use env variable named lastNonSerInventoryItem, lastNonSerOrderItemInventoryRes -->
                            <env-to-field env-name="newOiirEntity" field-name="lastNonSerOrderItemInventoryRes"/>

                            <calculate field-name="quantityNotReserved" map-name="parameters">
                                <calcop operator="subtract" field-name="quantityNotReserved" map-name="parameters">
                                    <calcop operator="get" field-name="deductAmount" map-name="parameters"/>
                                </calcop>
                            </calculate>
                        </if-compare>
                    </if-not-empty>

                    <!-- keep track of the last non-serialized inventory item and corresponding order item inv res for use if inventory is not required for purchase -->
                    <!-- use env variable named lastNonSerInventoryItem, lastNonSerOrderItemInventoryRes -->
                    <env-to-field env-name="inventoryItem" field-name="lastNonSerInventoryItem"/>
                </if-compare>
            </if-compare>
        </iterate>

        <!--
            if inventory is not required for purchase and quantityNotReserved != 0:
                - subtract the remaining quantityNotReserved from the availableToPromise of the last non-serialized inventory item
                - or if none was found create a non-ser InventoryItem with availableToPromise = -quantityNotReserved
        -->
        <if-compare value="0.0" operator="not-equals" field-name="quantityNotReserved" map-name="parameters" type="Double">
            <if-compare value="Y" operator="equals" field-name="requireInventory" map-name="parameters">
                <!-- use this else pattern to accomplish the anything but Y logic, ie if not specified default to inventory NOT required -->
                <else>
                    <if-not-empty field-name="lastNonSerInventoryItem">
                        <!-- subtract from quantityNotReserved from the availableToPromise of existing inventory item -->
                        <calculate field-name="availableToPromise" map-name="lastNonSerInventoryItem">
                            <calcop operator="subtract" field-name="availableToPromise" map-name="lastNonSerInventoryItem">
                                <calcop operator="get" field-name="quantityNotReserved" map-name="parameters"/>
                            </calcop>
                        </calculate>
                        <store-value value-name="lastNonSerInventoryItem"/>

                        <!-- update OrderItemInventoryRes record -->
                        <if-not-empty field-name="lastNonSerOrderItemInventoryRes">
                            <calculate field-name="quantity" map-name="lastNonSerOrderItemInventoryRes">
                                <calcop operator="add" field-name="quantity" map-name="lastNonSerOrderItemInventoryRes">
                                    <calcop operator="get" field-name="quantityNotReserved" map-name="parameters"/>
                                </calcop>
                            </calculate>
                            <store-value value-name="lastNonSerOrderItemInventoryRes"/>

                            <else>
                                <!-- okay, there was no last non-ser orderItemInventoryRes, so create one -->
                                <make-value entity-name="OrderItemInventoryRes" value-name="newOiirEntity"/>
                                <field-to-field field-name="orderId" map-name="parameters" to-map-name="newOiirEntity"/>
                                <field-to-field field-name="orderItemSeqId" map-name="parameters" to-map-name="newOiirEntity"/>
                                <field-to-field field-name="inventoryItemId" map-name="lastNonSerInventoryItem" to-field-name="inventoryItemId" to-map-name="newOiirEntity"/>
                                <field-to-field field-name="quantityNotReserved" map-name="parameters" to-field-name="quantity" to-map-name="newOiirEntity"/>
                                <string-to-field string="OIIR_RESERVED" field-name="statusId" map-name="newOiirEntity"/>
                                <create-value value-name="newOiirEntity"/>
                            </else>
                        </if-not-empty>

                        <else>
                            <!-- no non-ser inv item, create a non-ser InventoryItem with availableToPromise = -quantityNotReserved -->
                            <make-value entity-name="InventoryItem" value-name="newNonSerInventoryItem"/>
                            <sequenced-id-to-env sequence-name="InventoryItem" env-name="inventoryItemId"/>
                            <to-string field-name="inventoryItemId"/>
                            <env-to-field env-name="inventoryItemId" map-name="newNonSerInventoryItem"/>

                            <field-to-field field-name="productId" map-name="parameters" to-map-name="newNonSerInventoryItem"/>
                            <field-to-field field-name="facilityId" map-name="parameters" to-map-name="newNonSerInventoryItem"/>
                            <field-to-field field-name="containerId" map-name="parameters" to-map-name="newNonSerInventoryItem"/>
                            <string-to-field string="NON_SERIAL_INV_ITEM" field-name="inventoryItemTypeId" map-name="newNonSerInventoryItem"/>
                            <calculate field-name="availableToPromise" map-name="newNonSerInventoryItem">
                                <calcop operator="negative" field-name="quantityNotReserved" map-name="parameters"/>
                            </calculate>
                            <create-value value-name="newNonSerInventoryItem"/>

                            <!-- create OrderItemInventoryRes record -->
                            <make-value entity-name="OrderItemInventoryRes" value-name="newOiirEntity"/>
                            <field-to-field field-name="orderId" map-name="parameters" to-map-name="newOiirEntity"/>
                            <field-to-field field-name="orderItemSeqId" map-name="parameters" to-map-name="newOiirEntity"/>
                            <field-to-field field-name="inventoryItemId" map-name="newNonSerInventoryItem" to-field-name="inventoryItemId" to-map-name="newOiirEntity"/>
                            <field-to-field field-name="quantityNotReserved" map-name="parameters" to-field-name="quantity" to-map-name="newOiirEntity"/>
                            <string-to-field string="OIIR_RESERVED" field-name="statusId" map-name="newOiirEntity"/>
                            <create-value value-name="newOiirEntity"/>
                        </else>
                    </if-not-empty>

                    <calculate field-name="quantityNotReserved" map-name="parameters"><number value="0"/></calculate>
                </else>
            </if-compare>
        </if-compare>

        <field-to-result field-name="quantityNotReserved" map-name="parameters"/>
    </simple-method>


    <simple-method method-name="cancelOrderInventoryReservation" short-description="Cancel Inventory Reservation for an Order">
        <!--
            Iterates through each OrderItemInventoryRes on each OrderItem for the order
            with the given orderId and cancels the reservation by changing the status
            of the OrderItemInventoryRes and incrementing the corresponding non-serialized
            inventoryItem's availableToPromise quantity, or setting the status of the 
            corresponding serialized inventoryItem to available.
        -->
        <field-to-field field-name="orderId" map-name="parameters" to-map-name="oiirListLookupMap"/>
        <find-by-and entity-name="OrderItemInventoryRes" map-name="oiirListLookupMap" list-name="oiirList" use-cache="false"/>
        <iterate entry-name="orderItemInventoryRes" list-name="oiirList">
            <if-compare value="OIIR_RESERVED" operator="equals" field-name="statusId" map-name="orderItemInventoryRes">
            	<log level="verbose" message="Found a inventory item to reverse."/>
                <field-to-field field-name="inventoryItemId" map-name="orderItemInventoryRes" to-map-name="invItemLookupMap"/>
                <find-by-primary-key entity-name="InventoryItem" map-name="invItemLookupMap" value-name="inventoryItem"/>
        
                <if-compare value="SERIALIZED_INV_ITEM" operator="equals" field-name="inventoryItemTypeId" map-name="inventoryItem">
                	<log level="verbose" message="Serialized inventory re-enabled."/>
                    <string-to-field string="INV_AVAILABLE" field-name="statusId" map-name="inventoryItem"/>
                </if-compare>
                <if-compare value="NON_SERIAL_INV_ITEM" operator="equals" field-name="inventoryItemTypeId" map-name="inventoryItem">
                	<log level="verbose" message="Non-Serialized inventory item incrementing availableToPromise."/>
                    <calculate field-name="availableToPromise" map-name="inventoryItem">
                        <calcop operator="add" field-name="availableToPromise" map-name="inventoryItem">
                            <calcop operator="get" field-name="quantity" map-name="orderItemInventoryRes"/>
                        </calcop>
                    </calculate>
                </if-compare>
                <store-value value-name="inventoryItem"/>
                
                <string-to-field string="OIIR_CANCELLED" field-name="statusId" map-name="orderItemInventoryRes"/>
                <store-value value-name="orderItemInventoryRes"/>
            </if-compare>
        </iterate>
    </simple-method>
    <simple-method method-name="cancelOrderItemInventoryRes" short-description="Cancel An Inventory Reservation">
    	<make-value value-name="lookupPKMap" entity-name="OrderItemInventoryRes"/>
    	<set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
    	<find-by-primary-key entity-name="OrderItemInventoryRes" map-name="lookupPKMap" value-name="orderItemInventoryRes"/>
    	
        <field-to-env field-name="orderItemInventoryRes" map-name="parameters" env-name="orderItemInventoryRes"/>
        <if-compare value="OIIR_RESERVED" operator="equals" field-name="statusId" map-name="orderItemInventoryRes">
            <log level="verbose" message="Found a inventory item to reverse."/>
            <field-to-field field-name="inventoryItemId" map-name="orderItemInventoryRes" to-map-name="invItemLookupMap"/>
            <find-by-primary-key entity-name="InventoryItem" map-name="invItemLookupMap" value-name="inventoryItem"/>
        
            <if-compare value="SERIALIZED_INV_ITEM" operator="equals" field-name="inventoryItemTypeId" map-name="inventoryItem">
                <log level="verbose" message="Serialized inventory re-enabled."/>
                <string-to-field string="INV_AVAILABLE" field-name="statusId" map-name="inventoryItem"/>
            </if-compare>
            <if-compare value="NON_SERIAL_INV_ITEM" operator="equals" field-name="inventoryItemTypeId" map-name="inventoryItem">
                <log level="verbose" message="Non-Serialized inventory item incrementing availableToPromise."/>
                <calculate field-name="availableToPromise" map-name="inventoryItem">
                    <calcop operator="add" field-name="availableToPromise" map-name="inventoryItem">
                        <calcop operator="get" field-name="quantity" map-name="orderItemInventoryRes"/>
                    </calcop>
                </calculate>
            </if-compare>
            <store-value value-name="inventoryItem"/>
                
            <string-to-field string="OIIR_CANCELLED" field-name="statusId" map-name="orderItemInventoryRes"/>
            <store-value value-name="orderItemInventoryRes"/>
        </if-compare>      
    </simple-method>
    
    <!-- Inventory Transfer Services -->
    <simple-method method-name="createInventoryTransfer" short-description="Create an Inventory Transfer">
        <check-permission permission="FACILITY" action="_CREATE"><fail-message message="Security Error: to run createInventoryTransfer you must have the FACILITY_CREATE or FACILITY_ADMIN permission"/></check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="InventoryTransfer"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        
        <sequenced-id-to-env sequence-name="InventoryTransfer" env-name="inventoryTransferId"/>
        <to-string field-name="inventoryTransferId"/>
        <env-to-field env-name="inventoryTransferId" map-name="newEntity"/>
        <field-to-result field-name="inventoryTransferId" result-name="inventoryTransferId"/>
        
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateInventoryTransfer" short-description="Update an Inventory Transfer">
        <check-permission permission="FACILITY" action="_UPDATE"><fail-message message="Security Error: to run updateInventoryTransfer you must have the FACILITY_UPDATE or FACILITY_ADMIN permission"/></check-permission>
        <check-errors/>

        <field-to-field field-name="inventoryTransferId" map-name="parameters" to-map-name="lookupPKMap"/>
        <find-by-primary-key entity-name="InventoryTransfer" map-name="lookupPKMap" value-name="inventoryTransfer"/>
        <set-nonpk-fields map-name="parameters" value-name="inventoryTransfer"/>
        <store-value value-name="inventoryTransfer"/>
    </simple-method>    
</simple-methods>
