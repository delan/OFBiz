<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE simple-methods PUBLIC "-//OFBiz//DTD Simple Methods//EN" "http://www.ofbiz.org/dtds/simple-methods.dtd">

<!--
 * Copyright (c) 2001 The Open For Business Project and repective authors.
 * Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author <a href="mailto:jonesde@ofbiz.org">David E. Jones</a>
 * @version 1.0
 * Created on April 2, 2002
 -->
<simple-methods>
    <simple-method method-name="createProduct" short-description="Create an Product">
        <check-permission permission="CATALOG" action="_CREATE"><fail-message message="Security Error: to run createProduct you must have the CATALOG_CREATE or CATALOG_ADMIN permission"/></check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="Product"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        
        <now-timestamp-to-env env-name="nowTimestamp"/>
        <env-to-field env-name="nowTimestamp" field-name="lastModifiedDate" map-name="newEntity"/>
        <env-to-field env-name="nowTimestamp" field-name="createdDate" map-name="newEntity"/>
        <field-to-field field-name="userLoginId" map-name="userLogin" to-field-name="lastModifiedByUserLogin" to-map-name="newEntity"/>
        <field-to-field field-name="userLoginId" map-name="userLogin" to-field-name="createdByUserLogin" to-map-name="newEntity"/>
        
        <create-value value-name="newEntity"/>

        <!-- if setting the primaryProductCategoryId create a member entity too -->
        <!-- THIS IS REMOVED BECAUSE IT CAUSES PROBLEMS FOR WORKING ON PRODUCTION SITES
        <if-not-empty field-name="primaryProductCategoryId" map-name="newEntity">
            <make-value entity-name="ProductCategoryMember" value-name="newMember"/>
            <field-to-field field-name="productId" map-name="newEntity" to-field-name="productId" to-map-name="newMember"/>
            <field-to-field field-name="primaryProductCategoryId" map-name="newEntity" to-field-name="productCategoryId" to-map-name="newMember"/>
            <now-timestamp-to-env env-name="nowStamp"/>
            <env-to-field env-name="nowStamp" field-name="fromDate" map-name="newMember"/>
            <create-value value-name="newMember"/>
        </if-not-empty>
        -->
        
        <!-- induce keywords if autoCreateKeywords is emtpy or Y-->
        <if-empty field-name="autoCreateKeywords" map-name="newEntity">
            <call-bsh><![CDATA[org.ofbiz.commonapp.product.product.KeywordSearch.induceKeywords(newEntity);]]></call-bsh>
        <else>
            <if-compare field-name="autoCreateKeywords" map-name="newEntity" operator="equals" value="Y">
                <call-bsh><![CDATA[org.ofbiz.commonapp.product.product.KeywordSearch.induceKeywords(newEntity);]]></call-bsh>
            </if-compare>
        </else>
        </if-empty>
    </simple-method>
    <simple-method method-name="updateProduct" short-description="Update an Product">
        <check-permission permission="CATALOG" action="_UPDATE"><fail-message message="Security Error: to run updateProduct you must have the CATALOG_UPDATE or CATALOG_ADMIN permission"/></check-permission>
        <check-errors/>

        <field-to-field field-name="productId" map-name="parameters" to-map-name="lookupPKMap"/>
        <find-by-primary-key entity-name="Product" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <!-- save this value before overwriting it so we can compare it later -->
        <field-to-field field-name="primaryProductCategoryId" map-name="lookedUpValue" to-map-name="saveIdMap"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>

        <now-timestamp-to-env env-name="nowTimestamp"/>
        <env-to-field env-name="nowTimestamp" field-name="lastModifiedDate" map-name="lookedUpValue"/>
        <field-to-field field-name="userLoginId" map-name="userLogin" to-field-name="lastModifiedByUserLogin" to-map-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>

        <!-- if setting the primaryParentCategoryId, create a rollup entity too -->
        <!-- THIS IS REMOVED BECAUSE IT CAUSES PROBLEMS FOR WORKING ON PRODUCTION SITES
        <if-not-empty field-name="primaryProductCategoryId" map-name="lookedUpValue">
            <if-compare-field field-name="primaryProductCategoryId" map-name="lookedUpValue" operator="equals" to-map-name="saveIdMap">
                <make-value entity-name="ProductCategoryMember" value-name="newMember"/>
                <field-to-field field-name="productId" map-name="newEntity" to-field-name="productId" to-map-name="newMember"/>
                <field-to-field field-name="primaryProductCategoryId" map-name="newEntity" to-field-name="productCategoryId" to-map-name="newMember"/>
                <now-timestamp-to-env env-name="nowStamp"/>
                <env-to-field env-name="nowStamp" field-name="fromDate" map-name="newMember"/>
                <create-value value-name="newMember"/>
            </if-compare-field>
        </if-not-empty>
        -->
        
        <!-- induce keywords if autoCreateKeywords is empty or Y-->
        <if-empty field-name="autoCreateKeywords" map-name="lookedUpValue">
            <call-bsh><![CDATA[org.ofbiz.commonapp.product.product.KeywordSearch.induceKeywords(lookedUpValue);]]></call-bsh>
        <else>
            <if-compare field-name="autoCreateKeywords" map-name="lookedUpValue" operator="equals" value="Y">
                <call-bsh><![CDATA[org.ofbiz.commonapp.product.product.KeywordSearch.induceKeywords(lookedUpValue);]]></call-bsh>
            </if-compare>
        </else>
        </if-empty>
    </simple-method>
    
    <simple-method method-name="duplicateProduct" short-description="Duplicate a Product">
        <check-permission permission="CATALOG" action="_CREATE"><fail-message message="Security Error: to run duplicateProduct you must have the CATALOG_CREATE or CATALOG_ADMIN permission"/></check-permission>
        <check-permission permission="CATALOG" action="_DELETE"><fail-message message="Security Error: to run duplicateProduct you must have the CATALOG_DELETE or CATALOG_ADMIN permission"/></check-permission>
        <check-errors/>

        <!-- look up the old product and clone it -->
        <field-to-field field-name="oldProductId" map-name="parameters" to-field-name="productId" to-map-name="productFindContext"/>
        <find-by-primary-key entity-name="Product" map-name="productFindContext" value-name="oldProduct"/>
        <clone-value value-name="oldProduct" new-value-name="newProduct"/>
        
        <!-- set the productId, and write it to the datasource -->
        <field-to-field field-name="productId" map-name="parameters" to-map-name="newProduct"/>
        <create-value value-name="newProduct"/>
        
        <!-- induce keywords if autoCreateKeywords is empty or Y-->
        <if-empty field-name="autoCreateKeywords" map-name="newProduct">
            <call-bsh><![CDATA[org.ofbiz.commonapp.product.product.KeywordSearch.induceKeywords(newProduct);]]></call-bsh>
        <else>
            <if-compare field-name="autoCreateKeywords" map-name="newProduct" operator="equals" value="Y">
                <call-bsh><![CDATA[org.ofbiz.commonapp.product.product.KeywordSearch.induceKeywords(newProduct);]]></call-bsh>
            </if-compare>
        </else>
        </if-empty>

        <!-- if requested, duplicate related data as well -->
        <if-not-empty field-name="duplicatePrices" map-name="parameters">
            <find-by-and entity-name="ProductPrice" map-name="productFindContext" list-name="foundValues"/>
            <iterate entry-name="foundValue" list-name="foundValues">
                <clone-value value-name="foundValue" new-value-name="newTempValue"/>
                <field-to-field field-name="productId" map-name="parameters" to-map-name="newTempValue"/>
                <create-value value-name="newTempValue"/>
            </iterate>
        </if-not-empty>
        <if-not-empty field-name="duplicateIDs" map-name="parameters">
            <find-by-and entity-name="GoodIdentification" map-name="productFindContext" list-name="foundValues"/>
            <iterate entry-name="foundValue" list-name="foundValues">
                <clone-value value-name="foundValue" new-value-name="newTempValue"/>
                <field-to-field field-name="productId" map-name="parameters" to-map-name="newTempValue"/>
                <create-value value-name="newTempValue"/>
            </iterate>
        </if-not-empty>
        <if-not-empty field-name="duplicateCategoryMembers" map-name="parameters">
            <find-by-and entity-name="ProductCategoryMember" map-name="productFindContext" list-name="foundValues"/>
            <iterate entry-name="foundValue" list-name="foundValues">
                <clone-value value-name="foundValue" new-value-name="newTempValue"/>
                <field-to-field field-name="productId" map-name="parameters" to-map-name="newTempValue"/>
                <create-value value-name="newTempValue"/>
            </iterate>
        </if-not-empty>
        <if-not-empty field-name="duplicateAssocs" map-name="parameters">
            <find-by-and entity-name="ProductAssoc" map-name="productFindContext" list-name="foundValues"/>
            <iterate entry-name="foundValue" list-name="foundValues">
                <clone-value value-name="foundValue" new-value-name="newTempValue"/>
                <field-to-field field-name="productId" map-name="parameters" to-map-name="newTempValue"/>
                <create-value value-name="newTempValue"/>
            </iterate>
            
            <!-- small difference here, also do the reverse assocs... -->
            <field-to-field field-name="oldProductId" map-name="parameters" to-field-name="productIdTo" to-map-name="reverseProductFindContext"/>
            <find-by-and entity-name="ProductAssoc" map-name="reverseProductFindContext" list-name="foundValues"/>
            <iterate entry-name="foundValue" list-name="foundValues">
                <clone-value value-name="foundValue" new-value-name="newTempValue"/>
                <field-to-field field-name="productId" map-name="parameters" to-field-name="productIdTo" to-map-name="newTempValue"/>
                <create-value value-name="newTempValue"/>
            </iterate>
        </if-not-empty>
        <if-not-empty field-name="duplicateAttributes" map-name="parameters">
            <find-by-and entity-name="ProductAttribute" map-name="productFindContext" list-name="foundValues"/>
            <iterate entry-name="foundValue" list-name="foundValues">
                <clone-value value-name="foundValue" new-value-name="newTempValue"/>
                <field-to-field field-name="productId" map-name="parameters" to-map-name="newTempValue"/>
                <create-value value-name="newTempValue"/>
            </iterate>
        </if-not-empty>
        <if-not-empty field-name="duplicateFeatureAppls" map-name="parameters">
            <find-by-and entity-name="ProductFeatureAppl" map-name="productFindContext" list-name="foundValues"/>
            <iterate entry-name="foundValue" list-name="foundValues">
                <clone-value value-name="foundValue" new-value-name="newTempValue"/>
                <field-to-field field-name="productId" map-name="parameters" to-map-name="newTempValue"/>
                <create-value value-name="newTempValue"/>
            </iterate>
        </if-not-empty>
        <if-not-empty field-name="duplicateInventoryItems" map-name="parameters">
            <find-by-and entity-name="InventoryItem" map-name="productFindContext" list-name="foundValues"/>
            <iterate entry-name="foundValue" list-name="foundValues">
                <clone-value value-name="foundValue" new-value-name="newTempValue"/>
                <field-to-field field-name="productId" map-name="parameters" to-map-name="newTempValue"/>
                
                <!-- this one is slightly different because it needs a new sequenced inventoryItemId -->
                <sequenced-id-to-env sequence-name="InventoryItem" env-name="inventoryItemId"/>
                <to-string field-name="inventoryItemId"/>
                <env-to-field env-name="inventoryItemId" map-name="newTempValue"/>
                
                <create-value value-name="newTempValue"/>
            </iterate>
        </if-not-empty>
        
        <!-- if requested, remove related data as well -->
        <if-not-empty field-name="removePrices" map-name="parameters">
            <remove-by-and entity-name="ProductPrice" map-name="productFindContext"/>
        </if-not-empty>
        <if-not-empty field-name="removeIDs" map-name="parameters">
            <remove-by-and entity-name="GoodIdentification" map-name="productFindContext"/>
        </if-not-empty>
        <if-not-empty field-name="removeCategoryMembers" map-name="parameters">
            <remove-by-and entity-name="ProductCategoryMember" map-name="productFindContext"/>
        </if-not-empty>
        <if-not-empty field-name="removeAssocs" map-name="parameters">
            <remove-by-and entity-name="ProductAssoc" map-name="productFindContext"/>
            <!-- small difference here, also do the reverse assocs... -->
            <field-to-field field-name="oldProductId" map-name="parameters" to-field-name="productIdTo" to-map-name="reverseProductFindContext"/>
            <remove-by-and entity-name="ProductAssoc" map-name="reverseProductFindContext"/>
        </if-not-empty>
        <if-not-empty field-name="removeAttributes" map-name="parameters">
            <remove-by-and entity-name="ProductAttribute" map-name="productFindContext"/>
        </if-not-empty>
        <if-not-empty field-name="removeFeatureAppls" map-name="parameters">
            <remove-by-and entity-name="ProductFeatureAppl" map-name="productFindContext"/>
        </if-not-empty>
        <if-not-empty field-name="removeInventoryItems" map-name="parameters">
            <remove-by-and entity-name="InventoryItem" map-name="productFindContext"/>
        </if-not-empty>
    </simple-method>

    <!-- GoodIdentification methods -->
    <simple-method method-name="createGoodIdentification" short-description="Create an GoodIdentification">
        <check-permission permission="CATALOG" action="_CREATE"><fail-message message="Security Error: to run createGoodIdentification you must have the CATALOG_CREATE or CATALOG_ADMIN permission"/></check-permission>
        <check-errors/>

        <make-value value-name="newEntity" entity-name="GoodIdentification"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateGoodIdentification" short-description="Update an GoodIdentification">
        <check-permission permission="CATALOG" action="_UPDATE"><fail-message message="Security Error: to run updateGoodIdentification you must have the CATALOG_UPDATE or CATALOG_ADMIN permission"/></check-permission>
        <check-errors/>

        <make-value entity-name="GoodIdentification" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="GoodIdentification" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteGoodIdentification" short-description="Delete an GoodIdentification">
        <check-permission permission="CATALOG" action="_DELETE"><fail-message message="Security Error: to run deleteGoodIdentification you must have the CATALOG_DELETE or CATALOG_ADMIN permission"/></check-permission>
        <check-errors/>

        <make-value entity-name="GoodIdentification" value-name="lookupPKMap"/>
        <set-pk-fields map-name="parameters" value-name="lookupPKMap"/>
        <find-by-primary-key entity-name="GoodIdentification" map-name="lookupPKMap" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
</simple-methods>
