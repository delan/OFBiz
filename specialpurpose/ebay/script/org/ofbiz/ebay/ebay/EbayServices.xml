<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    
    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
    <simple-method method-name="createEbayAccount" short-description="Create Ebay Account">
        
        <set-service-fields service-name="createPersonAndUserLogin" to-map="newPerson" map="parameters"/>
        <call-service service-name="createPersonAndUserLogin" in-map-name="newPerson">
            <result-to-field result-name="partyId" field="parameters.partyId"/>
        </call-service>
        
        <set field="parameters.storeName" value="${parameters.userLoginId}_store"/>
        <set-service-fields service-name="createProductStore" to-map="newProductStore" map="parameters"/>
        <call-service service-name="createProductStore" in-map-name="newProductStore">
            <result-to-field result-name="productStoreId" field="parameters.productStoreId"/>
        </call-service>
        
        <set field="parameters.roleTypeId" value="EBAY_ACCOUNT"/>
        <set-service-fields service-name="createPartyRole" to-map="newPartyRole" map="parameters"/>
        <call-service service-name="createPartyRole" in-map-name="newPartyRole"/>
        
        <set-service-fields service-name="createProductStoreRole" to-map="newProductStoreRole" map="parameters"/>
        <call-service service-name="createProductStoreRole" in-map-name="newProductStoreRole"/>
        <field-to-result field="parameters.productStoreId" result-name="productStoreId"/>
        
    </simple-method>
    
    <!-- Store Inventory Services -->
    <simple-method method-name="reserveEbayStoreInventory" short-description="Reserve ofbiz Store product Inventory">
        <entity-one entity-name="Product" value-field="product" use-cache="true"/>
        <entity-one entity-name="ProductStore" value-field="productStore" >
            <field-map field-name="productStoreId" from-field="parameters.productStoreId"/>
        </entity-one>
        <if-empty field="productStore">
            <add-error><fail-message message="No ProductStore found with id ${parameters.productStoreId}, not reserving inventory."/></add-error>
            <check-errors/>
        </if-empty>
        
        <!-- if prodCatalog is set to not reserve inventory, break here -->
        <if-compare value="N" operator="equals" field="productStore.reserveInventory">
            <!-- note: if not set, defaults to yes, reserve inventory -->
            <log level="verbose" message="ProductStore with id ${productStore.productStoreId}, is set to NOT reserve inventory, not reserving inventory"/>
            <field-to-result field="parameters.quantity" result-name="quantityNotReserved"/>
            <return response-code="success"/>
        </if-compare>
        
        <call-simple-method method-name="isStoreInventoryRequiredInline"/>
        
        <set from-field="parameters.facilityId" field="facilityId"/>
        <if-not-empty field="facilityId">
            <entity-and entity-name="ProductStoreFacility" list="productStoreFacilities" use-cache="true">
                <field-map from-field="productStore.productStoreId" field-name="productStoreId"/>
                <field-map from-field="facilityId" field-name="facilityId"/>
                <order-by field-name="sequenceNum"/>
            </entity-and>
            <iterate list="productStoreFacilities" entry="productStoreFacility">
                <!-- Search Product Store Facilities to insure the facility passed in is associated to the Product Store passed in -->
                <set field="facilityFound" from-field="productStoreFacility"/>
                <log level="info" message="ProductStoreService:Facility Found : [${facilityFound}]"/>
            </iterate>
            <if-empty field="facilityFound">
                <add-error><fail-message message="Facility with id ${parameters.facilityId} is not associated to ProductStore with id ${parameters.productStoreId}, not reserving inventory."/></add-error>
                <check-errors/>
            </if-empty>
            <!-- verifly that product was store in facility -->
            <entity-and entity-name="ProductFacility" list="productFacilityList">
                <field-map from-field="facilityId" field-name="facilityId"/>
                <field-map from-field="parameters.productId" field-name="productId"/>
            </entity-and>
            <if-empty field="productFacilityList">
                <add-error><fail-message message="Facility with id ${parameters.facilityId} is not associated to ProductId with id ${parameters.productId}, not reserving inventory."/></add-error>
                <check-errors/>
            </if-empty>
            
            <set-service-fields map="parameters" to-map="callServiceMap" service-name="reserveEbayProductInventoryByStoreFacility"/>
            <set from-field="facilityId" field="callServiceMap.facilityId"/>
            <set from-field="requireInventory" field="callServiceMap.requireInventory"/>
            <set from-field="productStore.reserveOrderEnumId" field="callServiceMap.reserveOrderEnumId"/>
            <call-service service-name="reserveEbayProductInventoryByStoreFacility" in-map-name="callServiceMap">
                <results-to-map map-name="resultMap"/>
                <result-to-field result-name="quantityNotReserved" field="qtyNotReserve"/>
                <result-to-field result-name="successMessage" field="returnSuccessMessage"/>
            </call-service>
            <set field="defaultReserve" default-value="0"/>
            <!-- if quantityNotReserved greater than 0 then ATP in ofbiz stock not have, it should be return message or log warring-->
            <if-compare-field field="qtyNotReserve" operator="equals"  type="BigDecimal" to-field="defaultReserve">
                <call-simple-method method-name="editEbayProductStoreInventory"/>
                <set field="successMessage" value="${returnSuccessMessage} quantity Reserved:${parameters.quantity} quantityNotReserved:${qtyNotReserve} "/>
                <field-to-result  field="successMessage"/>
                <set field="quantityNotReserved"  default-value="0" type="BigDecimal"/>
                <field-to-result field="quantityNotReserved"/>
                <else>
                    <!-- find qty which can reserved -->
                    <set field="requiredQty" from-field="parameters.quantity"/>
                    <calculate field="reservedQty" type="BigDecimal" >
                        <calcop operator="get">
                            <calcop operator="get" field="requiredQty"/>
                            <calcop operator="negative" field="qtyNotReserve"/>
                        </calcop>
                    </calculate>
                    <set field="parameters.quantity" from-field="reservedQty"/>
                    <if-compare-field field="reservedQty" operator="greater" to-field="defaultReserve" >
                        <call-simple-method method-name="editEbayProductStoreInventory"/>
                    </if-compare-field>
                    
                    <!-- then show only qty was already reserved and show  difference value that can not reserve -->
                    <set field="successMessage" value="${returnSuccessMessage} Quantity Reserved : ${reservedQty} Quantity Not Reserved : ${qtyNotReserve} "/>
                    <field-to-result  field="successMessage"/>
                    <set field="quantityNotReserved" value="${qtyNotReserve}" default-value="0" type="BigDecimal"/>
                    <field-to-result field="quantityNotReserved"/>
                </else>
            </if-compare-field>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="editEbayProductStoreInventory" short-description="add qty reserve from ofbiz Store product Inventory and combine with ebay store inventory">
        <entity-one entity-name="EbayProductStoreInventory" value-field="ebayProductStoreInventory" >
            <field-map field-name="productStoreId"  from-field="parameters.productStoreId"/>
            <field-map field-name="facilityId"  from-field="parameters.facilityId"/>
            <field-map field-name="productId"  from-field="parameters.productId"/>
        </entity-one>
        <if-empty field="ebayProductStoreInventory">
            <!-- add new reserved product  -->
            <make-value value-field="newEbayProductStoreInven" entity-name="EbayProductStoreInventory"/>
            <set field="newEbayProductStoreInven.productStoreId" from-field="parameters.productStoreId"/>
            <set field="newEbayProductStoreInven.facilityId" from-field="parameters.facilityId"/>
            <set field="newEbayProductStoreInven.productId" from-field="parameters.productId"/>
            <set field="newEbayProductStoreInven.quantityReserved" default-value="0" from-field="parameters.quantity"/>
            <set field="newEbayProductStoreInven.availableToPromiseListing" default-value="0" from-field="parameters.quantity"/>
            <set field="newEbayProductStoreInven.scheduled" default-value="0" type="BigDecimal"/>
            <set field="newEbayProductStoreInven.activeListing" default-value="0" type="BigDecimal"/>
            <set field="newEbayProductStoreInven.sold" default-value="0" type="BigDecimal"/>
            <set field="newEbayProductStoreInven.unSold" default-value="0" type="BigDecimal"/>
            <now-timestamp field="newEbayProductStoreInven.reservedDate" />
            <create-value value-field="newEbayProductStoreInven"/>
            <else><!-- update reserved qty   -->
                <set field="qtyNow" default-value="0" from-field="ebayProductStoreInventory.quantityReserved"/>
                <set field="atpListingNow" default-value="0" from-field="ebayProductStoreInventory.availableToPromiseListing"/>
                <set field="reserveQty" default-value="0" from-field="parameters.quantity"/>
                <calculate field="sumQtyReserved" type="BigDecimal" >
                    <calcop operator="add">
                        <calcop operator="get" field="qtyNow"/>
                        <calcop operator="get" field="reserveQty"/>
                    </calcop>
                </calculate>
                <calculate field="sumQtyATPListing" type="BigDecimal" >
                    <calcop operator="add">
                        <calcop operator="get" field="atpListingNow"/>
                        <calcop operator="get" field="reserveQty"/>
                    </calcop>
                </calculate>
                <now-timestamp field="ebayProductStoreInventory.reservedDate" />
                <set field="ebayProductStoreInventory.quantityReserved" from-field="sumQtyReserved"/>
                <set field="ebayProductStoreInventory.availableToPromiseListing" from-field="sumQtyATPListing"/>
                <store-value value-field="ebayProductStoreInventory"/>
            </else>
        </if-empty>
    </simple-method>
    
    <simple-method method-name="isStoreInventoryRequiredInline" short-description="Is Store Inventory Required" login-required="false">
        <set from-field="product.requireInventory" field="requireInventory"/>
        <if-empty field="requireInventory">
            <set from-field="productStore.requireInventory" field="requireInventory"/>
        </if-empty>
        <if-empty field="requireInventory">
            <set value="Y" field="requireInventory"/>
        </if-empty>
    </simple-method>
    
    <simple-method method-name="reserveEbayProductInventory" short-description="Reserve Inventory for a Product">
        
        <now-timestamp field="nowTimestamp"/>
        
        <!-- check the product; make sure its a physical item -->
        <entity-one entity-name="Product" value-field="product"/>
        <entity-one entity-name="Facility" value-field="facility" use-cache="true"/>
        <get-related-one value-field="product" relation-name="ProductType" to-value-field="productType"/>
        <if-compare field="productType.isPhysical" operator="equals" value="N">
            <set field="parameters.quantityNotReserved" value="0" type="BigDecimal"/>
            <else>

                <set value="EBAY_INV_RES" field="parameters.reserveReasonEnumId"/>
                <set value="+datetimeReceived" field="orderByString"/>
                <set from-field="parameters.quantity" field="parameters.quantityNotReserved"/>
                
                <!-- first reserve against InventoryItems in FLT_PICKLOC type locations, then FLT_BULK locations, then InventoryItems with no locations -->
                <entity-condition entity-name="InventoryItemAndLocation" list="inventoryItemAndLocations">
                    <condition-list combine="and">
                        <condition-expr field-name="productId" from-field="parameters.productId"/>
                        <condition-expr field-name="facilityId" from-field="parameters.facilityId" ignore-if-empty="true" ignore-if-null="true"/>
                        <condition-expr field-name="containerId" from-field="parameters.containerId" ignore-if-empty="true" ignore-if-null="true"/>
                        <condition-expr field-name="quantityOnHandTotal" operator="greater" value="0.0"/>
                        <condition-expr field-name="locationTypeEnumId" operator="equals" value="FLT_PICKLOC"/>
                    </condition-list>
                    <order-by field-name="${orderByString}"/>
                </entity-condition>
                <iterate entry="inventoryItemAndLocation" list="inventoryItemAndLocations">
                    <if-compare field="parameters.quantityNotReserved" operator="greater" value="0" type="Double">
                        <!-- this is a little trick to get the InventoryItem value object without doing a query, possible since all fields on InventoryItem are also on InventoryItemAndLocation with the same names -->
                        <make-value entity-name="InventoryItem" map="inventoryItemAndLocation" value-field="inventoryItem"/>
                        <call-simple-method method-name="reserveForInventoryItemInline"/>
                    </if-compare>
                </iterate>
                <!-- still some left? try the FLT_BULK locations -->
                <if-compare field="parameters.quantityNotReserved" operator="greater" value="0" type="BigDecimal">
                    <entity-condition entity-name="InventoryItemAndLocation" list="inventoryItemAndLocations">
                        <condition-list combine="and">
                            <condition-expr field-name="productId" from-field="parameters.productId"/>
                            <condition-expr field-name="facilityId" from-field="parameters.facilityId" ignore-if-empty="true" ignore-if-null="true"/>
                            <condition-expr field-name="containerId" from-field="parameters.containerId" ignore-if-empty="true" ignore-if-null="true"/>
                            <condition-expr field-name="quantityOnHandTotal" operator="greater" value="0.0"/>
                            <condition-expr field-name="locationTypeEnumId" operator="equals" value="FLT_BULK"/>
                        </condition-list>
                        <order-by field-name="${orderByString}"/>
                    </entity-condition>
                    <iterate entry="inventoryItemAndLocation" list="inventoryItemAndLocations">
                        <if-compare field="parameters.quantityNotReserved" operator="greater" value="0" type="Double">
                            <!-- this is a little trick to get the InventoryItem value object without doing a query, possible since all fields on InventoryItem are also on InventoryItemAndLocation with the same names -->
                            <make-value entity-name="InventoryItem" map="inventoryItemAndLocation" value-field="inventoryItem"/>
                            <call-simple-method method-name="reserveForInventoryItemInline"/>
                        </if-compare>
                    </iterate>
                </if-compare>
                
                <!-- last of all try reserving in InventoryItems that have no locationSeqId, ie are not in any particular location -->
                <if-compare field="parameters.quantityNotReserved" operator="greater" value="0" type="BigDecimal">
                    <entity-condition entity-name="InventoryItem" list="inventoryItems">
                        <condition-list combine="and">
                            <condition-expr field-name="productId" from-field="parameters.productId"/>
                            <condition-expr field-name="facilityId" from-field="parameters.facilityId" ignore-if-empty="true" ignore-if-null="true"/>
                            <condition-expr field-name="containerId" from-field="parameters.containerId" ignore-if-empty="true" ignore-if-null="true"/>
                            <condition-expr field-name="quantityOnHandTotal" operator="greater" value="0.0"/>
                            <condition-expr field-name="locationSeqId" operator="equals" from-field="nullField"/>
                        </condition-list>
                        <order-by field-name="${orderByString}"/>
                    </entity-condition>
                    <iterate entry="inventoryItem" list="inventoryItems">
                        <if>
                            <condition>
                                <and>
                                    <if-compare field="parameters.quantityNotReserved" operator="greater" value="0" type="Double"/>
                                    <if-empty field="inventoryItem.locationSeqId"/>
                                </and>
                            </condition>
                            <then>
                                <call-simple-method method-name="reserveForInventoryItemInline"/>
                            </then>
                        </if>
                    </iterate>
                </if-compare>
                <!--
                    if inventory is not required for purchase and quantityNotReserved != 0:
                    - subtract the remaining quantityNotReserved from the availableToPromise of the last non-serialized inventory item
                    - or if none was found create a non-ser InventoryItem with availableToPromise = -quantityNotReserved
                -->
                <if-compare field="parameters.quantityNotReserved" operator="not-equals" value="0" type="BigDecimal">
                    <if-compare field="parameters.requireInventory" operator="equals" value="Y">
                        <!-- use this else pattern to accomplish the anything but Y logic, ie if not specified default to inventory NOT required -->
                        <else>
                            <if-not-empty field="lastNonSerInventoryItem">
                                <!-- subtract from quantityNotReserved from the availableToPromise of existing inventory item -->
                                <!-- instead of updating InventoryItem, add an InventoryItemDetail -->
                                <set from-field="lastNonSerInventoryItem.inventoryItemId" field="createDetailMap.inventoryItemId"/>
                                <set from-field="parameters.reserveReasonEnumId" field="createDetailMap.reasonEnumId"/>
                                 <calculate field="createDetailMap.availableToPromiseDiff">
                                    <calcop field="parameters.quantityNotReserved" operator="negative"/>
                                </calculate>
                                <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>
                                <clear-field field="createDetailMap"/>
                                
                                <!-- get the promiseDatetime -->
                                <get-related-one value-field="lastNonSerInventoryItem" relation-name="ProductFacility" to-value-field="productFacility"/>
                                <clear-field field="daysToShip"/>
                                <set field="daysToShip" from-field="productFacility.daysToShip"/>
                                <if-empty field="daysToShip">
                                    <!-- if the product does not have its own days to ship, use Facility.defaultDaysToShip, if not then use 30 days as a USA industry default -->
                                    <if-not-empty field="facility.defaultDaysToShip">
                                        <set field="daysToShip" from-field="facility.defaultDaysToShip" type="Long"/>
                                        <else>
                                            <set field="daysToShip" value="30" type="Long"/>
                                        </else>
                                    </if-not-empty>
                                </if-empty>
                                <!-- TODO: Convert this to a <set-calendar> operation -->
                                <call-bsh><![CDATA[
                            java.sql.Timestamp orderDate = orderHeader.getTimestamp("orderDate");
                            com.ibm.icu.util.Calendar cal = com.ibm.icu.util.Calendar.getInstance();
                            cal.setTimeInMillis(orderDate.getTime());
                            cal.add(com.ibm.icu.util.Calendar.DAY_OF_YEAR, daysToShip.intValue());
                            return org.ofbiz.base.util.UtilMisc.toMap("promisedDatetime", new java.sql.Timestamp(cal.getTimeInMillis()));
                            ]]></call-bsh>
                                
                                <else>
                                    <!-- no non-ser inv item, create a non-ser InventoryItem with availableToPromise = -quantityNotReserved -->
                                    <clear-field field="createInventoryItemInMap"/>
                                    <clear-field field="createInventoryItemOutMap"/>
                                    <!-- the createInventoryItem service is run by the the system user here -->
                                    <entity-one entity-name="UserLogin" value-field="permUserLogin">
                                        <field-map field-name="userLoginId" value="system"/>
                                    </entity-one>
                                    <set from-field="parameters.productId" field="createInventoryItemInMap.productId"/>
                                    <set from-field="parameters.facilityId" field="createInventoryItemInMap.facilityId"/>
                                    <set from-field="parameters.containerId" field="createInventoryItemInMap.containerId"/>
                                    <set value="NON_SERIAL_INV_ITEM" field="createInventoryItemInMap.inventoryItemTypeId"/>
                                    <set from-field="permUserLogin" field="createInventoryItemInMap.userLogin"/>
                                    <call-service service-name="createInventoryItem" in-map-name="createInventoryItemInMap" include-user-login="false">
                                        <result-to-field result-name="inventoryItemId" field="createInventoryItemOutMap.inventoryItemId"/>
                                    </call-service>
                                    <entity-one entity-name="InventoryItem" value-field="newNonSerInventoryItem">
                                        <field-map field-name="inventoryItemId" from-field="createInventoryItemOutMap.inventoryItemId"/>
                                    </entity-one>
                                    
                                    <!-- also create a detail record with the quantities -->
                                    <set from-field="newNonSerInventoryItem.inventoryItemId" field="createDetailMap.inventoryItemId"/>
                                    <set from-field="parameters.reserveReasonEnumId" field="createDetailMap.reasonEnumId"/>
                                     <calculate field="createDetailMap.availableToPromiseDiff">
                                        <calcop field="parameters.quantityNotReserved" operator="negative"/>
                                    </calculate>
                                    <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>
                                    <clear-field field="createDetailMap"/>
                                    
                                    <!-- get the promiseDatetime -->
                                    <get-related-one value-field="newNonSerInventoryItem" relation-name="ProductFacility" to-value-field="productFacility"/>
                                    <clear-field field="daysToShip"/>
                                    <set field="daysToShip" from-field="productFacility.daysToShip"/>
                                    <if-empty field="daysToShip">
                                        <!-- if the product does not have its own days to ship, use Facility.defaultDaysToShip, if not then use 30 days as a USA industry default -->
                                        <if-not-empty field="facility.defaultDaysToShip">
                                            <set field="daysToShip" from-field="facility.defaultDaysToShip" type="Long"/>
                                            <else>
                                                <set field="daysToShip" value="30" type="Long"/>
                                            </else>
                                        </if-not-empty>
                                    </if-empty>
                                    <!-- TODO: Convert this to a <set-calendar> operation -->
                                    <call-bsh><![CDATA[
                            java.sql.Timestamp orderDate = orderHeader.getTimestamp("orderDate");
                            com.ibm.icu.util.Calendar cal = com.ibm.icu.util.Calendar.getInstance();
                            cal.setTimeInMillis(orderDate.getTime());
                            cal.add(com.ibm.icu.util.Calendar.DAY_OF_YEAR, daysToShip.intValue());
                            return org.ofbiz.base.util.UtilMisc.toMap("promisedDatetime", new java.sql.Timestamp(cal.getTimeInMillis()));
                            ]]></call-bsh>
                                    
                                </else>
                            </if-not-empty>
                            
                            <set field="parameters.quantityNotReserved" value="0" type="BigDecimal"/>
                        </else>
                    </if-compare>
                </if-compare>
            </else>
        </if-compare>
        
        <field-to-result field="parameters.quantityNotReserved" result-name="quantityNotReserved"/>
    </simple-method>
    
    <simple-method method-name="reserveForInventoryItemInline" short-description="Does a reservation for one InventoryItem, meant to be called in-line">
        <!-- only do something with this inventoryItem if there is more inventory to reserve -->
        <if-compare field="parameters.quantityNotReserved" operator="greater" value="0" type="BigDecimal">
            
            <if-compare value="SERIALIZED_INV_ITEM" operator="equals" field="inventoryItem.inventoryItemTypeId">
                <if-compare value="INV_AVAILABLE" operator="equals" field="inventoryItem.statusId">
                    <!-- change status on inventoryItem -->
                    <set value="INV_PROMISED" field="inventoryItem.statusId"/>
                    <store-value value-field="inventoryItem"/>
 
                    <clear-field field="reserveOisgirMap"/>
                    
                    <calculate field="parameters.quantityNotReserved">
                        <calcop field="parameters.quantityNotReserved" operator="subtract"><number value="1.0"/></calcop>
                    </calculate>
                </if-compare>
            </if-compare>
            <if-compare field="inventoryItem.inventoryItemTypeId" operator="equals" value="NON_SERIAL_INV_ITEM">
                <!-- reduce atp on inventoryItem if availableToPromise greater than 0, if not the code at the end of this method will handle it -->
                <if>
                    <condition>
                        <and>
                            <if-compare field="inventoryItem.statusId" operator="not-equals" value="ON_HOLD_NS"/>
                            <if-compare field="inventoryItem.statusId" operator="not-equals" value="DEFECTIVE_NS"/>
                            <not><if-empty field="inventoryItem.availableToPromiseTotal"/></not>
                            <if-compare field="inventoryItem.availableToPromiseTotal" operator="greater" value="0" type="BigDecimal"/>
                        </and>
                    </condition>
                    <then>
                        <if-compare-field field="parameters.quantityNotReserved" to-field="inventoryItem.availableToPromiseTotal" operator="greater" type="BigDecimal">
                            <set from-field="inventoryItem.availableToPromiseTotal" field="parameters.deductAmount"/>
                            <else>
                                <set from-field="parameters.quantityNotReserved" field="parameters.deductAmount"/>
                            </else>
                        </if-compare-field>

                        <!-- instead of updating InventoryItem, add an InventoryItemDetail -->
                        <set from-field="inventoryItem.inventoryItemId" field="createDetailMap.inventoryItemId"/>
                        <set from-field="parameters.reserveReasonEnumId" field="createDetailMap.reasonEnumId"/>
                        <calculate field="createDetailMap.availableToPromiseDiff">
                            <calcop field="parameters.deductAmount" operator="negative"/>
                        </calculate>
                        <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>
                        <clear-field field="createDetailMap"/>
                        
                        <calculate field="parameters.quantityNotReserved">
                            <calcop operator="subtract" field="parameters.quantityNotReserved">
                                <calcop operator="get" field="parameters.deductAmount"/>
                            </calcop>
                        </calculate>
                    </then>
                </if>
                <!-- keep track of the last non-serialized inventory item for use if inventory is not required for purchase -->
                <!-- use env variable named lastNonSerInventoryItem -->
                <set from-field="inventoryItem" field="lastNonSerInventoryItem"/>
            </if-compare>
        </if-compare>
    </simple-method>
    <simple-method method-name="getPromisedDateTime" short-description="Get Inventory Promised Date/Time">
        <!-- get the promiseDatetime -->
        <get-related-one value-field="inventoryItem" relation-name="ProductFacility" to-value-field="productFacility"/>
        <set field="daysToShip" from-field="productFacility.daysToShip"/>
        <if-empty field="daysToShip">
            <!-- if the product does not have its own days to ship, use Facility.defaultDaysToShip, if not then use 30 days as a USA industry default -->
            <set field="daysToShip" from-field="facility.defaultDaysToShip" type="Long"/>
        </if-empty>
        <if-empty field="daysToShip">
            <set field="daysToShip" value="30" type="Long"/>
        </if-empty>
        <!-- TODO: Convert this to a <set-calendar> operation -->
        <call-bsh><![CDATA[
        java.sql.Timestamp orderDate = orderHeader.getTimestamp("orderDate");
        com.ibm.icu.util.Calendar cal = com.ibm.icu.util.Calendar.getInstance();
        cal.setTimeInMillis(orderDate.getTime());
        cal.add(com.ibm.icu.util.Calendar.DAY_OF_YEAR, daysToShip.intValue());
        return org.ofbiz.base.util.UtilMisc.toMap("promisedDatetime", new java.sql.Timestamp(cal.getTimeInMillis()));
        ]]></call-bsh>
    </simple-method>
    
</simple-methods>