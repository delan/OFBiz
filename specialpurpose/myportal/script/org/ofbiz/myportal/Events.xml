<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
    <simple-method method-name="updatePreferences" short-description="Update the user preferences">
        <if-compare operator="equals" value="Y" field="parameters.myCompanyComms">
            <set field="parameters.userPrefMap.myCompanyComms" value="Y"/>
            <else>
                <set field="parameters.userPrefMap.myCompanyComms" value="N"/>
            </else>
        </if-compare>
        <if-compare operator="equals" value="Y" field="parameters.myTimesheet">
            <set field="parameters.userPrefMap.myTimesheet" value="Y"/>
            <else>
                <set field="parameters.userPrefMap.myTimesheet" value="N"/>
            </else>
        </if-compare>
        <if-compare operator="equals" value="Y" field="parameters.myTasks">
            <set field="parameters.userPrefMap.myTasks" value="Y"/>
            <else>
                <set field="parameters.userPrefMap.myTasks" value="N"/>
            </else>
        </if-compare>
        <if-compare operator="equals" value="Y" field="parameters.myCommunications">
            <set field="parameters.userPrefMap.myCommunications" value="Y"/>
            <else>
                <set field="parameters.userPrefMap.myCommunications" value="N"/>
            </else>
        </if-compare>
        <if-compare operator="equals" value="Y" field="parameters.otherCommunications">
            <set field="parameters.userPrefMap.otherCommunications" value="Y"/>
            <else>
                <set field="parameters.userPrefMap.otherCommunications" value="N"/>
            </else>
        </if-compare>
        <set-service-fields service-name="setUserPreferenceGroup" map="parameters"
            to-map="inMap"/>
        <call-service service-name="setUserPreferenceGroup" in-map-name="inMap"/>
    </simple-method>

    <simple-method method-name="updateCustPreferences"
        short-description="Update the customer preferences">
        <if-compare operator="equals" value="Y" field="parameters.sendCustRequestEmail">
            <set field="parameters.userPrefMap.sendCustRequestEmail" value="Y"/>
            <else>
                <set field="parameters.userPrefMap.sendCustRequestEmail" value="N"/>
            </else>
        </if-compare>
        <set-service-fields service-name="setUserPreferenceGroup" map="parameters"
            to-map="inMap"/>
        <call-service service-name="setUserPreferenceGroup" in-map-name="inMap"/>
    </simple-method>

    <simple-method method-name="setCommEventToRead" short-description="">
        <entity-one entity-name="CommunicationEventRole" value-field="eventRole"/>
        <if-compare operator="equals" value="COM_ROLE_CREATED" field="eventRole.statusId">
            <call-simple-method method-name="checkCommEventAccess"/>
            <if-compare operator="equals" value="true" field="found">
                <entity-one entity-name="UserLogin" value-field="userLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set-service-fields service-name="setCommunicationEventRoleStatus"
                    map="parameters" to-map="updStat"/>
                <set field="updStat.statusId" value="COM_ROLE_READ"/>
                <set field="updStat.userLogin" from-field="userLogin"/>
                <call-service service-name="setCommunicationEventRoleStatus" in-map-name="updStat"
                    include-user-login="false"/>
                <else>
                    <add-error>
                        <fail-property property="MyPageNoAccess" resource="MyPortalUiLabels"/>
                    </add-error>
                </else>
            </if-compare>
        </if-compare>
    </simple-method>

    <simple-method method-name="checkCommEventAccess"
        short-description="check if the user has access to the email of this party">
        <set field="found" value="false"/>
        <if-compare-field operator="not-equals" field="parameters.partyId"
            to-field="userLogin.partyId">
            <entity-and list="emailOwners" entity-name="PartyRelationship"
                filter-by-date="true">
                <field-map field-name="partyIdFrom" value="${userLogin.partyId}"/>
                <field-map field-name="roleTypeIdFrom" value="EMAIL_ADMIN"/>
            </entity-and>
            <iterate entry="emailOwners" list="emailOwner">
                <if-compare operator="equals" value="${userLogin.partyId}"
                    field="emailOwner.partyIdTo">
                    <set field="found" value="true"/>
                </if-compare>
            </iterate>
            <else>
                <set field="found" value="true"/>
            </else>
        </if-compare-field>
    </simple-method>
    <simple-method method-name="createCommunicationEventRoles" short-description="">
        <entity-condition list="commEvents" entity-name="CommunicationEvent"/>
        <set field="count" value="0" type="Integer"/>
        <iterate entry="commEvent" list="commEvents">
            <log level="always" message="====processing: ${commEvent.communicationEventId}"/>
            <get-related value-field="commEvent" relation-name="CommunicationEventRole"
                list="roles"/>
            <if-empty field="roles">
                <!--partyId To -->
                <if-not-empty field="commEvent.partyIdTo">
                    <entity-one entity-name="PartyRole" value-field="partyRole">
                        <field-map field-name="partyId" value="${commEvent.partyIdTo}"/>
                        <field-map field-name="roleTypeId" value="ADDRESSEE"/>
                    </entity-one>
                    <if-empty field="partyRole">
                        <make-value entity-name="PartyRole" value-field="partyRole"/>
                        <set field="partyRole.partyId" value="${commEvent.partyIdTo}"/>
                        <set field="partyRole.roleTypeId" value="ADDRESSEE"/>
                        <create-value value-field="partyRole"/>
                    </if-empty>
                    <make-value entity-name="CommunicationEventRole" value-field="commRole"/>
                    <set field="commRole.communicationEventId"
                        from-field="commEvent.communicationEventId"/>
                    <set field="commRole.partyId" from-field="commEvent.partyIdTo"/>
                    <set field="commRole.roleTypeId" value="ADDRESSEE"/>
                    <set field="commRole.statusId" value="COM_ROLE_COMPLETED"/>
                    <create-value value-field="commRole"/>
                </if-not-empty>

                <!-- partyIdFrom -->
                <if-not-empty field="commEvent.partyIdFrom">
                    <entity-one entity-name="PartyRole" value-field="partyRole">
                        <field-map field-name="partyId" value="${commEvent.partyIdFrom}"/>
                        <field-map field-name="roleTypeId" value="ORIGINATOR"/>
                    </entity-one>
                    <if-empty field="partyRole">
                        <make-value entity-name="PartyRole" value-field="partyRole"/>
                        <set field="partyRole.partyId" value="${commEvent.partyIdFrom}"/>
                        <set field="partyRole.roleTypeId" value="ORIGINATOR"/>
                        <create-value value-field="partyRole"/>
                    </if-empty>
                    <set field="commRole.communicationEventId"
                        from-field="commEvent.communicationEventId"/>
                    <set field="commRole.partyId" from-field="commEvent.partyIdFrom"/>
                    <set field="commRole.roleTypeId" value="ORIGINATOR"/>
                    <set field="commRole.statusId" value="COM_ROLE_COMPLETED"/>
                    <create-value value-field="commRole"/>
                </if-not-empty>
                <calculate field="count">
                    <number value="1"/>
                    <calcop operator="add" field="count"/>
                </calculate>
            </if-empty>
        </iterate>
        <log level="always" message="========${count} records updated"/>
    </simple-method>

    <simple-method method-name="getToNextDonePage"
        short-description="return the requestValue 'donePage' as a resultcode to the controller">
        <set field="donePage" from-field="parameters.donePage"
            default-value="${parameters.DONE_PAGE}"/>
        <if-not-empty field="donePage">
            <log level="info" message="Next request: ${donePage}"/>
            <return response-code="${donePage}"/>
            <else>
                <log level="info" message="Next 'donePage' variable not provided, returning 'error'"/>
                <return response-code="error"/>
            </else>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="createCommunicationContent"
        short-description="Upload Content and Create Communication Content Association">
        <!-- Call layout to get field -->
        <call-class-method class-name="org.ofbiz.content.layout.LayoutWorker"
            method-name="uploadImageAndParameters" ret-field="formInput">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
            <string value="uploadedFile"/>
        </call-class-method>
        <set field="parameters.imageFileName" from-field="formInput.imageFileName"/>

        <!-- Call bsh get file type -->
        <call-bsh><![CDATA[
            String fileName = parameters.get("imageFileName");
            String mimeTypeId = fileName.substring(fileName.indexOf(".")+1,fileName.length());
            parameters.put("mimeType",mimeTypeId);
            ]]>
        </call-bsh>

        <!-- Get mime type from FileExtention -->
        <set field="fileMap.fileExtensionId" value="${parameters.mimeType}"/>
        <find-by-primary-key map="fileMap" value-field="mimeType" entity-name="FileExtension"/>

        <!-- Create Data Resource -->
        <set-service-fields service-name="createContentFromUploadedFile"
            map="formInput.formInput" to-map="data"/>
        <set field="data.dataResourceTypeId" value="LOCAL_FILE"/>
        <set field="data.dataTemplateTypeId" value="NONE"/>
        <set field="data.dataCategoryId" from-field="formInput.formInput.dataCategoryId"/>

        <set field="data.statusId" from-field="formInput.formInput.statusId"/>
        <set field="data.dataResourceName" from-field="formInput.imageFileName"/>
        <set field="data.mimeTypeId" from-field="mimeType.mimeTypeId"/>
        <set field="data.uploadedFile" from-field="formInput.imageData"/>
        <set field="data._uploadedFile_fileName" from-field="formInput.imageFileName"/>
        <set field="data._uploadedFile_contentType" from-field="formInput.formInput.mimeTypeId"/>
        <call-service service-name="createDataResource" in-map-name="data">
            <result-to-field result-name="dataResourceId" field="dataResourceId"
                map-name="parameters"/>
        </call-service>
        <log level="always" message=" DataResource : ${parameters.dataResourceId}"/>

        <!-- Create attach upload to data resource -->
        <set-service-fields service-name="attachUploadToDataResource" map="formInput.formInput"
            to-map="attachMap"/>
        <set field="attachMap.uploadedFile" from-field="formInput.imageData"/>
        <set field="attachMap._uploadedFile_fileName" from-field="formInput.imageFileName"/>
        <set field="attachMap._uploadedFile_contentType" from-field="formInput.formInput.mimeTypeId"/>
        <set field="attachMap.dataResourceId" from-field="parameters.dataResourceId"/>
        <set field="attachMap.mimeTypeId" from-field="mimeType.mimeTypeId"/>
        <call-service service-name="attachUploadToDataResource" in-map-name="attachMap"/>

        <!-- Create content from dataResource -->
        <set-service-fields service-name="createContentFromDataResource"
            map="formInput.formInput" to-map="contentMap"/>
        <set field="contentMap.roleTypeId" from-field="formInput.formInput.roleTypeId"/>
        <set field="contentMap.partyId" from-field="formInput.formInput.partyId"/>
        <set field="contentMap.contentTypeId" from-field="formInput.formInput.contentTypeId"/>
        <set field="contentMap.dataResourceId" from-field="parameters.dataResourceId"/>
        <call-service service-name="createContentFromDataResource" in-map-name="contentMap">
            <result-to-field result-name="contentId" field="parameters.contentId"/>
        </call-service>
        <log level="always" message=" Content : ${parameters.contentId}"/>

        <!-- Create party content -->
        <set-service-fields service-name="createPartyContent" map="formInput.formInput"
            to-map="partycontent"/>
        <set field="partycontent.contentId" from-field="parameters.contentId"/>
        <set field="partycontent.partyContentTypeId"
            from-field="formInput.formInput.partyContentTypeId"/>
        <set field="partycontent.partyId" from-field="formInput.formInput.partyId"/>
        <call-service service-name="createPartyContent" in-map-name="partycontent"/>

        <!-- Create communication event and content association -->
        <set-service-fields service-name="createCommEventContentAssoc"
            map="formInput.formInput" to-map="contentAssoc"/>
        <set field="contentAssoc.contentId" from-field="parameters.contentId"/>
        <set field="contentAssoc.communicationEventId"
            from-field="formInput.formInput.communicationEventId"/>
        <call-service service-name="createCommEventContentAssoc" in-map-name="contentAssoc">
            <result-to-field result-name="fromDate" field="fromDate"/>
        </call-service>

        <!-- Return to request -->
        <set field="communicationEventTypeId"
            from-field="formInput.formInput.communicationEventTypeId"/>
        <set field="communicationEventId" from-field="formInput.formInput.communicationEventId"/>
        <field-to-request field="communicationEventId" request-name="communicationEventId"/>
        <field-to-request field="communicationEventTypeId"
            request-name="communicationEventTypeId"/>

    </simple-method>

    <simple-method method-name="addContentToCommEvent"
        short-description="Add content to email communication">
        <!-- Call layout to get field -->
        <call-class-method class-name="org.ofbiz.content.layout.LayoutWorker"
            method-name="uploadImageAndParameters" ret-field="formInput">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
            <string value="partyId"/>
        </call-class-method>

        <!-- Create party content -->
        <set-service-fields service-name="createPartyContent" map="formInput.formInput"
            to-map="partycontent"/>
        <set field="partycontent.contentId" from-field="formInput.formInput.contentId"/>
        <set field="partycontent.partyContentTypeId"
            from-field="formInput.formInput.partyContentTypeId"/>
        <set field="partycontent.partyId" from-field="formInput.formInput.partyId"/>
        <call-service service-name="createPartyContent" in-map-name="partycontent"/>

        <!-- Create communication event and content association -->
        <set-service-fields service-name="createCommEventContentAssoc"
            map="formInput.formInput" to-map="contentAssoc"/>
        <set field="contentAssoc.contentId" from-field="formInput.formInput.contentId"/>
        <set field="contentAssoc.communicationEventId"
            from-field="formInput.formInput.communicationEventId"/>
        <call-service service-name="createCommEventContentAssoc" in-map-name="contentAssoc">
            <result-to-field result-name="fromDate" field="fromDate"/>
        </call-service>

        <!-- Return to request -->
        <set field="communicationEventTypeId"
            from-field="formInput.formInput.communicationEventTypeId"/>
        <set field="communicationEventId" from-field="formInput.formInput.communicationEventId"/>
        <field-to-request field="communicationEventTypeId"
            request-name="communicationEventTypeId"/>
        <field-to-request field="communicationEventId" request-name="communicationEventId"/>
    </simple-method>
    
    <simple-method method-name="createRegister"
        short-description="Create person when new register" login-required="false">
        <if-empty field="parameters.firstName"><property-to-field field="errorMessage" resource="MyPortalUiLabels" property="FirstName_Missing"/><field-to-list field="errorMessage" list="error_list"/></if-empty>
        <if-empty field="parameters.lastName"><property-to-field field="errorMessage" resource="MyPortalUiLabels" property="LastName_Missing"/><field-to-list field="errorMessage" list="error_list"/></if-empty>
        <if-empty field="parameters.USERNAME"><property-to-field field="errorMessage" resource="PartyUiLabels" property="PartyUserNameMissing"/><field-to-list field="errorMessage" list="error_list"/></if-empty>
        <if-empty field="parameters.PASSWORD"><property-to-field field="errorMessage" resource="PartyUiLabels" property="PartyPasswordMissing"/><field-to-list field="errorMessage" list="error_list"/></if-empty> 
        <call-bsh><![CDATA[
            parameters.put("captchaCode",org.ofbiz.common.Captcha.ID_KEY);
        ]]></call-bsh>
        <call-object-method obj-field="PASSWORD" obj-map-name="parameters" method-name="toLowerCase" ret-field="PASSWORD" ret-map-name="parameters"/>
        <call-object-method obj-field="CONFIRM_PASSWORD" obj-map-name="parameters" method-name="toLowerCase" ret-field="CONFIRM_PASSWORD" ret-map-name="parameters"/>
        <if-compare field="parameters.PASSWORD" value="${parameters.CONFIRM_PASSWORD}" operator="equals">
            <call-object-method obj-field="captcha" obj-map-name="parameters" method-name="toLowerCase" ret-field="captcha" ret-map-name="parameters"/>
            <call-object-method obj-field="captchaCode" obj-map-name="parameters" method-name="toLowerCase" ret-field="captchaCode" ret-map-name="parameters"/>
            <if-compare field="parameters.captcha" value="${parameters.captchaCode}" operator="equals">                
   
                <!-- Create Person -->
                <set field="parameters.statusId" value="PARTY_ENABLED"/>
                <make-value entity-name="Party" value-field="newEntity"/>
                <set-pk-fields map="parameters" value-field="newEntity"/>
                <make-next-seq-id value-field="newEntity" seq-field-name="partyId"/>
                <set field="newEntity.partyTypeId" value="PERSON"/>
                <set-nonpk-fields map="parameters" value-field="newEntity"/>
                <create-value value-field="newEntity"/>
                
                <make-value entity-name="PartyStatus" value-field="newEntity2"/>
                <set field="newEntity2.partyId" from-field="newEntity.partyId"/>
                <set field="newEntity2.statusId" from-field="newEntity.statusId"/>
                <set field="newEntity2.statusDate" from-field="newEntity.createdStamp"/>
                <create-value value-field="newEntity2"/>  
                
                <make-value entity-name="Person" value-field="newEntity3"/>
                <set field="newEntity3.partyId" from-field="newEntity.partyId"/>
                <set-nonpk-fields map="parameters" value-field="newEntity3"/>
                <create-value value-field="newEntity3"/>                
                
                <!-- Create the UserLogin Record -->
                <call-map-processor in-map-name="parameters" out-map-name="userLoginContext">
                    <simple-map-processor name="newUserLogin">
                        <process field="USERNAME"><copy to-field="userLoginId"/></process>
                        <process field="PASSWORD"><copy to-field="currentPassword"/></process>
                        <process field="CONFIRM_PASSWORD"><copy to-field="currentPasswordVerify"/></process>
                        <process field="PASSWORD_HINT"><copy to-field="passwordHint"/></process>
                    </simple-map-processor>
                </call-map-processor>
                <set field="userLoginExistsMap.userLoginId"  from-field="userLoginContext.userLoginId" />
                <find-by-primary-key entity-name="UserLogin" map="userLoginExistsMap" value-field="existingUserLogin"/>
                <if-not-empty field="existingUserLogin">
                    <set field="errorMessage" value="Username in use, please choose another." />
                    <field-to-list field="errorMessage" list="error_list"/>
                    <check-errors error-list-name="error_list" error-code="resultPage"/>
                    <else>
                        <make-value entity-name="UserLogin" value-field="newUserLogin"/>
                        <set field="newUserLogin.userLoginId" from-field="userLoginContext.userLoginId"/>
                        <set field="newUserLogin.currentPassword" from-field="userLoginContext.currentPassword" />
                        <set field="newUserLogin.passwordHint" from-field="userLoginContext.passwordHint" />                
                        <!-- Check the password, etc for validity -->
                        <call-bsh><![CDATA[
                            String password = (String) userLoginContext.get("currentPassword");
                            String confirmPassword = (String) userLoginContext.get("currentPasswordVerify");
                            String passwordHint = (String) userLoginContext.get("passwordHint");
                            org.ofbiz.common.login.LoginServices.checkNewPassword(newUserLogin, null, password, confirmPassword, passwordHint, error_list, true, locale);
                            boolean useEncryption = "true".equals(org.ofbiz.base.util.UtilProperties.getPropertyValue("security", "password.encrypt"));
                            if (useEncryption) { newUserLogin.set("currentPassword", org.ofbiz.base.crypto.HashCrypt.getDigestHash((String) newUserLogin.get("currentPassword"))); }
                            ]]></call-bsh>
                        <set field="newUserLogin.partyId" from-field="newEntity.partyId" />
                        <create-value value-field="newUserLogin"/>
                    </else>
                </if-not-empty>                
                <set field="partyId" from-field="newEntity.partyId"/>
                <field-to-request field="partyId" request-name="partyId"/>
                <return response-code="resultPage"/>
                <else>
                    <property-to-field field="errorMessage" resource="MyPortalUiLabels" property="CaptchaMissingError"/><field-to-list field="errorMessage" list="error_list"/>
                </else>
            </if-compare>
            <else>
                <property-to-field field="errorMessage" resource="PartyUiLabels" property="PartyPasswordMatchError"/><field-to-list field="errorMessage" list="error_list"/>
            </else>
        </if-compare>      
        <check-errors error-list-name="error_list" error-code="resultPage"/>
    </simple-method>
</simple-methods>
