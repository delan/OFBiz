<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
    <simple-method method-name="updatePreferences" short-description="Update the user preferences">
        <if-compare operator="equals" value="Y" field="parameters.myCompanyComms">
            <set field="parameters.userPrefMap.myCompanyComms" value="Y"/>
            <else>
                <set field="parameters.userPrefMap.myCompanyComms" value="N"/>
            </else>
        </if-compare>
        <if-compare operator="equals" value="Y" field="parameters.myTimesheet">
            <set field="parameters.userPrefMap.myTimesheet" value="Y"/>
            <else>
                <set field="parameters.userPrefMap.myTimesheet" value="N"/>
            </else>
        </if-compare>
        <if-compare operator="equals" value="Y" field="parameters.myTasks">
            <set field="parameters.userPrefMap.myTasks" value="Y"/>
            <else>
                <set field="parameters.userPrefMap.myTasks" value="N"/>
            </else>
        </if-compare>
        <if-compare operator="equals" value="Y" field="parameters.myCommunications">
            <set field="parameters.userPrefMap.myCommunications" value="Y"/>
            <else>
                <set field="parameters.userPrefMap.myCommunications" value="N"/>
            </else>
        </if-compare>
        <if-compare operator="equals" value="Y" field="parameters.otherCommunications">
            <set field="parameters.userPrefMap.otherCommunications" value="Y"/>
            <else>
                <set field="parameters.userPrefMap.otherCommunications" value="N"/>
            </else>
        </if-compare>
        <set-service-fields service-name="setUserPreferenceGroup" map="parameters"
            to-map="inMap"/>
        <call-service service-name="setUserPreferenceGroup" in-map-name="inMap"/>
    </simple-method>

    <simple-method method-name="updateCustPreferences"
        short-description="Update the customer preferences">
        <if-compare operator="equals" value="Y" field="parameters.sendCustRequestEmail">
            <set field="parameters.userPrefMap.sendCustRequestEmail" value="Y"/>
            <else>
                <set field="parameters.userPrefMap.sendCustRequestEmail" value="N"/>
            </else>
        </if-compare>
        <set-service-fields service-name="setUserPreferenceGroup" map="parameters"
            to-map="inMap"/>
        <call-service service-name="setUserPreferenceGroup" in-map-name="inMap"/>
    </simple-method>

    <simple-method method-name="setCommEventToRead" short-description="">
        <entity-one entity-name="CommunicationEventRole" value-field="eventRole"/>
        <if-compare operator="equals" value="COM_ROLE_CREATED" field="eventRole.statusId">
            <call-simple-method method-name="checkCommEventAccess"/>
            <if-compare operator="equals" value="true" field="found">
                <entity-one entity-name="UserLogin" value-field="userLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set-service-fields service-name="setCommunicationEventRoleStatus"
                    map="parameters" to-map="updStat"/>
                <set field="updStat.statusId" value="COM_ROLE_READ"/>
                <set field="updStat.userLogin" from-field="userLogin"/>
                <call-service service-name="setCommunicationEventRoleStatus" in-map-name="updStat"
                    include-user-login="false"/>
                <else>
                    <add-error>
                        <fail-property property="MyPortalNoAccess" resource="MyPortalUiLabels"/>
                    </add-error>
                </else>
            </if-compare>
        </if-compare>
    </simple-method>

    <simple-method method-name="checkCommEventAccess"
        short-description="check if the user has access to the email of this party">
        <set field="found" value="false"/>
        <if-compare-field operator="not-equals" field="parameters.partyId"
            to-field="userLogin.partyId">
            <entity-and list="emailOwners" entity-name="PartyRelationship"
                filter-by-date="true">
                <field-map field-name="partyIdFrom" value="${userLogin.partyId}"/>
                <field-map field-name="roleTypeIdFrom" value="EMAIL_ADMIN"/>
            </entity-and>
            <iterate entry="emailOwners" list="emailOwner">
                <if-compare operator="equals" value="${userLogin.partyId}"
                    field="emailOwner.partyIdTo">
                    <set field="found" value="true"/>
                </if-compare>
            </iterate>
            <else>
                <set field="found" value="true"/>
            </else>
        </if-compare-field>
    </simple-method>
    <simple-method method-name="createCommunicationEventRoles" short-description="">
        <entity-condition list="commEvents" entity-name="CommunicationEvent"/>
        <set field="count" value="0" type="Integer"/>
        <iterate entry="commEvent" list="commEvents">
            <log level="always" message="====processing: ${commEvent.communicationEventId}"/>
            <get-related value-field="commEvent" relation-name="CommunicationEventRole"
                list="roles"/>
            <if-empty field="roles">
                <!--partyId To -->
                <if-not-empty field="commEvent.partyIdTo">
                    <entity-one entity-name="PartyRole" value-field="partyRole">
                        <field-map field-name="partyId" value="${commEvent.partyIdTo}"/>
                        <field-map field-name="roleTypeId" value="ADDRESSEE"/>
                    </entity-one>
                    <if-empty field="partyRole">
                        <make-value entity-name="PartyRole" value-field="partyRole"/>
                        <set field="partyRole.partyId" value="${commEvent.partyIdTo}"/>
                        <set field="partyRole.roleTypeId" value="ADDRESSEE"/>
                        <create-value value-field="partyRole"/>
                    </if-empty>
                    <make-value entity-name="CommunicationEventRole" value-field="commRole"/>
                    <set field="commRole.communicationEventId"
                        from-field="commEvent.communicationEventId"/>
                    <set field="commRole.partyId" from-field="commEvent.partyIdTo"/>
                    <set field="commRole.roleTypeId" value="ADDRESSEE"/>
                    <set field="commRole.statusId" value="COM_ROLE_COMPLETED"/>
                    <create-value value-field="commRole"/>
                </if-not-empty>

                <!-- partyIdFrom -->
                <if-not-empty field="commEvent.partyIdFrom">
                    <entity-one entity-name="PartyRole" value-field="partyRole">
                        <field-map field-name="partyId" value="${commEvent.partyIdFrom}"/>
                        <field-map field-name="roleTypeId" value="ORIGINATOR"/>
                    </entity-one>
                    <if-empty field="partyRole">
                        <make-value entity-name="PartyRole" value-field="partyRole"/>
                        <set field="partyRole.partyId" value="${commEvent.partyIdFrom}"/>
                        <set field="partyRole.roleTypeId" value="ORIGINATOR"/>
                        <create-value value-field="partyRole"/>
                    </if-empty>
                    <set field="commRole.communicationEventId"
                        from-field="commEvent.communicationEventId"/>
                    <set field="commRole.partyId" from-field="commEvent.partyIdFrom"/>
                    <set field="commRole.roleTypeId" value="ORIGINATOR"/>
                    <set field="commRole.statusId" value="COM_ROLE_COMPLETED"/>
                    <create-value value-field="commRole"/>
                </if-not-empty>
                <calculate field="count">
                    <number value="1"/>
                    <calcop operator="add" field="count"/>
                </calculate>
            </if-empty>
        </iterate>
        <log level="always" message="========${count} records updated"/>
    </simple-method>

    <simple-method method-name="getToNextDonePage"
        short-description="return the requestValue 'donePage' as a resultcode to the controller">
        <set field="donePage" from-field="parameters.donePage"
            default-value="${parameters.DONE_PAGE}"/>
        <if-not-empty field="donePage">
            <log level="info" message="Next request: ${donePage}"/>
            <return response-code="${donePage}"/>
            <else>
                <log level="info" message="Next 'donePage' variable not provided, returning 'error'"/>
                <return response-code="error"/>
            </else>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="createCommunicationContent"
        short-description="Upload Content and Create Communication Content Association">
        <!-- Call layout to get field -->
        <call-class-method class-name="org.ofbiz.content.layout.LayoutWorker"
            method-name="uploadImageAndParameters" ret-field="formInput">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
            <string value="uploadedFile"/>
        </call-class-method>
        <set field="parameters.imageFileName" from-field="formInput.imageFileName"/>

        <!-- Call bsh get file type -->
        <call-bsh><![CDATA[
            String fileName = parameters.get("imageFileName");
            String mimeTypeId = fileName.substring(fileName.indexOf(".")+1,fileName.length());
            parameters.put("mimeType",mimeTypeId);
            ]]>
        </call-bsh>

        <!-- Get mime type from FileExtention -->
        <set field="fileMap.fileExtensionId" value="${parameters.mimeType}"/>
        <find-by-primary-key map="fileMap" value-field="mimeType" entity-name="FileExtension"/>

        <!-- Create Data Resource -->
        <set-service-fields service-name="createContentFromUploadedFile"
            map="formInput.formInput" to-map="data"/>
        <set field="data.dataResourceTypeId" value="LOCAL_FILE"/>
        <set field="data.dataTemplateTypeId" value="NONE"/>
        <set field="data.dataCategoryId" from-field="formInput.formInput.dataCategoryId"/>

        <set field="data.statusId" from-field="formInput.formInput.statusId"/>
        <set field="data.dataResourceName" from-field="formInput.imageFileName"/>
        <set field="data.mimeTypeId" from-field="mimeType.mimeTypeId"/>
        <set field="data.uploadedFile" from-field="formInput.imageData"/>
        <set field="data._uploadedFile_fileName" from-field="formInput.imageFileName"/>
        <set field="data._uploadedFile_contentType" from-field="formInput.formInput.mimeTypeId"/>
        <call-service service-name="createDataResource" in-map-name="data">
            <result-to-field result-name="dataResourceId" field="parameters.dataResourceId"/>
        </call-service>
        <log level="always" message=" DataResource : ${parameters.dataResourceId}"/>

        <!-- Create attach upload to data resource -->
        <set-service-fields service-name="attachUploadToDataResource" map="formInput.formInput"
            to-map="attachMap"/>
        <set field="attachMap.uploadedFile" from-field="formInput.imageData"/>
        <set field="attachMap._uploadedFile_fileName" from-field="formInput.imageFileName"/>
        <set field="attachMap._uploadedFile_contentType" from-field="formInput.formInput.mimeTypeId"/>
        <set field="attachMap.dataResourceId" from-field="parameters.dataResourceId"/>
        <set field="attachMap.mimeTypeId" from-field="mimeType.mimeTypeId"/>
        <call-service service-name="attachUploadToDataResource" in-map-name="attachMap"/>

        <!-- Create content from dataResource -->
        <set-service-fields service-name="createContentFromDataResource"
            map="formInput.formInput" to-map="contentMap"/>
        <set field="contentMap.roleTypeId" from-field="formInput.formInput.roleTypeId"/>
        <set field="contentMap.partyId" from-field="formInput.formInput.partyId"/>
        <set field="contentMap.contentTypeId" from-field="formInput.formInput.contentTypeId"/>
        <set field="contentMap.dataResourceId" from-field="parameters.dataResourceId"/>
        <call-service service-name="createContentFromDataResource" in-map-name="contentMap">
            <result-to-field result-name="contentId" field="parameters.contentId"/>
        </call-service>
        <log level="always" message=" Content : ${parameters.contentId}"/>

        <!-- Create party content -->
        <set-service-fields service-name="createPartyContent" map="formInput.formInput"
            to-map="partycontent"/>
        <set field="partycontent.contentId" from-field="parameters.contentId"/>
        <set field="partycontent.partyContentTypeId"
            from-field="formInput.formInput.partyContentTypeId"/>
        <set field="partycontent.partyId" from-field="formInput.formInput.partyId"/>
        <call-service service-name="createPartyContent" in-map-name="partycontent"/>

        <!-- Create communication event and content association -->
        <set-service-fields service-name="createCommEventContentAssoc"
            map="formInput.formInput" to-map="contentAssoc"/>
        <set field="contentAssoc.contentId" from-field="parameters.contentId"/>
        <set field="contentAssoc.communicationEventId"
            from-field="formInput.formInput.communicationEventId"/>
        <call-service service-name="createCommEventContentAssoc" in-map-name="contentAssoc">
            <result-to-field result-name="fromDate" field="fromDate"/>
        </call-service>

        <!-- Return to request -->
        <set field="communicationEventTypeId"
            from-field="formInput.formInput.communicationEventTypeId"/>
        <set field="communicationEventId" from-field="formInput.formInput.communicationEventId"/>
        <field-to-request field="communicationEventId" request-name="communicationEventId"/>
        <field-to-request field="communicationEventTypeId"
            request-name="communicationEventTypeId"/>

    </simple-method>

    <simple-method method-name="addContentToCommEvent"
        short-description="Add content to email communication">
        <!-- Call layout to get field -->
        <call-class-method class-name="org.ofbiz.content.layout.LayoutWorker"
            method-name="uploadImageAndParameters" ret-field="formInput">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
            <string value="partyId"/>
        </call-class-method>

        <!-- Create party content -->
        <set-service-fields service-name="createPartyContent" map="formInput.formInput"
            to-map="partycontent"/>
        <set field="partycontent.contentId" from-field="formInput.formInput.contentId"/>
        <set field="partycontent.partyContentTypeId"
            from-field="formInput.formInput.partyContentTypeId"/>
        <set field="partycontent.partyId" from-field="formInput.formInput.partyId"/>
        <call-service service-name="createPartyContent" in-map-name="partycontent"/>

        <!-- Create communication event and content association -->
        <set-service-fields service-name="createCommEventContentAssoc"
            map="formInput.formInput" to-map="contentAssoc"/>
        <set field="contentAssoc.contentId" from-field="formInput.formInput.contentId"/>
        <set field="contentAssoc.communicationEventId"
            from-field="formInput.formInput.communicationEventId"/>
        <call-service service-name="createCommEventContentAssoc" in-map-name="contentAssoc">
            <result-to-field result-name="fromDate" field="fromDate"/>
        </call-service>

        <!-- Return to request -->
        <set field="communicationEventTypeId"
            from-field="formInput.formInput.communicationEventTypeId"/>
        <set field="communicationEventId" from-field="formInput.formInput.communicationEventId"/>
        <field-to-request field="communicationEventTypeId"
            request-name="communicationEventTypeId"/>
        <field-to-request field="communicationEventId" request-name="communicationEventId"/>
    </simple-method>
    
    <simple-method method-name="createRegister"
        short-description="Create person when new register" login-required="false">
        <call-bsh><![CDATA[
            parameters.put("captchaCode",org.ofbiz.common.Captcha.ID_KEY);
            org.ofbiz.common.Captcha.getCodeCaptcha(request,response);
            ]]></call-bsh>
        <if-empty field="parameters.firstName"><property-to-field field="errorMessage" resource="MyPortalUiLabels" property="FirstName_Missing"/><field-to-list field="errorMessage" list="error_list"/></if-empty>
        <if-empty field="parameters.lastName"><property-to-field field="errorMessage" resource="MyPortalUiLabels" property="LastName_Missing"/><field-to-list field="errorMessage" list="error_list"/></if-empty>
        <if-empty field="parameters.USERNAME"><property-to-field field="errorMessage" resource="PartyUiLabels" property="PartyUserNameMissing"/><field-to-list field="errorMessage" list="error_list"/></if-empty>
        <if-empty field="parameters.PASSWORD"><property-to-field field="errorMessage" resource="PartyUiLabels" property="PartyPasswordMissing"/><field-to-list field="errorMessage" list="error_list"/></if-empty>
        <if-empty field="parameters.USER_EMAIL"><property-to-field field="errorMessage" resource="PartyUiLabels" property="PartyEmailAddressMissing"/><field-to-list field="errorMessage" list="error_list"/></if-empty>
        <check-errors error-list-name="error_list" error-code="resultPage"/>
        
        <!-- set parameter of person to personContext Map -->
        <set field="personContext.partyId" from-field="parameters.USERNAME"/>
        <set field="personContext.salutation" from-field="parameters.salutation"/>
        <set field="personContext.firstName" from-field="parameters.firstName"/>
        <set field="personContext.middleName" from-field="parameters.middleName"/>
        <set field="personContext.lastName" from-field="parameters.lastName"/>
        <set field="personContext.comments" from-field="parameters.comments"/>
        
        <!-- set parameter of userLogin to userLoginContext Map -->
        <set field="userLoginContext.userLoginId" from-field="parameters.USERNAME"/>
        
        <now-timestamp field="nowStamp"/>
        <call-object-method obj-field="parameters.PASSWORD" method-name="toLowerCase" ret-field="parameters.PASSWORD"/>
        <call-object-method obj-field="parameters.CONFIRM_PASSWORD" method-name="toLowerCase" ret-field="parameters.CONFIRM_PASSWORD"/>  
        <call-object-method obj-field="parameters.captcha" method-name="toLowerCase" ret-field="parameters.captcha"/>
        <call-object-method obj-field="parameters.captchaCode" method-name="toLowerCase" ret-field="parameters.captchaCode"/>
        <if-compare field="parameters.PASSWORD" value="${parameters.CONFIRM_PASSWORD}" operator="equals">
            <if-compare field="parameters.captcha" value="${parameters.captchaCode}" operator="equals">                
                
                <!-- Create user login and Person -->
                <find-by-primary-key entity-name="UserLogin" map="userLoginContext" value-field="existingUserLogin"/>
                <if-empty field="existingUserLogin">                    
                    <set field="userLoginContext.currentPassword" from-field="parameters.PASSWORD"/>
                    <set field="userLoginContext.currentPasswordVerify" from-field="parameters.CONFIRM_PASSWORD"/>
                    <set-service-fields map="personContext" service-name="createPersonAndUserLogin" to-map="personUserLoginContext"/>
                    <set-service-fields map="userLoginContext" service-name="createPersonAndUserLogin" to-map="personUserLoginContext"/>
                    <call-service service-name="createPersonAndUserLogin" in-map-name="personUserLoginContext">
                        <result-to-field result-name="partyId" field="partyId"/>
                        <result-to-field field="createdUserLogin" result-name="newUserLogin"/>
                    </call-service>
                    <set-current-user-login value-field="createdUserLogin"/>
                    <else>
                        <set field="errorMessage" value="Username in use, please choose another." />
                        <field-to-list field="errorMessage" list="error_list"/>
                        <check-errors error-list-name="error_list" error-code="resultPage"/>
                    </else>
                </if-empty>                              
                
                <!-- create the PartyDataSource entry to track where this info came from... -->
                <make-value entity-name="PartyDataSource" value-field="partyDataSource"/>
                <set value="ECOMMERCE_SITE" field="partyDataSource.dataSourceId"/>
                <set from-field="nowStamp" field="partyDataSource.fromDate"/>
                <set value="Y" field="partyDataSource.isCreate"/>
                <set from-field="partyId" field="partyDataSource.partyId"/>
                <session-to-field field="visit"/>
                <set from-field="visit.visitId" field="partyDataSource.visitId"/>
                <create-value value-field="partyDataSource"/>
                
                <!-- Create E-mail address -->
                <set field="emailContext.infoString" from-field="parameters.USER_EMAIL"/>
                <set field="emailContext.contactMechTypeId" value="EMAIL_ADDRESS"/>
                <call-service service-name="createContactMech" in-map-name="emailContext">
                    <result-to-field result-name="contactMechId" field="emailPurposeContext.contactMechId"/>
                </call-service>
                <set from-field="partyId" field="emailPurposeContext.partyId"/>
                <set value="PRIMARY_EMAIL" field="emailPurposeContext.contactMechPurposeTypeId"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="emailPurposeContext"/>
                
                <!-- Send e-mail to new create user -->
                <entity-one entity-name="WebSite" value-field="webSite"/>
                <set field="storeEmailLookup.productStoreId" from-field="webSite.productStoreId"/>
                <set field="storeEmailLookup.emailType" value="PRDS_CUST_REGISTER"/>
                <find-by-primary-key map="storeEmailLookup" entity-name="ProductStoreEmailSetting"  value-field="storeEmail"/>
                <get-related-one value-field="createdUserLogin" relation-name="Person" to-value-field="person"/>
                <set field="bodyParameters.person" from-field="person"/>
                <set field="emailParams.bodyParameters" from-field="bodyParameters"/>  
                <set field="emailParams.sendTo" from-field="emailContext.infoString"/>
                <set field="emailParams.subject" from-field="storeEmail.subject"/>
                <set field="emailParams.sendFrom" from-field="storeEmail.fromAddress"/>
                <set field="emailParams.sendCc" from-field="storeEmail.ccAddress"/>
                <set field="emailParams.sendBcc" from-field="storeEmail.bccAddress"/>
                <set field="emailParams.contentType" from-field="storeEmail.contentType"/>
                <set field="emailParams.bodyScreenUri" from-field="storeEmail.bodyScreenLocation"/>
                <set field="emailParams.webSiteId" from-field="webSite.webSiteId"/>
                <set field="emailParams.emailType" from-field="storeEmail.emailType"/>
                <call-service service-name="sendMailFromScreen" in-map-name="emailParams"/>
                
                <!-- Create Customer Request -->
                <set field="custRequest.custRequestTypeId" value="RF_SUPPORT"/>
                <set field="custRequest.fromPartyId" from-field="partyId"/>
                <set field="custRequest.custRequestName" value="New user account"/>
                <set field="custRequest.productStoreId" from-field="webSite.productStoreId"/>
                <call-service service-name="createCustRequest" in-map-name="custRequest"/>
                
                <!-- set field to request -->
                <field-to-request field="partyId" request-name="partyId"/>
                <field-to-request field="emailPurposeContext.contactMechId" request-name="contactMechId"/>
                <return response-code="resultPage"/>
                <else>
                    <property-to-field field="errorMessage" resource="MyPortalUiLabels" property="CaptchaMissingError"/><field-to-list field="errorMessage" list="error_list"/>
                </else>
            </if-compare>
            <else>
                <property-to-field field="errorMessage" resource="PartyUiLabels" property="PartyPasswordMatchError"/><field-to-list field="errorMessage" list="error_list"/>
            </else>
        </if-compare>      
        <check-errors error-list-name="error_list" error-code="resultPage"/>
        <call-class-method class-name="org.ofbiz.common.Captcha" method-name="deleteFile"/>
    </simple-method>
</simple-methods>
