<?xml version="1.0" encoding="UTF-8"?>
<!--
  To refer to this DTD in your XML file, use the following declarations:

  To use only the simple-methods element as the root node, use the following:
<!DOCTYPE simple-methods PUBLIC "-//OFBiz//DTD Simple Methods//EN" "http://www.ofbiz.org/dtds/simple-methods.dtd">

  To use only the simple-map-processors element as the root node, use the following:
<!DOCTYPE simple-map-processors PUBLIC "-//OFBiz//DTD Simple Methods//EN" "http://www.ofbiz.org/dtds/simple-methods.dtd">
-->

<!--
 *  Copyright (c) 2001 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*This is the DTD for the Open For Business Simple Event definition XML file.
-->

<!--
    ==================================================
    ========== The Simple Methods Section ==========
    ==================================================
    (see further down for the Simple Map Processor Section)
-->

<!ENTITY % SimpleMethodOperations "call-map-processor | check-errors | call-service | call-bsh |
        field-to-request | field-to-session | field-to-result | field-to-field |
        if-validate-method | if-compare | if-compare-field | if-regexp | if-not-empty">

<!ELEMENT simple-methods ( simple-method+ )>

<!--
    A simple method can be called in either an event context from the Control
    Servlet (or another event) or in a service context through the Service
    Engine, or any other component that has access to a service dispatcher.

    The field-to-request and field-to-session elements will be IGNORED when 
    called in a service context. So, they are ONLY used when called in an event context.
    
    The field-to-result elements will be ignored in an event context, ie only used in a service.
    
    The parameter-map-name env entry will contain the HttpRequest parameters for
    running in an event context and and the input context when running in a service.
    
    
-->
<!ELEMENT simple-method ( (%SimpleMethodOperations;)* )>
<!ATTLIST simple-method
    method-name CDATA #REQUIRED
    short-description CDATA #REQUIRED
    login-required ( true | false ) "true"
    use-transaction ( true | false ) "true"
    default-error-code CDATA "error"
    default-success-code CDATA "success"
    parameter-map-name CDATA "parameters"
    event-request-object-name CDATA "_request_"
    event-response-code-name CDATA "_response_code_"
    event-error-message-name CDATA "_error_message_"
    event-event-message-name CDATA "_event_message_"
    service-response-message-name CDATA "responseMessage"
    service-error-message-name CDATA "errorMessage"
    service-error-message-list-name CDATA "errorMessageList"
    service-success-message-name CDATA "successMessage"
    service-success-message-list-name CDATA "successMessageList"
>

<!-- 
    If both an external and an inline map-processor are specified, the external 
    one will be called first, allowing the inline one to override its behavior
-->
<!ELEMENT call-map-processor ( simple-map-processor? )>
<!ATTLIST call-map-processor
    xml-resource CDATA #IMPLIED
    processor-name CDATA #IMPLIED
    in-map-name CDATA #REQUIRED
    out-map-name CDATA #REQUIRED
    error-list-name CDATA "_error_list_"
>

<!ELEMENT check-errors ( error-prefix?, error-suffix?, message-prefix?, message-suffix? )>
<!ATTLIST check-errors
    error-code CDATA "error"
    error-list-name CDATA "_error_list_"
>

<!--
    The result-to-request and result-to-session elements will be IGNORED when 
    called in a service context. So, they are ONLY used when called in an event context.
-->
<!ELEMENT call-service ( error-prefix?, error-suffix?, success-prefix?, success-suffix?, message-prefix?, message-suffix?, default-message?, 
                         (results-to-map | result-to-field | result-to-request | result-to-session | result-to-result)* )>
<!ATTLIST call-service
    service-name CDATA #REQUIRED
    in-map-name CDATA #REQUIRED
    include-user-login ( true | false ) "true"
    error-code CDATA "error"
    success-code CDATA "success"
>
    <!ELEMENT error-prefix (#PCDATA)>
    <!ATTLIST error-prefix
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >
    <!ELEMENT error-suffix (#PCDATA)>
    <!ATTLIST error-suffix
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >
    <!ELEMENT success-prefix (#PCDATA)>
    <!ATTLIST success-prefix
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >
    <!ELEMENT success-suffix (#PCDATA)>
    <!ATTLIST success-suffix
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >
    <!ELEMENT message-prefix (#PCDATA)>
    <!ATTLIST message-prefix
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >
    <!ELEMENT message-suffix (#PCDATA)>
    <!ATTLIST message-suffix
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >
    <!ELEMENT default-message (#PCDATA)>
    <!ATTLIST default-message
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >

    <!ELEMENT results-to-map EMPTY>
    <!ATTLIST results-to-map
        map-name CDATA #REQUIRED
    >
    <!ELEMENT result-to-field EMPTY>
    <!ATTLIST result-to-field
        result-name CDATA #REQUIRED
        map-name CDATA #REQUIRED
        field-name CDATA #IMPLIED
    >
    <!ELEMENT result-to-request EMPTY>
    <!ATTLIST result-to-request
        result-name CDATA #REQUIRED
        request-name CDATA #IMPLIED
    >
    <!ELEMENT result-to-session EMPTY>
    <!ATTLIST result-to-session
        result-name CDATA #REQUIRED
        session-name CDATA #IMPLIED
    >
    <!ELEMENT result-to-result EMPTY>
    <!ATTLIST result-to-result
        result-name CDATA #REQUIRED
        service-result-name CDATA #IMPLIED
    >

<!-- TODO: handle call-bsh operation -->

<!-- 
Runs an external bsh script from the classpath if resource is specified and 
then runs the inlined bsh script if any is specified.

The bsh context is the current simple-method environment including maps, lists
and special objects whose names are defined in the simple-method attributes.
-->
<!ELEMENT call-bsh (#PCDATA)>
<!ATTLIST call-bsh
    resource CDATA #IMPLIED
>

<!-- Operations to copy map fields in the current env to context specific containers -->
    
<!ELEMENT field-to-request EMPTY>
<!ATTLIST field-to-request
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    request-name CDATA #IMPLIED
>
<!ELEMENT field-to-session EMPTY>
<!ATTLIST field-to-session
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    session-name CDATA #IMPLIED
>
<!ELEMENT field-to-result EMPTY>
<!ATTLIST field-to-result
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    result-name CDATA #IMPLIED
>
<!-- TODO: handle field-to-field operation -->
<!ELEMENT field-to-field EMPTY>
<!ATTLIST field-to-field
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    map-name CDATA #IMPLIED
    field-name CDATA #IMPLIED
>

<!-- TODO: handle if-* operations -->

<!-- 
Operations that conditionally execute blocks within them; they mimic the
simple-map-processor process operations that validate incoming data
-->

<!-- if-validate-method calls a static Java method that takes a String and returns a boolean -->
<!ELEMENT if-validate-method ( (%SimpleMethodOperations;)* )>
<!ATTLIST if-validate-method
    method CDATA #REQUIRED
    class CDATA "org.ofbiz.core.util.UtilValidate"
>

<!ELEMENT if-compare ( (%SimpleMethodOperations;)* )>
<!ATTLIST if-compare
    operator ( less | greater | less-equals | greater-equals | equals | not-equals | contains ) #REQUIRED
    value CDATA #REQUIRED
    type ( String | Double | Float | Long | Integer | Date | Time | Timestamp ) "String"
    format CDATA #IMPLIED
>

<!ELEMENT if-compare-field ( (%SimpleMethodOperations;)* )>
<!ATTLIST if-compare-field
    operator ( less | greater | less-equals | greater-equals | equals | not-equals | contains ) #REQUIRED
    field CDATA #REQUIRED
    type ( String | Double | Float | Long | Integer | Date | Time | Timestamp ) "String"
    format CDATA #IMPLIED
>

<!ELEMENT if-regexp ( (%SimpleMethodOperations;)* )>
<!ATTLIST if-regexp
    expr CDATA #REQUIRED
>

<!ELEMENT if-not-empty ( (%SimpleMethodOperations;)* )>


<!-- 
    ======================================================
    ========== The Simple Map Processor Section ==========
    ======================================================
-->
<!ELEMENT simple-map-processors ( simple-map-processor+ )>

<!ELEMENT simple-map-processor ( make-in-string*, process* )>
<!ATTLIST simple-map-processor
    name CDATA #REQUIRED
>

<!-- 
    Make In String & Operations 
-->
<!ELEMENT make-in-string ( ( in-field | property | constant )* )>
<!ATTLIST make-in-string
    field CDATA #REQUIRED
>
<!ELEMENT in-field EMPTY>
<!ATTLIST in-field
    field CDATA #REQUIRED
>
<!ELEMENT property EMPTY>
<!ATTLIST property
    resource CDATA #REQUIRED
    property CDATA #REQUIRED
>
<!ELEMENT constant (#PCDATA)>

<!-- 
    Field Process & Operations 
-->
<!ELEMENT process ( ( validate-method | compare | compare-field | regexp | not-empty | copy | convert )* )>
<!ATTLIST process
    field CDATA #REQUIRED
>

<!-- validate-method calls a static Java method that takes a String and returns a boolean -->
<!ELEMENT validate-method ( fail-message | fail-property )>
<!ATTLIST validate-method
    method CDATA #REQUIRED
    class CDATA "org.ofbiz.core.util.UtilValidate"
>

<!ELEMENT compare ( fail-message | fail-property )>
<!ATTLIST compare
    operator ( less | greater | less-equals | greater-equals | equals | not-equals | contains ) #REQUIRED
    value CDATA #REQUIRED
    type ( String | Double | Float | Long | Integer | Date | Time | Timestamp ) "String"
    format CDATA #IMPLIED
>

<!ELEMENT compare-field ( fail-message | fail-property )>
<!ATTLIST compare-field
    operator ( less | greater | less-equals | greater-equals | equals | not-equals | contains ) #REQUIRED
    field CDATA #REQUIRED
    type ( String | Double | Float | Long | Integer | Date | Time | Timestamp ) "String"
    format CDATA #IMPLIED
>

<!ELEMENT regexp ( fail-message | fail-property )>
<!ATTLIST regexp
    expr CDATA #REQUIRED
>

<!ELEMENT not-empty ( fail-message | fail-property )>

<!-- Copy operation: if no to-field is specified, it is the same as the field on process -->
<!ELEMENT copy EMPTY>
<!ATTLIST copy
    to-field CDATA #IMPLIED
    replace ( true | false ) "true"
    set-if-null ( true | false ) "false"
>

<!-- Convert operation: if no to-field is specified, it is the same as the field on process -->
<!ELEMENT convert ( fail-message | fail-property )>
<!ATTLIST convert
    to-field CDATA #IMPLIED
    type ( String | Double | Float | Long | Integer | Date | Time | Timestamp ) #REQUIRED
    replace ( true | false ) "true"
    set-if-null ( true | false ) "false"
    format CDATA #IMPLIED
>

<!-- 
    Failure stuff: inline message or from a properties file 
-->
<!ELEMENT fail-message EMPTY>
<!ATTLIST fail-message
    message CDATA #REQUIRED
>

<!ELEMENT fail-property EMPTY>
<!ATTLIST fail-property
    resource CDATA #REQUIRED
    property CDATA #REQUIRED
>
