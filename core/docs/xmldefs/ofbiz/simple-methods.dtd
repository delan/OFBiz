<?xml version="1.0" encoding="UTF-8"?>
<!--
  To refer to this DTD in your XML file, use the following declarations:

  To use only the simple-methods element as the root node, use the following:
<!DOCTYPE simple-methods PUBLIC "-//OFBiz//DTD Simple Methods//EN" "http://www.ofbiz.org/dtds/simple-methods.dtd">

  To use only the simple-map-processors element as the root node, use the following:
<!DOCTYPE simple-map-processors PUBLIC "-//OFBiz//DTD Simple Methods//EN" "http://www.ofbiz.org/dtds/simple-methods.dtd">
-->

<!--
 *  Copyright (c) 2001 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*This is the DTD for the Open For Business Simple Event definition XML file.
-->

<!--
    ==================================================
    ========== The Simple Methods Section ==========
    ==================================================
    (see further down for the Simple Map Processor Section)
-->

<!ENTITY % CallOperations "call-map-processor | call-service | call-service-asynch | call-bsh | check-errors">
<!ENTITY % EventOperations "field-to-request | field-to-session | request-to-field | session-to-field">
<!ENTITY % EventEnvOperations "env-to-request | env-to-session | request-to-env | session-to-env">
<!ENTITY % ServiceOperations "field-to-result | env-to-result">
<!ENTITY % EnvOperations "field-to-field | env-to-list | env-to-field | field-to-env">
<!ENTITY % EntityMiscOperations "now-timestamp-to-env | now-date-to-env | sequenced-id-to-env">
<!ENTITY % EntityFindOperations "find-by-primary-key | find-by-and">
<!ENTITY % EntityValueOperations "make-value | clone-value | create-value | update-value | remove-value | remove-by-and">
<!ENTITY % EntityListOperations "store-list | remove-list">
<!ENTITY % IfOperations "if-validate-method | if-compare | if-compare-field | if-regexp | if-empty | if-not-empty">

<!ENTITY % SimpleMethodOperations "%CallOperations; | %EventOperations; | %EventEnvOperations; | 
        %ServiceOperations; | %EnvOperations; | %EntityMiscOperations; | %EntityFindOperations; |
        %EntityValueOperations; | %EntityListOperations; | %IfOperations;">

<!ELEMENT simple-methods ( simple-method+ )>

<!--
    A simple method can be called in either an event context from the Control
    Servlet (or another event) or in a service context through the Service
    Engine, or any other component that has access to a service dispatcher.

    The field-to-request and field-to-session elements will be IGNORED when 
    called in a service context. So, they are ONLY used when called in an event context.
    
    The field-to-result elements will be ignored in an event context, ie only used in a service.
    
    The parameter-map-name env entry will contain the HttpRequest parameters for
    running in an event context and and the input context when running in a service.
    
    
-->
<!ELEMENT simple-method ( (%SimpleMethodOperations;)* )>
<!ATTLIST simple-method
    method-name CDATA #REQUIRED
    short-description CDATA #REQUIRED
    login-required ( true | false ) "true"
    use-transaction ( true | false ) "true"
    default-error-code CDATA "error"
    default-success-code CDATA "success"
    parameter-map-name CDATA "parameters"
    event-request-object-name CDATA "request"
    event-response-code-name CDATA "_response_code_"
    event-error-message-name CDATA "_error_message_"
    event-event-message-name CDATA "_event_message_"
    service-response-message-name CDATA "responseMessage"
    service-error-message-name CDATA "errorMessage"
    service-error-message-list-name CDATA "errorMessageList"
    service-success-message-name CDATA "successMessage"
    service-success-message-list-name CDATA "successMessageList"
    delegator-name CDATA "delegator"
    security-name CDATA "security"
    dispatcher-name CDATA "dispatcher"
>

<!-- 
    If both an external and an inline map-processor are specified, the external 
    one will be called first, allowing the inline one to override its behavior
-->
<!ELEMENT call-map-processor ( simple-map-processor? )>
<!ATTLIST call-map-processor
    xml-resource CDATA #IMPLIED
    processor-name CDATA #IMPLIED
    in-map-name CDATA #REQUIRED
    out-map-name CDATA #REQUIRED
    error-list-name CDATA "error_list"
>

<!--
    The result-to-request and result-to-session elements will be IGNORED when 
    called in a service context. So, they are ONLY used when called in an event context.
-->
<!ELEMENT call-service ( error-prefix?, error-suffix?, success-prefix?, success-suffix?, message-prefix?, message-suffix?, default-message?, 
                         (results-to-map | result-to-field | result-to-request | result-to-session | result-to-result)* )>
<!ATTLIST call-service
    service-name CDATA #REQUIRED
    in-map-name CDATA #REQUIRED
    include-user-login ( true | false ) "true"
    error-code CDATA "error"
    success-code CDATA "success"
>
    <!ELEMENT error-prefix (#PCDATA)>
    <!ATTLIST error-prefix
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >
    <!ELEMENT error-suffix (#PCDATA)>
    <!ATTLIST error-suffix
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >
    <!ELEMENT success-prefix (#PCDATA)>
    <!ATTLIST success-prefix
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >
    <!ELEMENT success-suffix (#PCDATA)>
    <!ATTLIST success-suffix
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >
    <!ELEMENT message-prefix (#PCDATA)>
    <!ATTLIST message-prefix
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >
    <!ELEMENT message-suffix (#PCDATA)>
    <!ATTLIST message-suffix
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >
    <!ELEMENT default-message (#PCDATA)>
    <!ATTLIST default-message
        resource CDATA #IMPLIED
        property CDATA #IMPLIED
    >

    <!ELEMENT results-to-map EMPTY>
    <!ATTLIST results-to-map
        map-name CDATA #REQUIRED
    >
    <!ELEMENT result-to-field EMPTY>
    <!ATTLIST result-to-field
        result-name CDATA #REQUIRED
        map-name CDATA #REQUIRED
        field-name CDATA #IMPLIED
    >
    <!ELEMENT result-to-request EMPTY>
    <!ATTLIST result-to-request
        result-name CDATA #REQUIRED
        request-name CDATA #IMPLIED
    >
    <!ELEMENT result-to-session EMPTY>
    <!ATTLIST result-to-session
        result-name CDATA #REQUIRED
        session-name CDATA #IMPLIED
    >
    <!ELEMENT result-to-result EMPTY>
    <!ATTLIST result-to-result
        result-name CDATA #REQUIRED
        service-result-name CDATA #IMPLIED
    >

<!--
Calls a service asynchronously and ignores the result, so no return messages 
are used; that doesn't mean no errors will result, but they would just be
system errors like database failures, etc.
-->
<!ELEMENT call-service-asynch EMPTY>
<!ATTLIST call-service-asynch
    service-name CDATA #REQUIRED
    in-map-name CDATA #REQUIRED
    include-user-login ( true | false ) "true"
>

<!-- 
Runs an external bsh script from the classpath if resource is specified and 
then runs the inlined bsh script if any is specified.

The bsh context is the current simple-method environment including maps, lists
and special objects whose names are defined in the simple-method attributes.

The current env cannot be modified, but if a Map is returned by the bsh block
the entries in the map will be put into the current env.

Error messages go on the error list and are handled with the check-errors tag.
-->
<!ELEMENT call-bsh (#PCDATA)>
<!ATTLIST call-bsh
    resource CDATA #IMPLIED
    error-list-name CDATA "error_list"
>

<!ELEMENT check-errors ( error-prefix?, error-suffix?, message-prefix?, message-suffix? )>
<!ATTLIST check-errors
    error-code CDATA "error"
    error-list-name CDATA "error_list"
>

<!-- Operations to copy map fields in the current env to context specific containers -->

<!-- Event specific operations -->    
<!ELEMENT field-to-request EMPTY>
<!ATTLIST field-to-request
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    request-name CDATA #IMPLIED
>
<!ELEMENT field-to-session EMPTY>
<!ATTLIST field-to-session
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    session-name CDATA #IMPLIED
>
<!ELEMENT request-to-field EMPTY>
<!ATTLIST request-to-field
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    request-name CDATA #IMPLIED
>
<!ELEMENT session-to-field EMPTY>
<!ATTLIST session-to-field
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    session-name CDATA #IMPLIED
>

<!-- Event specific env operations -->    
<!ELEMENT env-to-request EMPTY>
<!ATTLIST env-to-request
    env-name CDATA #REQUIRED
    request-name CDATA #IMPLIED
>
<!ELEMENT env-to-session EMPTY>
<!ATTLIST env-to-session
    env-name CDATA #REQUIRED
    session-name CDATA #IMPLIED
>
<!ELEMENT request-to-env EMPTY>
<!ATTLIST request-to-env
    env-name CDATA #REQUIRED
    request-name CDATA #IMPLIED
>
<!ELEMENT session-to-env EMPTY>
<!ATTLIST session-to-env
    env-name CDATA #REQUIRED
    session-name CDATA #IMPLIED
>

<!-- Service specific operations -->    
<!ELEMENT field-to-result EMPTY>
<!ATTLIST field-to-result
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    result-name CDATA #IMPLIED
>
<!ELEMENT env-to-result EMPTY>
<!ATTLIST env-to-result
    env-name CDATA #REQUIRED
    result-name CDATA #IMPLIED
>

<!-- Environment specific operations -->    
<!ELEMENT field-to-field EMPTY>
<!ATTLIST field-to-field
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    to-map-name CDATA #IMPLIED
    to-field-name CDATA #IMPLIED
>
<!ELEMENT env-to-list EMPTY>
<!ATTLIST env-to-list
    env-name CDATA #REQUIRED
    list-name CDATA #REQUIRED
>
<!ELEMENT env-to-field EMPTY>
<!ATTLIST env-to-field
    env-name CDATA #REQUIRED
    map-name CDATA #REQUIRED
    field-name CDATA #IMPLIED
>
<!ELEMENT field-to-env EMPTY>
<!ATTLIST field-to-env
    env-name CDATA #REQUIRED
    map-name CDATA #REQUIRED
    field-name CDATA #IMPLIED
>

<!--
These operations are used to interact with a data source through the entity 
engine and facilitate related operations.
-->

<!ELEMENT now-timestamp-to-env EMPTY>
<!ATTLIST now-timestamp-to-env
    env-name CDATA #REQUIRED
>
<!ELEMENT now-date-to-env EMPTY>
<!ATTLIST now-date-to-env
    env-name CDATA #REQUIRED
>
<!ELEMENT sequenced-id-to-env EMPTY>
<!ATTLIST sequenced-id-to-env
    sequence-name CDATA #REQUIRED
    env-name CDATA #REQUIRED
>

<!-- TODO: implement remaining entity engine related ops -->
<!ELEMENT find-by-primary-key EMPTY>
<!ATTLIST find-by-primary-key
    value-name CDATA #REQUIRED
    entity-name CDATA #REQUIRED
    map-name CDATA #REQUIRED
>
<!ELEMENT find-by-and EMPTY>
<!ATTLIST find-by-and
    list-name CDATA #REQUIRED
    entity-name CDATA #REQUIRED
    map-name CDATA #REQUIRED
>

<!ELEMENT make-value EMPTY>
<!ATTLIST make-value
    value-name CDATA #REQUIRED
    entity-name CDATA #REQUIRED
    map-name CDATA #REQUIRED
>
<!ELEMENT clone-value EMPTY>
<!ATTLIST clone-value
    value-name CDATA #REQUIRED
    new-value-name CDATA #REQUIRED
>

<!ELEMENT create-value EMPTY>
<!ATTLIST create-value
    value-name CDATA #REQUIRED
>
<!ELEMENT update-value EMPTY>
<!ATTLIST update-value
    value-name CDATA #REQUIRED
>
<!ELEMENT remove-value EMPTY>
<!ATTLIST remove-value
    value-name CDATA #REQUIRED
>
<!ELEMENT remove-by-and EMPTY>
<!ATTLIST remove-by-and
    entity-name CDATA #REQUIRED
    map-name CDATA #REQUIRED
>

<!ELEMENT store-list EMPTY>
<!ATTLIST store-list
    list-name CDATA #REQUIRED
>
<!ELEMENT remove-list EMPTY>
<!ATTLIST remove-list
    list-name CDATA #REQUIRED
>


<!-- 
Operations that conditionally execute blocks within them; they mimic the
simple-map-processor process operations that validate incoming data
-->

<!-- if-validate-method calls a static Java method that takes a String and returns a boolean -->
<!ELEMENT if-validate-method ( (%SimpleMethodOperations;)* )>
<!ATTLIST if-validate-method
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    method CDATA #REQUIRED
    class CDATA "org.ofbiz.core.util.UtilValidate"
>

<!ELEMENT if-compare ( (%SimpleMethodOperations;)* )>
<!ATTLIST if-compare
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    operator ( less | greater | less-equals | greater-equals | equals | not-equals | contains ) #REQUIRED
    value CDATA #REQUIRED
    type ( String | Double | Float | Long | Integer | Date | Time | Timestamp ) "String"
    format CDATA #IMPLIED
>

<!ELEMENT if-compare-field ( (%SimpleMethodOperations;)* )>
<!ATTLIST if-compare-field
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    operator ( less | greater | less-equals | greater-equals | equals | not-equals | contains ) #REQUIRED
    to-map-name CDATA #IMPLIED
    to-field-name CDATA #IMPLIED
    type ( String | Double | Float | Long | Integer | Date | Time | Timestamp ) "String"
    format CDATA #IMPLIED
>

<!ELEMENT if-regexp ( (%SimpleMethodOperations;)* )>
<!ATTLIST if-regexp
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
    expr CDATA #REQUIRED
>

<!ELEMENT if-empty ( (%SimpleMethodOperations;)* )>
<!ATTLIST if-empty
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
>
<!ELEMENT if-not-empty ( (%SimpleMethodOperations;)* )>
<!ATTLIST if-not-empty
    map-name CDATA #REQUIRED
    field-name CDATA #REQUIRED
>


<!-- 
    ======================================================
    ========== The Simple Map Processor Section ==========
    ======================================================
-->
<!ELEMENT simple-map-processors ( simple-map-processor+ )>

<!ELEMENT simple-map-processor ( make-in-string*, process* )>
<!ATTLIST simple-map-processor
    name CDATA #REQUIRED
>

<!-- 
    Make In String & Operations 
-->
<!ELEMENT make-in-string ( ( in-field | property | constant )* )>
<!ATTLIST make-in-string
    field CDATA #REQUIRED
>
<!ELEMENT in-field EMPTY>
<!ATTLIST in-field
    field CDATA #REQUIRED
>
<!ELEMENT property EMPTY>
<!ATTLIST property
    resource CDATA #REQUIRED
    property CDATA #REQUIRED
>
<!ELEMENT constant (#PCDATA)>

<!-- 
    Field Process & Operations 
-->
<!ELEMENT process ( ( validate-method | compare | compare-field | regexp | not-empty | copy | convert )* )>
<!ATTLIST process
    field CDATA #REQUIRED
>

<!-- validate-method calls a static Java method that takes a String and returns a boolean -->
<!ELEMENT validate-method ( fail-message | fail-property )>
<!ATTLIST validate-method
    method CDATA #REQUIRED
    class CDATA "org.ofbiz.core.util.UtilValidate"
>

<!ELEMENT compare ( fail-message | fail-property )>
<!ATTLIST compare
    operator ( less | greater | less-equals | greater-equals | equals | not-equals | contains ) #REQUIRED
    value CDATA #REQUIRED
    type ( String | Double | Float | Long | Integer | Date | Time | Timestamp ) "String"
    format CDATA #IMPLIED
>

<!ELEMENT compare-field ( fail-message | fail-property )>
<!ATTLIST compare-field
    operator ( less | greater | less-equals | greater-equals | equals | not-equals | contains ) #REQUIRED
    field CDATA #REQUIRED
    type ( String | Double | Float | Long | Integer | Date | Time | Timestamp ) "String"
    format CDATA #IMPLIED
>

<!ELEMENT regexp ( fail-message | fail-property )>
<!ATTLIST regexp
    expr CDATA #REQUIRED
>

<!ELEMENT not-empty ( fail-message | fail-property )>

<!-- Copy operation: if no to-field is specified, it is the same as the field on process -->
<!ELEMENT copy EMPTY>
<!ATTLIST copy
    to-field CDATA #IMPLIED
    replace ( true | false ) "true"
    set-if-null ( true | false ) "false"
>

<!-- Convert operation: if no to-field is specified, it is the same as the field on process -->
<!ELEMENT convert ( fail-message | fail-property )>
<!ATTLIST convert
    to-field CDATA #IMPLIED
    type ( String | Double | Float | Long | Integer | Date | Time | Timestamp ) #REQUIRED
    replace ( true | false ) "true"
    set-if-null ( true | false ) "false"
    format CDATA #IMPLIED
>

<!-- 
    Failure stuff: inline message or from a properties file 
-->
<!ELEMENT fail-message EMPTY>
<!ATTLIST fail-message
    message CDATA #REQUIRED
>

<!ELEMENT fail-property EMPTY>
<!ATTLIST fail-property
    resource CDATA #REQUIRED
    property CDATA #REQUIRED
>
