/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     David E. Jones
 *@version    1.0
 */

import org.ofbiz.core.util.UtilMisc;
import org.ofbiz.commonapp.order.shoppingcart.*;
import org.ofbiz.commonapp.product.catalog.CatalogWorker;
import org.ofbiz.commonapp.product.promo.ProductPromoWorker;

delegator = request.getAttribute("delegator");
userLogin = session.getAttribute("userLogin");

mode = session.getAttribute("mode");
if (mode == null) {
    mode = request.getParameter("mode");
    session.setAttribute("mode", mode);
}
context.put("mode", mode);

// Get the Cart and Prepare Size
shoppingCart = ShoppingCartEvents.getCartObject(request);
context.put("shoppingCartSize", shoppingCart.size());
context.put("shoppingCart", shoppingCart);

// Get the order mode
mode = request.getParameter("mode");
if (mode != null) {
    shoppingCart.setOrderType(mode);
}
mode = shoppingCart.getOrderType();
if (mode.equals("SALES_ORDER")) context.put("modeStr", "Sales");
if (mode.equals("PURCHASE_ORDER")) context.put("modeStr", "Purchase");

if (mode.equals("SALES_ORDER")) {
    // Get Cart Associated Products Data
    associatedProducts = CatalogWorker.getRandomCartProductAssoc(request, true);
    if (associatedProducts != null) 
        context.put("associatedProducts", associatedProducts);

    //Get Promo Text Data
    productPromos = ProductPromoWorker.getCatalogProductPromos(delegator, request);
    //Make sure that at least one promo has non-empty promoText
    showPromoText = false;
    productPromoIterator = productPromos.iterator(); 
    while (productPromoIterator.hasNext()) {
        productPromo = productPromoIterator.next(); 
        promoText = productPromo.get("promoText"); 
        if (promoText != null && promoText.length() > 0) showPromoText = true;
    }
    context.put("productPromos", productPromos);
    context.put("showPromoText", showPromoText);
} else {
    context.put("showPromoText", false);
}

context.put("contentPathPrefix", CatalogWorker.getContentPathPrefix(request));

