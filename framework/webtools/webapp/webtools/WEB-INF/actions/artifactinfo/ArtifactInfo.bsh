/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.ofbiz.entity.GenericDelegator;
import org.ofbiz.webtools.artifactinfo.*;
import org.ofbiz.base.util.*;

name = parameters.get("name");
location = parameters.get("location");
type = parameters.get("type");
uniqueId = parameters.get("uniqueId");

aif = ArtifactInfoFactory.getArtifactInfoFactory(delegator.getDelegatorName());
context.put("aif", aif);

if (UtilValidate.isNotEmpty(type)) {
    if (UtilValidate.isNotEmpty(name)) {
        context.put("artifactInfo", aif.getArtifactInfoByNameAndType(name, location, type));
    } else if (UtilValidate.isNotEmpty(uniqueId)) {
        context.put("artifactInfo", aif.getArtifactInfoByUniqueIdAndType(uniqueId, type));
    }
} else {
    artifactInfoSet = aif.getAllArtifactInfosByNamePartial(name);
    if (artifactInfoSet.size() == 1) {
        context.put("artifactInfo", artifactInfoSet.iterator().next());
    } else {
        context.put("artifactInfoSet", artifactInfoSet);
    }
}
