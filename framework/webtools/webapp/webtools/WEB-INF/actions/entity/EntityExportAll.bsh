/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author Brian Johnson (bmj@camfour.com)
 * @author David E. Jones (jonesde@ofbiz.org)
 * @author Jacopo Cappellato (tiz@sastau.it)
 */

import org.ofbiz.entity.jdbc.SQLProcessor;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Collection;
import java.util.TreeSet;
import org.ofbiz.entity.*;
import org.ofbiz.entity.model.ModelReader;
import org.ofbiz.entity.model.ModelEntity;
import org.ofbiz.entity.model.ModelViewEntity;
import org.ofbiz.entity.model.ModelGroupReader;
import org.ofbiz.entity.util.EntityListIterator;
import org.ofbiz.entity.transaction.TransactionUtil;

String outpath = parameters.get("outpath");
String txTimeoutStr = parameters.get("txTimeout");
int txTimeout = 7200;
try {
    txTimeout = Integer.parseInt(txTimeoutStr);
} catch (Exception e) {
}

ModelReader reader = delegator.getModelReader();
Collection ec = reader.getEntityNames();
TreeSet entityNames = new TreeSet(ec);
Collection results = new ArrayList();

int fileNumber = 1;
long numberWritten = 0;

if (outpath != null) {
    File outdir = new File(outpath);
    if(!outdir.exists()) {
        outdir.mkdir();
    }
    if(outdir.isDirectory() && outdir.canWrite()) {
        Iterator passedEntityNames= entityNames.iterator();
        
        while(passedEntityNames.hasNext()) { 
            numberWritten = 0;
            String curEntityName = (String)passedEntityNames.next();
            EntityListIterator values = null;
            boolean beganTransaction = false;
            try {
                beganTransaction = TransactionUtil.begin(txTimeout);
    
                try {
                    ModelEntity me = delegator.getModelEntity(curEntityName);
                    if (me instanceof ModelViewEntity) {
                        results.add("["+fileNumber +"] [vvv] " + curEntityName + " skipping view entity");
                        continue;
                    }
                    
                    // some databases don't support cursors, or other problems may happen, so if there is an error here log it and move on to get as much as possible
                    try {
                        values = delegator.findListIteratorByCondition(curEntityName, null, null, null, me.getPkFieldNames(), null);
                    } catch (Exception entityEx) {
                        results.add("["+fileNumber +"] [xxx] Error when writing " + curEntityName + ": " + entityEx);
                        continue;
                    }
                    
                    //Don't bother writing the file if there's nothing
                    //to put into it
                    GenericValue value = (GenericValue) values.next();
                    if (value != null) {
                        PrintWriter writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(outdir, curEntityName +".xml")), "UTF-8")));
                        writer.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                        writer.println("<entity-engine-xml>");
    
                        do {
                            value.writeXmlText(writer, "");
                            numberWritten++;
                        } while ((value = (GenericValue) values.next()) != null);
                        writer.println("</entity-engine-xml>");
                        writer.close();
                        results.add("["+fileNumber +"] [" + numberWritten + "] " + curEntityName + " wrote " + numberWritten + " records");
                    } else {
                        results.add("["+fileNumber +"] [---] " + curEntityName + " has no records, not writing file");
                    }
                    values.close();
                } catch (Exception ex) {
                    if (values != null) {
                        values.close();
                    }
                    results.add("["+fileNumber +"] [xxx] Error when writing " + curEntityName + ": " + ex);
                }
            } catch (GenericEntityException e) {
                String errMsg = "Failure in operation, rolling back transaction";
                Debug.logError(e, errMsg, "xmldsdumpall.jsp");
                try {
                    // only rollback the transaction if we started one...
                    TransactionUtil.rollback(beganTransaction, errMsg, e);
                } catch (GenericEntityException e2) {
                    Debug.logError(e2, "Could not rollback transaction: " + e2.toString(), "xmldsdumpall.jsp");
                }
                // after rolling back, rethrow the exception
                throw e;
            } finally {
                // only commit the transaction if we started one... this will throw an exception if it fails
                TransactionUtil.commit(beganTransaction);
            }
            
            fileNumber++;
        }
    }
}

context.put("results", results);