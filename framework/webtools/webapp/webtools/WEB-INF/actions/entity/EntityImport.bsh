/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author David E. Jones (jonesde@ofbiz.org)
 * @author Jacopo Cappellato (tiz@sastau.it)
 */

import java.util.ArrayList;
import java.io.FileReader;
import java.io.StringWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import org.w3c.dom.*;
import org.xml.sax.InputSource;

import freemarker.template.*;
import freemarker.ext.dom.NodeModel;
import freemarker.ext.beans.BeansWrapper;

import org.ofbiz.base.util.UtilURL;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.base.util.UtilFormatOut;
import org.ofbiz.entity.util.EntitySaxReader;
import org.ofbiz.entity.transaction.TransactionUtil;

String filename = request.getParameter("filename");
String fmfilename = request.getParameter("fmfilename");
boolean isUrl = request.getParameter("IS_URL") != null;

String txTimeoutStr = UtilFormatOut.checkEmpty(request.getParameter("txTimeout"), "7200");
Integer txTimeout = null;
try {
    txTimeout = Integer.valueOf(txTimeoutStr);
} catch (Exception e) {
    txTimeout = new Integer(7200);
    errorMessageList.add("ERROR: TX Timeout not a valid number, setting to 7200 seconds (2 hours): " + e.getMessage());
}
boolean mostlyInserts = request.getParameter("mostlyInserts") != null;
boolean keepStamps = request.getParameter("maintainTimeStamps") != null;
boolean createDummyFks = request.getParameter("createDummyFks") != null;
String fulltext = request.getParameter("fulltext");



List messages = new ArrayList();

if (filename != null && filename.length() > 0) {
    long numberRead = -1;
    EntitySaxReader reader = new EntitySaxReader(delegator);
    if (mostlyInserts) {
        reader.setUseTryInsertMethod(true);
    }
    if (keepStamps) {
        reader.setMaintainTxStamps(keepStamps);
    }
    if (txTimeout != null) {
        reader.setTransactionTimeout(txTimeout.intValue());
    }
    if (createDummyFks) {
        reader.setCreateDummyFks(true);
    }
    URL url = null;
    try {
        url = isUrl?new URL(filename):UtilURL.fromFilename(filename);
    } catch(MalformedURLException e) {
        errorMessageList.add("ERROR: " + e.getMessage());
    }

    if (UtilValidate.isNotEmpty(fmfilename)) {
        FileReader templateReader = null;
        try {
            templateReader = new FileReader(fmfilename);
        } catch(FileNotFoundException e) {
            errorMessageList.add("ERROR: " + e.getMessage());
        }
        
        StringWriter outWriter = new StringWriter();
        Configuration conf = org.ofbiz.base.util.template.FreeMarkerWorker.makeDefaultOfbizConfig();
        
        Template template = null;
        try {
            template = new Template("FMImportFilter", templateReader, conf);
        } catch(IOException e) {
            errorMessageList.add("ERROR: " + e.getMessage());
        }

        Map context = new HashMap();
        InputStream is = null;
        try {
            is = url.openStream();
        } catch(IOException e) {
            errorMessageList.add("ERROR: " + e.getMessage());
        }

        NodeModel nodeModel = NodeModel.parse(new InputSource(is));
        context.put("doc", nodeModel);
        BeansWrapper wrapper = BeansWrapper.getDefaultInstance();
        TemplateHashModel staticModels = wrapper.getStaticModels();
        context.put("Static", staticModels);

        template.process(context, outWriter);
        String s = outWriter.toString();
        try {
            numberRead = reader.parse(s);
        } catch(Exception exc) {
            errorMessageList.add("ERROR: " + exc.getMessage());
        }
    } else {
        try {
            numberRead = reader.parse(url);
        } catch(Exception exc) {
            errorMessageList.add("ERROR: " + exc.getMessage());
        }
    }
    messages.add("Got " + numberRead + " entities to write to the datasource.");

} else if (fulltext != null && fulltext.length() > 0) {
    long numberRead = -1;
    EntitySaxReader reader = new EntitySaxReader(delegator);
    if (keepStamps) {
        reader.setMaintainTxStamps(keepStamps);
    }
    if (createDummyFks) {
        reader.setCreateDummyFks(true);
    }
    if (UtilValidate.isNotEmpty(fmfilename)) {
        FileReader templateReader = null;
        try {
            templateReader = new FileReader(fmfilename);
        } catch(FileNotFoundException e) {
            errorMessageList.add("ERROR: " + e.getMessage());
        }
        
        StringWriter outWriter = new StringWriter();
        Configuration conf = org.ofbiz.base.util.template.FreeMarkerWorker.makeDefaultOfbizConfig();
        
        Template template = null;
        try {
            template = new Template("FMImportFilter", templateReader, conf);
        } catch(IOException e) {
            errorMessageList.add("ERROR: " + e.getMessage());
        }

        Map context = new HashMap();
        StringReader sr = new StringReader(fulltext);

        NodeModel nodeModel = NodeModel.parse(new InputSource(sr));
        context.put("doc", nodeModel);
        BeansWrapper wrapper = BeansWrapper.getDefaultInstance();
        TemplateHashModel staticModels = wrapper.getStaticModels();
        context.put("Static", staticModels);

        template.process(context, outWriter);
        String s = outWriter.toString();
        try {
            numberRead = reader.parse(s);
        } catch(Exception exc) {
            errorMessageList.add("ERROR: " + exc.getMessage());
        }
    } else {
        try {
            numberRead = reader.parse(fulltext);
        } catch(Exception exc) {
            TransactionUtil.rollback(true, "ERROR: ", exc);
            errorMessageList.add("ERROR: " + exc.getMessage());
        }
    }
    messages.add("Got " + numberRead + " entities to write to the datasource.");

} else {
    messages.add("No filename/URL or complete XML document specified, doing nothing.");
}
context.put("messages", messages);
